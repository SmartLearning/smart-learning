{"version":3,"sources":["app/AppModule.js","app/blocks/BlocksModule.js","app/contents/ContentModule.js","app/courses/CourseModule.js","app/home/HomeModule.js","app/layouts/LayoutModule.js","app/questions/QuestionModule.js","app/blocks/BlocksConstants.js","app/blocks/language/LanguageConstants.js","app/blocks/util/directives/TableConstants.js","app/layouts/LayoutConstants.js","app/blocks/config/RouterHelperProvider.js","app/blocks/util/directives/AlertProvider.js","app/AppConfig.js","app/blocks/config/AlertConfig.js","app/blocks/config/CompileConfig.js","app/blocks/config/HttpConfig.js","app/blocks/config/LocalStorageConfig.js","app/blocks/config/TranslationConfig.js","app/AppRoute.js","app/contents/ContentRoute.js","app/courses/CourseRoute.js","app/courses/detail/CourseDetailRoute.js","app/courses/list/CourseListRoute.js","app/home/HomeRoute.js","app/layouts/error/ErrorRoute.js","app/questions/list/QuestionListRoute.js","app/questions/QuestionRoute.js","app/blocks/util/services/Base64UtilService.js","app/blocks/util/services/CrudUtilsService.js","app/blocks/util/services/CustomEditDialogService.js","app/blocks/util/services/CustomTableUtilService.js","app/blocks/util/services/DataUtilsService.js","app/blocks/util/services/DateUtilsService.js","app/blocks/util/services/HtmlTagUtilService.js","app/blocks/util/services/ResponseUtilService.js","app/blocks/util/services/RichTextEditDialogService.js","app/blocks/util/services/SidenavUtilService.js","app/blocks/util/services/StorageUtilService.js","app/blocks/util/services/StringUtilService.js","app/blocks/config/TranslationStorageFactory.js","app/blocks/language/LanguageFactory.js","app/GoogleApiFactory.js","app/blocks/language/LanguageFilter.js","app/blocks/util/filters/ButtonsFilter.js","app/blocks/util/filters/IconFilter.js","app/blocks/util/filters/LocaleOrderByFilter.js","app/blocks/util/filters/ObjectFilter.js","app/blocks/util/filters/StringFilter.js","app/blocks/util/directives/AuthorityDirective.js","app/blocks/util/directives/AutocompleteInfiniteScrollDirective.js","app/blocks/util/directives/CompileDirective.js","app/blocks/util/directives/CustomTableDirective.js","app/blocks/util/directives/DatetimeDirective.js","app/blocks/util/directives/DatetimePickerDirective.js","app/blocks/util/directives/EnterKeyDirective.js","app/blocks/util/directives/EqualToDirective.js","app/blocks/util/directives/FixedHeaderDirective.js","app/blocks/util/directives/MaxBytesDirective.js","app/blocks/util/directives/MinBytesDirective.js","app/blocks/util/directives/SplashScreenDirective.js","app/blocks/util/directives/TextAngularDirective.js","app/blocks/util/directives/TextAngularMaxLengthDirective.js","app/blocks/util/directives/AlertComponent.js","app/blocks/interceptor/ErrorHandlerInterceptor.js","app/blocks/interceptor/NotificationInterceptor.js","app/blocks/handlers/StateHandler.js","app/blocks/handlers/TranslationHandler.js","app/AppController.js","app/blocks/language/LanguageController.js","app/blocks/util/directives/DynamicController.js","app/blocks/util/directives/table-input/NumericInputController.js","app/blocks/util/directives/table-input/TableEnumInputController.js","app/blocks/util/directives/table-input/TableInputController.js","app/contents/ContentController.js","app/courses/CourseController.js","app/courses/detail/CourseDetailController.js","app/courses/list/CourseListController.js","app/home/HomeController.js","app/layouts/sidebar/SidebarController.js","app/questions/list/QuestionListController.js","app/questions/QuestionController.js","app/AppConstant.js","app/main-app.js"],"names":["angular","run","StateHandler","TranslationHandler","initialize","module","$inject","constant","editType","NUMERIC","BOOLEAN","TEXT","ENUM","CUSTOM","ROOT","ADMIN","ACCOUNT","routerHelperProvider","$locationProvider","$stateProvider","$urlRouterProvider","RouterHelper","$location","$window","$rootScope","$state","$translate","$translatePartialLoader","$filter","Alert","configureStates","states","otherwisePath","forEach","item","config","resolve","extend","resolveAlways","state","hasOtherwise","otherwise","init","$on","stateChangeError","stateChangeSuccess","getStates","get","event","toState","toParams","fromState","fromParams","error","onRefresh","onSuccess","message","msg","destination","data","statusText","status","warning","path","then","console","log","handlingStateChangeError","stateCounts","errors","pageTitle","name","loadedTemplateUrl","addPart","refresh","title","document","changes","service","undefined","this","configure","cfg","$get","provider","AlertProvider","$timeout","$sce","$injector","isToast","toast","clear","alerts","length","getTimeout","timeout","defaultTimeout","deleteConfirmation","okButtonMessage","cancelButtonMessage","variable","confirm","success","params","usingMessageFormat","add","type","$mdDialog","messageFormat","text","instant","textContent","ariaLabel","targetEvent","ok","cancel","show","info","factory","alertOptions","alert","trustAsHtml","id","alertId","position","scoped","close","closeAlert","alreadyAdded","push","filter","toString","addAlert","extAlerts","format","$mdToast","templateUrl","bindToController","controller","ToastController","controllerAs","hideDelay","locals","content","interpolation","that","thisAlerts","closeAlertByIndex","map","e","indexOf","index","splice","handleServerResponse","httpResponse","Math","floor","result","key","errorHeader","headers","errorParams","fromJson","fieldErrors","i","fieldError","convertedField","field","replace","objectName","toLowerCase","description","AuthenticationException","toJson","showAsToast","$this","hide","vm","AppConfig","$mdThemingProvider","timeAgoSettings","lazyImgConfigProvider","onImageError","image","element","$elem","attr","setOptions","onError","strings","alwaysWatchTheme","alertConfig","compileConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","httpConfig","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","decode","val","encode","equals","a","b","is","setMatchlist","interceptors","pattern","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","translateConfig","$translateProvider","tmhDynamicLocaleProvider","useLoader","urlTemplate","preferredLanguage","useStorage","useSanitizeValueStrategy","addInterpolation","forceAsyncReload","localeLocationPattern","useCookieStorage","storageKey","runApp","routerHelper","abstract","authorities","initialization","language","$stateParams","runCourse","url","parent","views","content@","body","model","AppConstants","GoogleAPI","onThen","t","onEach","file","mimeType","SPREADSHEET_MIME_TYPE","files","items","DOCUMENT_MIME_TYPE","runHome","menu","icon","groupOrder","runLayout","runQuestion","sheetId","Base64Service","input","chr1","chr2","enc1","enc2","enc3","output","chr3","enc4","charCodeAt","isNaN","keyStr","charAt","String","fromCharCode","CrudUtilsService","DateUtils","transformResponse","fromServer","transformRequest","toServer","getAll","query","method","isArray","update","save","delete","CustomEditDialogService","$document","$mdEditDialog","showDialog","options","ctrl","clickOutsideToClose","backdrop","afterClose","onClick","remove","isFunction","$modelValue","on","escToClose","onClose","onKeyUp","keyCode","ESCAPE","onDestroy","off","keyup","find","getElement","getInput","afterOutsideToClose","afterEscToClose","build","size","getType","focusOnOpen","scope","messages","modelValue","placeholder","promise","prop","CustomEditDialogController","$scope","$element","$q","submit","editDialog","$invalid","reject","when","dismiss","CustomTableUtilService","convertOrderToColumnAndOrder","order","sortOrder","sortColumn","substr","column","setValue","fieldName","value","split","n","k","getValue","getFieldValue","header","isObject","DataUtilsService","abbreviate","isString","substring","slice","byteSize","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","openFile","open","toBase64","cb","onLoad","base64Data","target","fileReader","FileReader","readAsDataURL","onload","DateUtilsService","convertLocalDateToServer","date","serverFormat","getFormattedDate","dateFormat","isUndefined","convertLocalDateFromServer","dateLongValue","Date","parse","convertStringDateToServer","convertDateTimeFromServer","changeDate","fields","iterateField","row","modifiedAt","untouchedModifiedAt","createdAt","untouchedCreatedAt","changeToServerDate","pureData","searchForAllDates","removeAngularObjects","onIterate","formatWithoutSeconds","formatShort","dateformat","HtmlTagUtilService","escapeTags","stringWithTags","ResponseUtilService","parseLink","partsFunc","p","section","Error","trim","queryString","RegExp","$0","$1","$2","$3","page","parseInt","links","parts","buildSort","orderBy","predicate","reverse","RichTextEditDialogService","finally","textEditDialogScope","$new","escapeToClose","onSave","RichTextEditDialogController","activate","resolvedWithSave","SidenavUtilService","$mdSidenav","$mdCompiler","componentId","isOpen","deferred","defer","compile","compiledData","sideNav","getElementById","html","link","response","StorageUtilService","JSON","localStorage","getItem","setItem","stringify","removeItem","clearAll","StringUtilService","limitTo","string","dots","atWordEnd","lastIndexOf","normalize","iterate","charMap","À","Á","Â","Ã","Ä","Å","Æ","È","É","Ê","Ë","Ì","Í","Î","Ï","Ð","Ñ","Ò","Ô","Õ","Ő","Ø","Ù","Ú","Û","Ű","Ý","Þ","ß","à","á","â","ã","ä","å","æ","è","é","ê","ë","ì","í","î","ï","ð","ñ","ò","ô","õ","ő","ø","ù","ú","û","ű","ý","þ","ÿ","©","Α","Β","Γ","Δ","Ε","Ζ","Η","Θ","Ι","Κ","Λ","Μ","Ν","Ξ","Ο","Π","Ρ","Σ","Τ","Υ","Φ","Χ","Ψ","Ω","Ά","Έ","Ί","Ό","Ύ","Ή","Ώ","Ϊ","Ϋ","α","β","γ","δ","ε","ζ","η","θ","ι","κ","λ","μ","ν","ξ","ο","π","ρ","σ","τ","υ","φ","χ","ψ","ω","ά","έ","ί","ό","ύ","ή","ώ","ς","ϊ","ΰ","ϋ","ΐ","Ş","İ","Ç","Ü","Ö","Ğ","ş","ı","ç","ü","ö","ğ","А","Б","В","Г","Д","Е","Ё","Ж","З","И","Й","К","Л","М","Н","О","П","Р","С","Т","У","Ф","Х","Ц","Ч","Ш","Щ","Ъ","Ы","Ь","Э","Ю","Я","а","б","в","г","д","е","ё","ж","з","и","й","к","л","м","н","о","п","р","с","т","у","ф","х","ц","ч","ш","щ","ъ","ы","ь","э","ю","я","Є","І","Ї","Ґ","є","і","ї","ґ","Ď","Ě","Ň","Ř","Ť","Ů","ď","ě","ň","ř","ť","ů","Ą","Ć","Ę","Ł","Ń","Ó","Ś","Ź","Ż","ą","ć","ę","ł","ń","ó","ś","ź","ż","Ā","Č","Ē","Ģ","Ī","Ķ","Ļ","Ņ","Š","Ū","Ž","ā","č","ē","ģ","ī","ķ","ļ","ņ","š","ū","ž","translationStorageProviderFactory","$cookies","$log","LANGUAGES","getObject","putObject","put","LanguageFactory","getCurrent","storage","GoogleAPIFactory","$http","getQuestions","errorCallback","successCallback","onMap","qArray","onSplitMap","option","isAnswer","startsWith","answer","questionTitle","optionsStr","questionType","numOfAnswers","match","answers","values","API_KEY","listItems","rootId","mimeTypes","q","mimeTypeQueries","join","questions","findLanguageFromKey","findLanguageFromKeyFilter","lang","ca","da","de","el","en","es","fa","fr","gl","hu","hi","it","ja","ko","mr","nl","pl","pt-br","pt-pt","ro","ru","sv","ta","tr","zh-cn","zh-tw","ButtonsFilter","buttons","container","button","cls","activeCls","class","click","IconFilter","LocaleOrderBy","compare","onSort","aa","toLocaleLowerCase","bb","localeCompare","onPush","filtered","sort","ObjectFilter","objectFilter","asArray","pathArr","current","ShowObjectFilter","showObject","layout","FormatFilter","formatFilter","theString","arguments","regEx","CapitalizeFilter","capitalizeFilter","toUpperCase","CharactersFilter","charactersFilter","chars","breakOnWord","lastspace","WordsFilter","wordsFilter","words","inputWords","SplitFilter","splitFilter","separator","splitIndex","YesNoFilter","yesNoFilter","trueResponse","falseResponse","JoinFilter","joinFilter","NormalizeSlugUrlFilter","StringUtil","normalizeSlugUrl","PrettifyFilter","syntaxHighlight","json","onMatch","test","hasAnyAuthority","Principal","attrs","setVisible","removeClass","setHidden","addClass","defineVisibility","reset","$watch","isAuthenticated","restrict","hasAuthority","authority","directive","AutocompleteInfiniteScrollDirective","$interval","checkTillExists","removeEvent","rep","onScroll","evt","apply","$eval","autocompleteInfiniteScroll","scrollTop","offsetHeight","scrollHeight","time","getTime","now","$apply","getElementsByClassName","interval","compileDirective","mdCustomTable","CustomTableController","transclude","leftPaginationMenu","leftShowHideMenu","total","pagination","searchBox","showHideColumns","userInfo","keyNavigationEnabled","onPaginate","onReorder","onRowClick","onRowDblClick","onRowsToggle","onSearchSubmit","onMouseOverOnCell","onMouseLeaveOnCell","hidePager","enableSelectAll","toggleCurrentPageSelection","getSelectedItemsEvent","getLegacySelectedItemsEvent","clearSelectionEvent","onSelectedCount","onCellValueChange","selectable","keyControlled","CustomEditDialog","CustomTableUtil","RichTextEditDialog","HtmlTagUtil","TableConstants","getAllSelected","callback","count","getSelectedCount","all","selectedAll","unselected","Array","from","unselectedProducts","selected","selectedProducts","getAllLegacySelected","clearSelection","afterHtmlRender","isEmptyData","defaultPagination","isDefined","setPageData","sliceData","registerWatchOnData","registerWatchOnHeaders","tHeaders","extendHeaders","holdKey","releaseKey","rowSelectable","toggleItemSelection","deselect","Set","fireCountEvent","func","getCellClass","cellClass","onToggleSelectAll","pageData","totalDisplayed","displayedData","$emit","increaseTotalDisplayed","onEdit","validations","edit","merge","onSearchFilter","search","tableBody","registerNavigationListener","navigationListener","currentCellIndx","changeCellPosition","currentRowIndx","extendedHeaders","defaultHeader","fromDir","prevCell","currentCell","currentRow","children","isCellCheckbox","handleCheckboxCellPositioning","isCellHidden","handleHiddenCellPositioning","focus","cell","hasClass","isEditableField","editable","onCellClick","cellElement","onCellDblClick","isEditable","openRichTextDialog","openEditDialog","onCellEnterPress","callFunction","fn","$watchCollection","newValue","oldValue","getSuitableDataParams","getCorrectValue","getLimitedAndEscapedData","getSuitableData","property","applyFilterIf","filterParams","onSearch","searchText","found","getSearchedData","searchForm","paginate","pageSize","finishMultiple","isRemotePagination","slicedData","offset","getOrderedData","reorder","selectionEnabled","controllKeyPressed","isSelectAllPerPage","selectedOne","onDblRowSelect","onRowSelect","callRowToggle","start","onRowDeselect","updateScope","CTRL_KEY","unchecked","first","second","callOnCellSaveCallback","stopPropagation","returnFocusToCell","catch","updatedModel","checkAndSave","placeHolder","validators","richTextValue","label","rowsPerPage","of","showHide","visible","desc","datetimeDirective","moment","elm","unshiftFormatter","unshiftParser","viewValue","isValid","year","toDate","datetime","$formatters","unshift","$parsers","require","ConfigureTimePicker","$mdDateLocaleProvider","parseDate","dateString","m","defaultDateFormat","NaN","formatDate","DatetimePickerDirective","initConf","showTime","showDate","timePickerOptions","step","timeFormat","DatetimePickerController","maxDate","minDate","valueChanged","timeValue","dateValue","combineDateTime","setHours","getHours","setMinutes","getMinutes","timeValueStr","formatTime","timeParts","OnEnterKeyDirective","listener","onEnterKey","which","preventDefault","bind","equalToDirective","otherModelValue","attributes","ngModel","$validators","equalTo","$validate","fixHead","$compile","compileFn","tElement","clone","original","removeAttr","after","cells","getCells","node","prototype","call","jQLite","updateCells","style","getComputedStyle","getWidth","width","setWidth","css","minWidth","maxWidth","addEventListener","removeEventListener","table","empty","top","display","backgroundColor","zIndex","scrollContainer","insertBefore","tableOffset","height","OnMaxBytes","onValidator","numberOfBytes","$isEmpty","maxbytes","OnMinBytes","minbytes","splashScreen","template","dot","customTextAngularDirective","$parse","textAngularManager","editor","retrieveEditor","editorScope","displayElements","trigger","shouldFocus","CustomTextAngularController","rows","toolbar","maxLength","$attrs","defaultToolbarButtons","textAngularMaxLength","AlertController","listenToServerError","catchServerError","cleanHttpErrorListener","addServerErrorAlert","exception","component","bindings","errorHandlerInterceptorFactory","responseError","broadcast","notificationInterceptorFactory","alertKey","param","StateHandlerService","Language","VERSION","back","previousStateName","go","previousStateParams","onChangeSuccess","titleKey","redirected","updateTitle","stateChangeStart","onChangeStart","toStateParams","use","TranslationHandlerService","translateChangeSuccess","onTitle","$current","AppController","$mdUtil","changePage","pages","goTo","reload","openMenu","timer","toggle","debounce","listQuestions","LanguageController","tmhDynamicLocale","onLang","languages","changeLanguage","languageKey","set","overrideLang","DynamicControllerDirective","elem","compileData","as","terminal","priority","NumericInputController","parseFloat","patternOnlyOneDecimal","TableEnumInputController","initialData","minLength","displayField","noop","hint","selectedField","resetPage","busy","onBeforeAdd","onItemClick","disabled","TableInputController","ContentController","changeUrl","iframe","trustAsResourceUrl","querySelector","CourseController","CourseDetailController","goToItem","CourseListController","listCourses","ROOT_FOLDER_ID","FOLDER_MIME_TYPE","HomeController","SidebarController","MenuGroups","refreshNavRoutes","r","settings","showOnMenu","r1","r2","group","groups","routes","hasOwnProperty","isCurrent","route","menuName","QuestionListController","submitAnswer","QuestionController","QUESTION_SHEET_ID","$templateCache"],"mappings":"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IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IAEAC,IAAA,MAEAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IAEAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IAEAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,GACAC,IAAA,IACAC,IAAA,GACAC,IAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,GACAC,IAAA,IACAC,IAAA,GACAC,IAAA,IACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IAEAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IAEAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IAEAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IASA,OANA7tB,GAAAiC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","file":"app/main-app-1.2.js","sourcesContent":["/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module(\n            'smartApp', [\n                'yaru22.angular-timeago',\n                'ngMaterial',\n                'ngStorage',\n                'ngMessages',\n                'ngLetterAvatar',\n                'ngSanitize',\n                'tmh.dynamicLocale',\n                'pascalprecht.translate',\n                'camelCaseToHuman',\n                'ngResource',\n                'ngCookies',\n                'ngAria',\n                'ngCacheBuster',\n                'ngFileUpload',\n                'ui.router',\n                'infinite-scroll',\n                'angular-loading-bar',\n                'oc.lazyLoad',\n                'md.data.table',\n                'ngAnimate',\n                'textAngular',\n                'ng.deviceDetector',\n                'angularLazyImg',\n                'angular-clipboard',\n                'app.layout',\n                'app.blocks',\n                'app.home',\n                'app.course',\n                'app.content',\n                'app.question'\n            ]\n        )\n        .run(run);\n\n    run.$inject = [\n        'StateHandler',\n        'TranslationHandler'\n    ];\n\n    /* @ngInject */\n    function run(StateHandler, TranslationHandler) {\n        StateHandler.initialize();\n        TranslationHandler.initialize();\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.blocks', []);\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.content', []);\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.course', []);\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.home', []);\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.layout', []);\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.question', []);\n\n})(angular);\n","(function (angular) {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('app.blocks')\n        .constant('VERSION', \"1.2\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', ['en']);\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .constant(\n            'TableConstants', {\n                editType: {\n                    NUMERIC: 'NUMERIC',\n                    BOOLEAN: 'BOOLEAN',\n                    TEXT: 'TEXT',\n                    ENUM: 'ENUM',\n                    CUSTOM: 'CUSTOM'\n                }\n            }\n        );\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.layout')\n        .constant(\n            'MenuIcons', {\n                ROOT: 'apps',\n                ADMIN: 'perm_data_setting',\n                ACCOUNT: 'vpn_key'\n            }\n        );\n\n})(angular);\n","/* Help configure the state-base ui.router */\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .provider('routerHelper', routerHelperProvider);\n\n    routerHelperProvider.$inject = [\n        '$locationProvider',\n        '$stateProvider',\n        '$urlRouterProvider'\n    ];\n    /* @ngInject */\n    function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\n        /* jshint validthis:true */\n        var config = {\n            pageTitle: undefined,\n            resolveAlways: {}\n        };\n\n        //$locationProvider.html5Mode(true);\n\n        this.configure = function (cfg) {\n            angular.extend(config, cfg);\n        };\n\n        this.$get = RouterHelper;\n\n        RouterHelper.$inject = [\n            '$location',\n            '$window',\n            '$rootScope',\n            '$state',\n            '$translate',\n            '$translatePartialLoader',\n            '$filter',\n            'Alert'\n        ];\n        /* @ngInject */\n        function RouterHelper($location, $window, $rootScope, $state, $translate, $translatePartialLoader, $filter, Alert) {\n            var handlingStateChangeError = false;\n            var hasOtherwise = false;\n            var stateCounts = {\n                errors: 0,\n                changes: 0\n            };\n\n            var service = {\n                configureStates: configureStates,\n                getStates: getStates,\n                stateCounts: stateCounts\n            };\n\n            init();\n\n            return service;\n\n            ///////////////\n\n            function configureStates(states, otherwisePath) {\n                states.forEach(forEach);\n                if (otherwisePath && !hasOtherwise) {\n                    hasOtherwise = true;\n                    $urlRouterProvider.otherwise(otherwisePath);\n                }\n\n                /////////////////////////////////////////////\n\n                function forEach(item) {\n                    item.config.resolve = angular.extend(item.config.resolve || {}, config.resolveAlways);\n                    $stateProvider.state(item.state, item.config);\n                }\n            }\n\n            function init() {\n                // Route cancellation:\n                // On routing error, go to the dashboard.\n                // Provide an exit clause if it tries to do it twice.\n                $rootScope.$on('$stateChangeError', stateChangeError);\n                $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n            }\n\n            function getStates() {\n                return $state.get();\n            }\n\n            function stateChangeError(event, toState, toParams, fromState, fromParams, error) {\n                if (handlingStateChangeError) {\n                    return;\n                }\n                stateCounts.errors++;\n                handlingStateChangeError = true;\n                var destination = (toState &&\n                    (toState.data.pageTitle || toState.name || toState.loadedTemplateUrl)) ||\n                    'unknown target';\n\n                $translatePartialLoader.addPart('global');\n                $translate.refresh().then(onRefresh);\n\n                ///////////////////////////////////////////////////////////////\n\n                function onRefresh() {\n                    $translate('global.route.failed').then(onSuccess, console.log);\n\n                    ///////////////////////////////////////////////////////////////\n\n                    function onSuccess(message) {\n                        var msg = $filter('format')(\n                            message,\n                            destination,\n                            (error.data || ''),\n                            (error.statusText || ''),\n                            (error.status || ''),\n                            (error || '')\n                        );\n                        Alert.warning(msg, [toState]);\n                        $location.path('/');\n                    }\n                }\n            }\n\n            function stateChangeSuccess(event, toState) {\n                stateCounts.changes++;\n                handlingStateChangeError = false;\n                var title = config.pageTitle + ' ' + (toState.title || '');\n                $translate(title || 'global.access.title').then(onSuccess);\n\n                ////////////////////////////////////////////////////////\n\n                function onSuccess(title) {\n                    $window.document.title = title;\n                    $rootScope.title = title;\n                }\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .provider('Alert', AlertProvider);\n\n    AlertProvider.$inject = [];\n    /* @ngInject */\n    function AlertProvider() {\n        var $this = this;\n        $this.toast = false;\n        /* jshint validthis:true */\n        $this.showAsToast = showAsToast;\n\n        $this.$get = Alert;\n\n        Alert.$inject = [\n            '$timeout',\n            '$sce',\n            '$translate',\n            '$injector'\n        ];\n        /* @ngInject */\n        function Alert($timeout, $sce, $translate, $injector) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                defaultTimeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                handleServerResponse: handleServerResponse,\n                clear: clear,\n                get: get,\n                confirm: confirm,\n                deleteConfirmation: deleteConfirmation,\n                success: success,\n                error: error,\n                info: info,\n                alreadyAdded: alreadyAdded\n            };\n\n            /////////////////////\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts.length = 0;\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function getTimeout(timeout) {\n                if (!timeout && timeout !== 0) {\n                    return defaultTimeout;\n                }\n                return timeout;\n            }\n\n            function deleteConfirmation(event, title, message, okButtonMessage, cancelButtonMessage, variable) {\n                return confirm(\n                    event,\n                    title || 'global.delete.title',\n                    message || 'global.delete.message',\n                    okButtonMessage || 'global.delete.buttons.delete',\n                    cancelButtonMessage || 'global.delete.buttons.cancel',\n                    variable\n                );\n            }\n\n            function success(msg, params, timeout, toast, usingMessageFormat) {\n                return this.add(\n                    {\n                        type: 'accent',\n                        msg: msg,\n                        params: params,\n                        usingMessageFormat: usingMessageFormat,\n                        timeout: getTimeout(timeout),\n                        toast: toast || isToast()\n                    }\n                );\n            }\n\n            function confirm(event, title, message, okButtonMessage, cancelButtonMessage, params, usingMessageFormat) {\n                var $mdDialog = $injector.get('$mdDialog');\n                var messageFormat = usingMessageFormat ? 'messageformat' : null;\n\n                var text = {\n                    title: $translate.instant(title, params || {}, messageFormat),\n                    message: $translate.instant(message, params || {}, messageFormat),\n                    okButtonMessage: $translate.instant(okButtonMessage, params || {}, messageFormat),\n                    cancelButtonMessage: $translate.instant(cancelButtonMessage, params || {}, messageFormat)\n                };\n                var confirm = $mdDialog.confirm()\n                    .title(text.title)\n                    .textContent(text.message)\n                    .ariaLabel(text.message)\n                    .targetEvent(event)\n                    .ok(text.okButtonMessage)\n                    .cancel(text.cancelButtonMessage);\n                return $mdDialog.show(confirm);\n            }\n\n            function error(msg, params, timeout, toast, usingMessageFormat) {\n                return this.add(\n                    {\n                        type: 'warn',\n                        msg: msg,\n                        params: params,\n                        usingMessageFormat: usingMessageFormat,\n                        timeout: getTimeout(timeout),\n                        toast: toast || isToast()\n                    }\n                );\n            }\n\n            function info(msg, params, timeout, toast, usingMessageFormat) {\n                return this.add(\n                    {\n                        type: 'primary',\n                        msg: msg,\n                        params: params,\n                        usingMessageFormat: usingMessageFormat,\n                        timeout: getTimeout(timeout),\n                        toast: toast || isToast()\n                    }\n                );\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if (!alert.scoped && !alreadyAdded(alert)) {\n                    alerts.push(alert);\n                }\n                //TODO: this usage is wrong, we have to fix it later...\n                return alert;\n            }\n\n            function alreadyAdded(alert) {\n                return alerts.filter(function (item) {\n                        return item.msg.toString() === alert.msg.toString()\n                    }).length > 0;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                var format = alertOptions.usingMessageFormat ? 'messageformat' : null;\n                alertOptions.alertId = alertId++;\n                if (alertOptions.toast) {\n                    var $mdToast = $injector.get('$mdToast');\n                    $mdToast.show(\n                        {\n                            templateUrl: 'app/blocks/util/directives/AlertProviderDialogTemplate.html',\n                            bindToController: true,\n                            controller: ToastController,\n                            controllerAs: 'vm',\n                            hideDelay: alertOptions.timeout,\n                            position: 'top right',\n                            locals: {\n                                content: alertOptions.msg,\n                                params: alertOptions.params,\n                                type: alertOptions.type,\n                                interpolation: format\n                            }\n                        }\n                    );\n\n                    return;\n                }\n\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params, format);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(\n                        function () {\n                            that.closeAlert(alertOptions.alertId, extAlerts);\n                        }, alertOptions.timeout\n                    );\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(\n                    thisAlerts.map(\n                        function (e) {\n                            return e.id;\n                        }\n                    ).indexOf(id), thisAlerts\n                );\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n\n            function handleServerResponse(httpResponse) {\n                var errors = [];\n                var status = Math.floor(httpResponse.status / 100);\n                var result = httpResponse.data;\n                switch (status) {\n                    // connection refused, server not reachable\n                    case 0:\n                    case -1:\n                        errors.push(\n                            {\n                                key: 'error.server.not.reachable'\n                            }\n                        );\n                        break;\n\n                    case 4:\n                        var errorHeader = httpResponse.headers('X-smartApp-error');\n                        var errorParams = httpResponse.headers('X-smartApp-params');\n                        if (errorHeader) {\n                            errors.push(\n                                {\n                                    message: errorHeader,\n                                    params: angular.fromJson(errorParams),\n                                    timeout: 3000\n                                }\n                            );\n                        } else if (result && result.fieldErrors) {\n                            for (var i = 0; i < result.fieldErrors.length; i++) {\n                                var fieldError = result.fieldErrors[i];\n                                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                                var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                                var key = fieldError.objectName + '.errors.' + ('' + fieldError.message).toLowerCase() + '.' + convertedField;\n                                errors.push(\n                                    {\n                                        message: $translate.instant(key)\n                                    }\n                                );\n                            }\n                        } else if (result && result.message) {\n                            var message = result.message;\n                            if (result.description) {\n                                message = $translate.instant(message) + \" : \" + result.description;\n                            }\n                            errors.push(\n                                {\n                                    message: message,\n                                    params: result,\n                                    timeout: 3000\n                                }\n                            );\n                        } else if (result && result.AuthenticationException) {\n                            errors.push(\n                                {\n                                    message: result.AuthenticationException\n                                }\n                            );\n                        } else {\n                            if (typeof result === 'string' && result.length === 0) {\n                                return;\n                            }\n                            errors.push(\n                                {\n                                    message: angular.fromJson(result),\n                                    timeout: 3000\n                                }\n                            );\n                        }\n                        break;\n                    case 5:\n                        var errorHeader = httpResponse.headers('X-smartApp-error');\n                        var errorParams = httpResponse.headers('X-smartApp-params');\n                        if (errorHeader) {\n                            errors.push(\n                                {\n                                    message: errorHeader,\n                                    params: angular.fromJson(errorParams)\n                                }\n                            );\n                        } else if (result && result.fieldErrors) {\n                            for (var i = 0; i < result.fieldErrors.length; i++) {\n                                var fieldError = result.fieldErrors[i];\n                                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                                var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                                var key = fieldError.objectName + '.errors.' + ('' + fieldError.message).toLowerCase() + '.' + convertedField;\n                                errors.push(\n                                    {\n                                        message: $translate.instant(key)\n                                    }\n                                );\n                            }\n                        } else if (result && result.message) {\n                            errors.push(\n                                {\n                                    message: result.message,\n                                    params: result\n                                }\n                            );\n                        } else {\n                            errors.push(\n                                {\n                                    message: result\n                                }\n                            );\n                        }\n                        break;\n\n                    default:\n                        if (result && result.message) {\n                            errors.push(\n                                {\n                                    message: result.message\n                                }\n                            );\n                        } else {\n                            errors.push(\n                                {\n                                    message: angular.toJson(result, true)\n                                }\n                            );\n                        }\n                }\n\n                return errors;\n            }\n\n        }\n\n        function showAsToast(isToast) {\n            $this.toast = isToast;\n        }\n\n        ToastController.$inject = ['$mdToast'];\n        /* @ngInject */\n        function ToastController($mdToast) {\n            var vm = this;\n\n            vm.close = close;\n\n            ////////////\n\n            function close() {\n                $mdToast.hide();\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .config(AppConfig);\n\n    AppConfig.$inject = [\n        '$mdThemingProvider',\n        'timeAgoSettings',\n        'lazyImgConfigProvider'\n    ];\n    /* @ngInject */\n    function AppConfig($mdThemingProvider, timeAgoSettings, lazyImgConfigProvider) {\n\n        lazyImgConfigProvider.setOptions({onError: onImageError});\n\n        timeAgoSettings.strings['en'] = timeAgoSettings.strings['en_US'];\n\n        // $mdIconProvider.defaultFontSet('fa'); // using awesome fonts\n        $mdThemingProvider.alwaysWatchTheme(true);\n\n        ////////////////////////////////////////////////////\n\n        function onImageError(image) {\n            var element = angular.element(image.$elem);\n            element.attr('src', 'content/images/no_image_icon_en.gif');\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(alertConfig);\n\n    alertConfig.$inject = ['AlertProvider'];\n    /* @ngInject */\n    function alertConfig(AlertProvider) {\n        // set below to true to make alerts look like toast\n        AlertProvider.showAsToast(false);\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(compileConfig);\n\n    compileConfig.$inject = [\n        '$compileProvider',\n        'DEBUG_INFO_ENABLED'\n    ];\n    /* @ngInject */\n    function compileConfig($compileProvider, DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        if (!DEBUG_INFO_ENABLED) {\n            $compileProvider.debugInfoEnabled(false);\n        }\n        /*\n         If you wish to debug an application with this information\n         then you should open up a debug console in the browser\n         then call this method directly in this console:\n\n         angular.reloadWithDebugInfo();\n         */\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(httpConfig);\n\n    httpConfig.$inject = [\n        '$urlRouterProvider',\n        '$httpProvider',\n        'httpRequestInterceptorCacheBusterProvider',\n        '$urlMatcherFactoryProvider'\n    ];\n    /* @ngInject */\n    function httpConfig($urlRouterProvider, $httpProvider,\n                        httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist(\n            [\n                /.*google.*/,\n                /.*View.html/\n            ], false\n        );\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n\n        $urlMatcherFactoryProvider.type(\n            'boolean', {\n                name: 'boolean',\n                decode: decode,\n                encode: encode,\n                equals: equals,\n                is: is,\n                pattern: /bool|true|0|1/\n            }\n        );\n\n        //////////////////////////////////////////\n\n        function decode(val) {\n            return val === true || val === 'true';\n        }\n\n        function encode(val) {\n            return val ? 1 : 0;\n        }\n\n        function equals(a, b) {\n            return this.is(a) && a === b;\n        }\n\n        function is(val) {\n            return [\n                    true,\n                    false,\n                    0,\n                    1\n                ].indexOf(val) >= 0;\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = [\n        '$localStorageProvider',\n        '$sessionStorageProvider'\n    ];\n    /* @ngInject */\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('smart-');\n        $sessionStorageProvider.setKeyPrefix('smart-');\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(translateConfig);\n\n    translateConfig.$inject = [\n        '$translateProvider',\n        'tmhDynamicLocaleProvider'\n    ];\n    /* @ngInject */\n    function translateConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader(\n            '$translatePartialLoader', {\n                urlTemplate: 'i18n/{lang}/{part}.json'\n            }\n        );\n\n        $translateProvider.preferredLanguage('en');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n        $translateProvider.forceAsyncReload(true);\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .run(runApp);\n\n    runApp.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runApp(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'app',\n                config: {\n                    abstract: true,\n                    data: {\n                        authorities: [],\n                        pageTitle: 'app.title'\n                    },\n                    resolve: {\n                        initialization: initialization,\n                        language: language\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('global');\n        return $translate.refresh();\n    }\n\n    initialization.$inject = [\n        '$rootScope',\n        '$state',\n        '$stateParams'\n    ];\n\n    /* @ngInject */\n    function initialization($rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.content')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'content',\n                config: {\n                    url: '/contents/{id}',\n                    parent: 'app',\n                    data: {\n                        pageTitle: 'content.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/contents/ContentView.html',\n                            controller: 'ContentController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language,\n                        id: id\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('content');\n        return $translate.refresh();\n    }\n\n    id.$inject = ['$stateParams'];\n\n    /* @ngInject */\n    function id($stateParams) {\n        return $stateParams.id;\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'course',\n                config: {\n                    url: '/courses',\n                    abstract: true,\n                    parent: 'app',\n                    data: {\n                        pageTitle: 'course.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/courses/CourseView.html',\n                            controller: 'CourseController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('course');\n        return $translate.refresh();\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'course.detail',\n                config: {\n                    url: '/{id}',\n                    data: {\n                        pageTitle: 'course.title.main'\n                    },\n                    views: {\n                        body: {\n                            templateUrl: 'app/courses/detail/CourseDetailView.html',\n                            controller: 'CourseDetailController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        model: model\n                    }\n                }\n            }\n        ];\n    }\n\n    model.$inject = [\n        '$stateParams',\n        'AppConstants',\n        'GoogleAPI'\n    ];\n\n    /* @ngInject */\n    function model($stateParams, AppConstants, GoogleAPI) {\n        if (!$stateParams.id) {\n            return null;\n        }\n\n        //list children\n        //find content\n        return GoogleAPI.items($stateParams.id, [\n            AppConstants.SPREADSHEET_MIME_TYPE,\n            AppConstants.DOCUMENT_MIME_TYPE\n        ]).then(onThen);\n\n        ///////////////////////////////////////////////\n\n        function onThen(t) {\n            // document with the name of the course is the summary\n            //sheet with the name of the course is exam\n            //sheet with the same name as document is the homework of that content.\n            t.files.forEach(onEach);\n\n            return t;\n\n            ///////////////////////////////////////////\n\n            function onEach(file) {\n                file.type = file.mimeType === AppConstants.SPREADSHEET_MIME_TYPE ? 'homework' : 'content';\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'course.list',\n                config: {\n                    url: '',\n                    data: {\n                        authorities: [],\n                        pageTitle: 'course.title.main'\n                    },\n                    views: {\n                        body: {\n                            templateUrl: 'app/courses/list/CourseListView.html',\n                            controller: 'CourseListController',\n                            controllerAs: 'vm'\n                        }\n                    }\n                }\n            }\n        ];\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.home')\n        .run(runHome);\n\n    runHome.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runHome(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'home',\n                config: {\n                    url: '/',\n                    parent: 'app',\n                    data: {\n                        authorities: [],\n                        pageTitle: 'home.title.main',\n                        menu: {\n                            icon: 'home',\n                            text: 'global.menu.home',\n                            groupOrder: -20\n                        }\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/home/HomeView.html',\n                            controller: 'HomeController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('home');\n        return $translate.refresh();\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.layout')\n        .run(runLayout);\n\n    runLayout.$inject = ['routerHelper'];\n    /* @ngInject */\n    function runLayout(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'layout',\n                config: {\n                    url: '/layout',\n                    parent: 'app',\n                    abstract: true,\n                    data: {\n                        authorities: []\n                    }\n                }\n            },\n            {\n                state: 'layout.denied',\n                config: {\n                    url: '/error/denied',\n                    data: {\n                        pageTitle: 'layout.error.denied'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/layouts/error/AccessDeniedView.html'\n                        }\n                    }\n                }\n            },\n            {\n                state: 'layout.error',\n                config: {\n                    url: '/error',\n                    data: {\n                        pageTitle: 'layout.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/layouts/error/ErrorView.html'\n                        }\n                    }\n                }\n            }\n        ];\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .run(runQuestion);\n\n    runQuestion.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runQuestion(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'question.list',\n                config: {\n                    url: '',\n                    data: {\n                        authorities: [],\n                        pageTitle: 'question.title.main'\n                    },\n                    views: {\n                        body: {\n                            templateUrl: 'app/questions/list/QuestionListView.html',\n                            controller: 'QuestionListController',\n                            controllerAs: 'vm'\n                        }\n                    }\n                }\n            }\n        ];\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .run(runQuestion);\n\n    runQuestion.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runQuestion(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'question',\n                config: {\n                    url: '/questions/{sheetId}',\n                    abstract: true,\n                    parent: 'app',\n                    data: {\n                        pageTitle: 'question.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/questions/QuestionView.html',\n                            controller: 'QuestionController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language,\n                        sheetId: sheetId\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('question');\n        return $translate.refresh();\n    }\n\n    sheetId.$inject = ['$stateParams'];\n\n    /* @ngInject */\n    function sheetId($stateParams) {\n        return $stateParams.sheetId;\n    }\n})(angular);\n","/*jshint bitwise: false*/\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('Base64', Base64Service);\n\n    Base64Service.$inject = [];\n    /* @ngInject */\n    function Base64Service() {\n        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n            'abcdefghijklmnopqrstuvwxyz' +\n            '0123456789+/=';\n        this.encode = encode;\n        this.decode = decode;\n\n        ////////////////\n\n        function encode(input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode(input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('CrudUtils', CrudUtilsService);\n\n    CrudUtilsService.$inject = ['DateUtils'];\n    /* @ngInject */\n    function CrudUtilsService(DateUtils) {\n        this.getAll = getAll;\n        this.transformResponse = transformResponse;\n        this.transformRequest = transformRequest;\n\n        /////////////////////////////////////\n\n        function transformResponse(data) {\n            return DateUtils.fromServer(data);\n        }\n\n        function transformRequest(data) {\n            return DateUtils.toServer(data);\n        }\n\n        function getAll() {\n            return angular.extend(\n                {}, {\n                    query: {\n                        method: 'GET',\n                        isArray: true,\n                        transformResponse: DateUtils.fromServer\n                    },\n                    get: {\n                        method: 'GET',\n                        transformResponse: DateUtils.fromServer\n                    },\n                    update: {\n                        method: 'PUT',\n                        transformRequest: DateUtils.toServer,\n                        transformResponse: DateUtils.fromServer\n                    },\n                    save: {\n                        method: 'POST',\n                        transformRequest: DateUtils.toServer,\n                        transformResponse: DateUtils.fromServer\n                    },\n                    delete: {method: 'DELETE'}\n                }\n            );\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.blocks')\n        .service('CustomEditDialog', CustomEditDialogService)\n        .controller('CustomEditDialogController', CustomEditDialogController);\n\n    CustomEditDialogService.$inject = [\n        '$document',\n        '$mdEditDialog'\n    ];\n    /* @ngInject */\n    function CustomEditDialogService($document, $mdEditDialog) {\n        var ESCAPE = 27;\n        var body = angular.element($document.prop('body'));\n\n        this.showDialog = showDialog;\n\n        function showDialog(options) {\n            options = angular.extend({}, options, build('small', options));\n            var promise = $mdEditDialog.show(options);\n            promise.then(onThen);\n\n            ////////////////////////////////////////////////////////\n\n            function onThen(ctrl) {\n                var backdrop = angular.element('body').find('md-backdrop.md-edit-dialog-backdrop');\n                if (options.clickOutsideToClose) {\n                    clickOutsideToClose(backdrop, ctrl.getElement(), ctrl.getInput(), options.afterOutsideToClose);\n                }\n                escToClose(ctrl.getElement(), ctrl.getInput(), options.afterEscToClose);\n\n\n                ////////////////////////////////////////////////////////\n\n                function clickOutsideToClose(backdrop, element, input, afterClose) {\n                    backdrop.on('click', onClick);\n\n                    ///////////////////////////////////////////////\n\n                    function onClick() {\n                        element.remove();\n                        if (angular.isFunction(afterClose)) {\n                            afterClose(input.$modelValue);\n                        }\n                    }\n                }\n\n                function escToClose(element, input, onClose) {\n                    var keyup = onKeyUp;\n\n                    body.on('keyup', keyup);\n\n                    element.on('$destroy', onDestroy);\n\n                    ////////////////////////////////////////////////////\n\n                    function onKeyUp(event) {\n                        if (event.keyCode === ESCAPE) {\n                            element.remove();\n                            if (angular.isFunction(onClose)) {\n                                onClose(input.$modelValue);\n                            }\n                        }\n                    }\n\n                    function onDestroy() {\n                        body.off('keyup', keyup);\n                    }\n                }\n            }\n\n            function build(size, options) {\n                return {\n                    bindToController: true,\n                    controller: 'CustomEditDialogController',\n                    controllerAs: 'vm',\n                    escToClose: true,\n                    clickOutsideToClose: true,\n                    focusOnOpen: true,\n                    locals: {\n                        save: options.save\n                    },\n                    scope: {\n                        cancel: options.cancel || 'global.cancel',\n                        messages: options.messages,\n                        model: options.modelValue,\n                        getType: getType,\n                        ok: options.ok || 'global.save',\n                        placeholder: options.placeholder,\n                        title: options.title,\n                        size: size\n                    },\n                    templateUrl: 'app/blocks/util/services/CustomEditDialogView.html'\n                };\n\n                ////////////////////////////////////////////////\n\n                function getType() {\n                    var type = (\"\" + options.type).toLowerCase();\n                    if (type === 'boolean') {\n                        return 'checkbox';\n                    }\n                    return 'text';\n                }\n            }\n        }\n    }\n\n    CustomEditDialogController.$inject = [\n        '$scope',\n        '$element',\n        '$q',\n        'save'\n    ];\n    /* @ngInject */\n    function CustomEditDialogController($scope, $element, $q, save) {\n        var vm = this;\n\n        vm.dismiss = dismiss;\n        vm.getInput = getInput;\n        vm.getElement = getElement;\n\n        $scope.submit = submit;\n\n        //////////////////////////////////////////////\n\n        function submit() {\n            update().then(vm.dismiss);\n\n            //////////////////////////////////////////\n\n            function update() {\n                if ($scope.editDialog.$invalid) {\n                    return $q.reject();\n                }\n\n                if (angular.isFunction(save)) {\n                    return $q.when(save($scope.editDialog.input));\n                }\n\n                return $q.resolve();\n            }\n        }\n\n        function dismiss() {\n            $element.remove();\n        }\n\n        function getElement() {\n            return $element;\n        }\n\n        function getInput() {\n            return $scope.editDialog.input;\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('CustomTableUtil', CustomTableUtilService);\n\n    CustomTableUtilService.$inject = [];\n    /* @ngInject */\n    function CustomTableUtilService() {\n        this.convertOrderToColumnAndOrder = convertOrderToColumnAndOrder;\n        this.getValue = getValue;\n        this.getFieldValue = getFieldValue;\n        this.setValue = setValue;\n\n        ////////////////\n\n        function convertOrderToColumnAndOrder(order) {\n            if (!order) {\n                return order;\n            }\n            var sortOrder = order.charAt(0) === '-' ? 'desc' : 'asc';\n            var sortColumn = order.charAt(0) === '-' ? order.substr(1) : order;\n            return {\n                column: sortColumn,\n                order: sortOrder\n            };\n        }\n\n        function setValue(model, fieldName, value) {\n            fieldName = fieldName.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n            fieldName = fieldName.replace(/^\\./, '');           // strip a leading dot\n            var a = fieldName.split('.');\n            for (var i = 0, n = a.length; i < n; ++i) {\n                var k = a[i];\n                if (i === n - 1) {\n                    model[k] = value;\n                    return true;\n                }\n                if (!model) {\n                    model = {};\n                }\n                if (k in model) {\n                    model = model[k];\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        }\n\n        function getValue(model, fieldName) {\n            //field name is not set then i can't get value\n            if (!fieldName) {\n                return null;\n            }\n            if (!fieldName) {\n                return null;\n            }\n            fieldName = fieldName.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n            fieldName = fieldName.replace(/^\\./, '');           // strip a leading dot\n            var a = fieldName.split('.');\n            for (var i = 0, n = a.length; i < n; ++i) {\n                if (!model) {\n                    return null;\n                }\n                var k = a[i];\n                if (k in model) {\n                    model = model[k];\n                } else {\n                    return;\n                }\n            }\n            return model;\n        }\n\n        function getFieldValue(model, header) {\n            if (angular.isObject(header) && angular.isFunction(header.get)) {\n                return header.get(model);\n            }\n\n            return getValue(model, header.field);\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('DataUtils', DataUtilsService);\n\n    DataUtilsService.$inject = ['$window'];\n    /* @ngInject */\n    function DataUtilsService($window) {\n        this.abbreviate = abbreviate;\n        this.byteSize = byteSize;\n        this.openFile = openFile;\n        this.toBase64 = toBase64;\n\n        /////////////////////////////////////////////\n\n        function abbreviate(text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize(base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile(type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64(file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = onLoad;\n\n            //////////////////////////////////////////////////\n\n            function onLoad(e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n *\n * Convert Date Fields into Date Objects\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('DateUtils', DateUtilsService);\n\n    DateUtilsService.$inject = ['$filter'];\n    /* @ngInject */\n    function DateUtilsService($filter) {\n        this.convertLocalDateToServer = convertLocalDateToServer;\n        this.convertLocalDateFromServer = convertLocalDateFromServer;\n        this.convertDateTimeFromServer = convertDateTimeFromServer;\n        this.formatWithoutSeconds = formatWithoutSeconds;\n        this.formatShort = formatShort;\n        this.format = format;\n        this.fromServer = fromServer;\n        this.toServer = toServer;\n        this.pureData = pureData;\n        this.getFormattedDate = getFormattedDate;\n        // common date format for all date input fields\n        this.dateformat = format;\n\n        ///////////////////////////////////////////////////\n\n        function convertLocalDateToServer(date) {\n            if (date) {\n                return $filter('date')(date, serverFormat(), 'UTC');\n            } else {\n                return null;\n            }\n        }\n\n        function getFormattedDate(date, dateFormat) {\n            if (date) {\n                return angular.isUndefined(dateFormat) ? $filter('date')(date, format()) : $filter('date')(date, dateFormat);\n            }\n            return null;\n        }\n\n        function convertLocalDateFromServer(date, format) {\n            if (date) {\n                var dateLongValue = Date.parse(date);\n                return getFormattedDate(dateLongValue, format);\n            }\n            return null;\n        }\n\n        function convertStringDateToServer(date) {\n            if (date) {\n                var dateLongValue = Date.parse(date);\n                return getFormattedDate(dateLongValue, serverFormat());\n            }\n            return null;\n        }\n\n        function convertDateTimeFromServer(date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function changeDate(item, fields) {\n            if (item.modifiedAt) {\n                item.untouchedModifiedAt = item.modifiedAt;\n                item.modifiedAt = convertLocalDateFromServer(item.modifiedAt);\n            }\n\n            if (item.createdAt) {\n                item.untouchedCreatedAt = item.createdAt;\n                item.createdAt = convertLocalDateFromServer(item.createdAt);\n            }\n\n            if (angular.isArray(fields)) {\n                angular.forEach(fields, iterateField);\n            }\n\n            //////////////////////////////////////////////////\n\n            function iterateField(row) {\n                if (item[row]) {\n                    item[row + 'Touched'] = convertLocalDateFromServer(item[row]);\n                }\n            }\n        }\n\n        function changeToServerDate(item, fields) {\n            if (item.modifiedAt) {\n                if (angular.isString(item.modifiedAt)) {\n                    item.modifiedAt = convertStringDateToServer(item.modifiedAt);\n                } else {\n                    item.modifiedAt = convertLocalDateToServer(item.modifiedAt);\n                }\n            }\n\n            if (item.createdAt) {\n                if (angular.isString(item.createdAt)) {\n                    item.createdAt = convertStringDateToServer(item.createdAt);\n                } else {\n                    item.createdAt = convertLocalDateToServer(item.createdAt);\n                }\n            }\n\n            if (angular.isArray(fields)) {\n                angular.forEach(fields, iterateField);\n            }\n\n            //////////////////////////////////////////////////\n\n            function iterateField(row) {\n                var value = item[row];\n                if (value) {\n                    if (angular.isString(value)) {\n                        value = convertStringDateToServer(value);\n                    } else {\n                        value = convertLocalDateToServer(value);\n                    }\n\n                    item[row] = value;\n                }\n            }\n        }\n\n        function pureData(data) {\n            return angular.fromJson(angular.toJson(data));\n        }\n\n        function fromServer(data, fields) {\n            if (!data) {\n                return {};\n            }\n\n            data = angular.fromJson(data);\n\n            return searchForAllDates(data, false, fields);\n        }\n\n        function toServer(data, fields) {\n            if (!data) {\n                return '';\n            }\n            data = searchForAllDates(data, true, fields);\n            return angular.toJson(data);\n        }\n\n        function removeAngularObjects(data) {\n            return angular.fromJson(angular.toJson(data));\n        }\n\n        function searchForAllDates(data, toServer, fields) {\n            if (angular.isObject(data)) {\n                if (toServer) {\n                    data=removeAngularObjects(data);\n                    changeToServerDate(data, fields);\n                } else {\n                    changeDate(data, fields);\n                }\n                angular.forEach(data, onIterate);\n            }\n            return data;\n\n            /////////////////////////////////////////\n\n            function onIterate(item) {\n                searchForAllDates(item, toServer, fields);\n            }\n        }\n\n        function formatWithoutSeconds() {\n            return 'EEEE, dd LLLL yyyy, HH:mm';\n        }\n\n        function formatShort() {\n            return 'yyyy.MM.dd HH:mm';\n        }\n\n        function format() {\n            return 'EEEE, dd LLLL yyyy, HH:mm:ss';\n        }\n\n        function serverFormat() {\n            return \"yyyy-MM-dd'T'HH:mm:ss.sss'Z'\"\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('HtmlTagUtil', HtmlTagUtilService);\n\n    HtmlTagUtilService.$inject = [];\n    /* @ngInject */\n    function HtmlTagUtilService() {\n        this.escapeTags = escapeTags;\n\n        ////////////////\n\n        function escapeTags(stringWithTags) {\n            return stringWithTags\n                .replace(/<\\/?(b|i|em|strong|span|u|strikethrough|a|img|small|sub|sup|label)( [^>*?])?>/gi, '') // remove inline tags without adding spaces\n                .replace(/(<[^>]*?>\\s*<[^>]*?>)/ig, ' ') // replace adjacent tags with possible space between with a space\n                .replace(/(<[^>]*?>)/ig, '') // remove any singular tags\n                .replace(/\\s+/ig, ' ');// condense spacing\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('ResponseUtil', ResponseUtilService);\n\n    ResponseUtilService.$inject = [];\n    /* @ngInject */\n    function ResponseUtilService() {\n        this.parseLink = parseLink;\n        this.buildSort = buildSort;\n\n        ////////////////\n\n        function parseLink(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, partsFunc);\n\n            return links;\n\n            function partsFunc(p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function ($0, $1, $2, $3) {\n                        queryString[$1] = $3;\n                    }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            }\n        }\n\n        function buildSort(orderBy) {\n            if (orderBy && angular.isString(orderBy)) {\n                var predicate = orderBy;\n                var reverse = false;\n                if (orderBy.indexOf('-') !== -1) {\n                    predicate = orderBy.split('-')[1];\n                    reverse = true;\n                }\n\n                return [predicate + ',' + (reverse ? 'asc' : 'desc')];\n            }\n\n            return [];\n        }\n\n    }\n\n})(angular);\n","(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('RichTextEditDialog', RichTextEditDialogService)\n        .controller('RichTextEditDialogController', RichTextEditDialogController);\n\n    RichTextEditDialogService.$inject = ['$rootScope', '$mdDialog'];\n    /* @ngInject */\n    function RichTextEditDialogService($rootScope, $mdDialog) {\n        this.showDialog = showDialog;\n\n        ////////////////\n\n        function showDialog(options) {\n            options = angular.extend({}, options, build(options));\n            var promise = $mdDialog.show(options);\n            promise.finally(function(text) {\n                //if anything to make after promise is resolved\n\n            });\n        }\n\n        function build(options) {\n            var textEditDialogScope = $rootScope.$new(true);\n            textEditDialogScope.model = options.modelValue;\n            textEditDialogScope.title = options.title;\n            return {\n                bindToController: true,\n                controller: 'RichTextEditDialogController',\n                controllerAs: 'vm',\n                escapeToClose: false,\n                clickOutsideToClose: true,\n                focusOnOpen: true,\n                templateUrl: 'app/blocks/util/services/RichTextEditDialogView.html',\n                locals: {\n                    onSave: options.onSave\n                },\n                scope: textEditDialogScope\n            }\n        }\n    }\n\n    RichTextEditDialogController.$inject = ['$scope', '$mdDialog', '$q', 'onSave'];\n    /* @ngInject */\n    function RichTextEditDialogController($scope, $mdDialog, $q, onSave) {\n        var vm = this;\n\n        vm.model = $scope.model;\n        vm.title = $scope.title;\n        vm.dismiss = dismiss;\n        vm.save = save;\n        vm.resolvedWithSave = false;\n\n        activate();\n\n        function activate() {\n            //on any close try to save\n            $scope.$on('$destroy', function() {\n                if(angular.isFunction(onSave) && !vm.resolvedWithSave) {\n                    onSave(vm.model);\n                }\n            });\n        }\n\n        function update() {\n            if(angular.isFunction(onSave)) {\n                vm.resolvedWithSave = true;\n                return $q.when(onSave(vm.model));\n            }\n            return $q.resolve();\n        }\n\n        function dismiss() {\n            $mdDialog.hide();\n        }\n\n        function save() {\n            update().then(function () {\n                vm.dismiss();\n            });\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('SidenavUtil', SidenavUtilService);\n\n    SidenavUtilService.$inject = ['$rootScope', '$q', '$mdSidenav', '$mdCompiler'];\n    /* @ngInject */\n    function SidenavUtilService($rootScope, $q, $mdSidenav, $mdCompiler) {\n        var deferred = null;\n        this.show = show;\n        this.cancel = cancel;\n        this.hide = hide;\n\n        ////////////////\n\n        function show(componentId, options) {\n            if ($mdSidenav(componentId).isOpen()) {\n                return deferred.promise;\n            }\n            deferred = $q.defer();\n\n            deferred.componentId = componentId;\n            $mdCompiler.compile(options).then(function (compiledData) {\n                var sideNav = angular.element(document.getElementById(componentId));\n                sideNav.html(compiledData.link($rootScope.$new(true)));\n                //sideNav.css(\"z-index\",1000);\n                $mdSidenav(componentId).open();\n            });\n\n            return deferred.promise;\n        }\n\n        function hide(response) {\n            if (deferred) {\n                deferred.resolve(response);\n            }\n\n            $mdSidenav(deferred.componentId).close();\n        }\n\n        function cancel(error) {\n            if (deferred) {\n                deferred.reject(error);\n            }\n\n            $mdSidenav(deferred.componentId).close();\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('StorageUtil', StorageUtilService);\n\n    StorageUtilService.$inject = ['$window'];\n    /* @ngInject */\n    function StorageUtilService($window) {\n        this.get = get;\n        this.save = save;\n        this.remove = remove;\n        this.clearAll = clearAll;\n\n        ////////////////\n\n        function get(key) {\n            return JSON.parse($window.localStorage.getItem(key));\n        }\n\n        function save(key, data) {\n            $window.localStorage.setItem(key, JSON.stringify(data));\n        }\n\n        function remove(key) {\n            $window.localStorage.removeItem(key);\n        }\n\n        function clearAll() {\n            $window.localStorage.clear();\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('StringUtil', StringUtilService);\n\n    StringUtilService.$inject = [];\n    /* @ngInject */\n    function StringUtilService() {\n        this.limitTo = limitTo;\n        this.normalize = normalize;\n\n        ////////////////////////////////////////////////////\n\n        function limitTo(string, size) {\n            if (!string) {\n                return string;\n            }\n            if (string.length <= size) {\n                return string;\n            }\n            var dots = \"...\";\n            string = string.substr(0, size);\n            var atWordEnd = string[size - dots.length] === ' ';\n            if (atWordEnd) {\n                return string.substr(0, size - dots.length) + dots;\n            }\n            return string.substr(0, string.lastIndexOf(\" \") + 1) + dots;\n        }\n\n        function normalize(value) {\n            if (!angular.isString(value)) {\n                return value;\n            }\n            var charMap = {\n                'À': 'A',\n                'Á': 'A',\n                'Â': 'A',\n                'Ã': 'A',\n                'Ä': 'A',\n                'Å': 'A',\n                'Æ': 'AE',\n                'È': 'E',\n                'É': 'E',\n                'Ê': 'E',\n                'Ë': 'E',\n                'Ì': 'I',\n                'Í': 'I',\n                'Î': 'I',\n                'Ï': 'I',\n                'Ð': 'D',\n                'Ñ': 'N',\n                'Ò': 'O',\n                'Ô': 'O',\n                'Õ': 'O',\n                'Ő': 'O',\n                'Ø': 'O',\n                'Ù': 'U',\n                'Ú': 'U',\n                'Û': 'U',\n                'Ű': 'U',\n                'Ý': 'Y',\n                'Þ': 'TH',\n                'ß': 'ss',\n                'à': 'a',\n                'á': 'a',\n                'â': 'a',\n                'ã': 'a',\n                'ä': 'a',\n                'å': 'a',\n                'æ': 'ae',\n                'è': 'e',\n                'é': 'e',\n                'ê': 'e',\n                'ë': 'e',\n                'ì': 'i',\n                'í': 'i',\n                'î': 'i',\n                'ï': 'i',\n                'ð': 'd',\n                'ñ': 'n',\n                'ò': 'o',\n                'ô': 'o',\n                'õ': 'o',\n                'ő': 'o',\n                'ø': 'o',\n                'ù': 'u',\n                'ú': 'u',\n                'û': 'u',\n                'ű': 'u',\n                'ý': 'y',\n                'þ': 'th',\n                'ÿ': 'y',\n\n                '©': '(c)',\n\n                'Α': 'A',\n                'Β': 'B',\n                'Γ': 'G',\n                'Δ': 'D',\n                'Ε': 'E',\n                'Ζ': 'Z',\n                'Η': 'H',\n                'Θ': '8',\n                'Ι': 'I',\n                'Κ': 'K',\n                'Λ': 'L',\n                'Μ': 'M',\n                'Ν': 'N',\n                'Ξ': '3',\n                'Ο': 'O',\n                'Π': 'P',\n                'Ρ': 'R',\n                'Σ': 'S',\n                'Τ': 'T',\n                'Υ': 'Y',\n                'Φ': 'F',\n                'Χ': 'X',\n                'Ψ': 'PS',\n                'Ω': 'W',\n                'Ά': 'A',\n                'Έ': 'E',\n                'Ί': 'I',\n                'Ό': 'O',\n                'Ύ': 'Y',\n                'Ή': 'H',\n                'Ώ': 'W',\n                'Ϊ': 'I',\n                'Ϋ': 'Y',\n                'α': 'a',\n                'β': 'b',\n                'γ': 'g',\n                'δ': 'd',\n                'ε': 'e',\n                'ζ': 'z',\n                'η': 'h',\n                'θ': '8',\n                'ι': 'i',\n                'κ': 'k',\n                'λ': 'l',\n                'μ': 'm',\n                'ν': 'n',\n                'ξ': '3',\n                'ο': 'o',\n                'π': 'p',\n                'ρ': 'r',\n                'σ': 's',\n                'τ': 't',\n                'υ': 'y',\n                'φ': 'f',\n                'χ': 'x',\n                'ψ': 'ps',\n                'ω': 'w',\n                'ά': 'a',\n                'έ': 'e',\n                'ί': 'i',\n                'ό': 'o',\n                'ύ': 'y',\n                'ή': 'h',\n                'ώ': 'w',\n                'ς': 's',\n                'ϊ': 'i',\n                'ΰ': 'y',\n                'ϋ': 'y',\n                'ΐ': 'i',\n\n                'Ş': 'S',\n                'İ': 'I',\n                'Ç': 'C',\n                'Ü': 'U',\n                'Ö': 'O',\n                'Ğ': 'G',\n                'ş': 's',\n                'ı': 'i',\n                'ç': 'c',\n                'ü': 'u',\n                'ö': 'o',\n                'ğ': 'g',\n\n                'А': 'A',\n                'Б': 'B',\n                'В': 'V',\n                'Г': 'G',\n                'Д': 'D',\n                'Е': 'E',\n                'Ё': 'Yo',\n                'Ж': 'Zh',\n                'З': 'Z',\n                'И': 'I',\n                'Й': 'J',\n                'К': 'K',\n                'Л': 'L',\n                'М': 'M',\n                'Н': 'N',\n                'О': 'O',\n                'П': 'P',\n                'Р': 'R',\n                'С': 'S',\n                'Т': 'T',\n                'У': 'U',\n                'Ф': 'F',\n                'Х': 'H',\n                'Ц': 'C',\n                'Ч': 'Ch',\n                'Ш': 'Sh',\n                'Щ': 'Sh',\n                'Ъ': '',\n                'Ы': 'Y',\n                'Ь': '',\n                'Э': 'E',\n                'Ю': 'Yu',\n                'Я': 'Ya',\n                'а': 'a',\n                'б': 'b',\n                'в': 'v',\n                'г': 'g',\n                'д': 'd',\n                'е': 'e',\n                'ё': 'yo',\n                'ж': 'zh',\n                'з': 'z',\n                'и': 'i',\n                'й': 'j',\n                'к': 'k',\n                'л': 'l',\n                'м': 'm',\n                'н': 'n',\n                'о': 'o',\n                'п': 'p',\n                'р': 'r',\n                'с': 's',\n                'т': 't',\n                'у': 'u',\n                'ф': 'f',\n                'х': 'h',\n                'ц': 'c',\n                'ч': 'ch',\n                'ш': 'sh',\n                'щ': 'sh',\n                'ъ': '',\n                'ы': 'y',\n                'ь': '',\n                'э': 'e',\n                'ю': 'yu',\n                'я': 'ya',\n\n                'Є': 'Ye',\n                'І': 'I',\n                'Ї': 'Yi',\n                'Ґ': 'G',\n                'є': 'ye',\n                'і': 'i',\n                'ї': 'yi',\n                'ґ': 'g',\n\n                'Ď': 'D',\n                'Ě': 'E',\n                'Ň': 'N',\n                'Ř': 'R',\n                'Ť': 'T',\n                'Ů': 'U',\n                'ď': 'd',\n                'ě': 'e',\n                'ň': 'n',\n                'ř': 'r',\n                'ť': 't',\n                'ů': 'u',\n\n                'Ą': 'A',\n                'Ć': 'C',\n                'Ę': 'e',\n                'Ł': 'L',\n                'Ń': 'N',\n                'Ó': 'o',\n                'Ś': 'S',\n                'Ź': 'Z',\n                'Ż': 'Z',\n                'ą': 'a',\n                'ć': 'c',\n                'ę': 'e',\n                'ł': 'l',\n                'ń': 'n',\n                'ó': 'o',\n                'ś': 's',\n                'ź': 'z',\n                'ż': 'z',\n\n                'Ā': 'A',\n                'Č': 'C',\n                'Ē': 'E',\n                'Ģ': 'G',\n                'Ī': 'i',\n                'Ķ': 'k',\n                'Ļ': 'L',\n                'Ņ': 'N',\n                'Š': 'S',\n                'Ū': 'u',\n                'Ž': 'Z',\n                'ā': 'a',\n                'č': 'c',\n                'ē': 'e',\n                'ģ': 'g',\n                'ī': 'i',\n                'ķ': 'k',\n                'ļ': 'l',\n                'ņ': 'n',\n                'š': 's',\n                'ū': 'u',\n                'ž': 'z'\n            };\n\n            angular.forEach(charMap, iterate);\n\n            value = value.replace(/[^a-z0-9]+/ig, '-');\n            value = value.replace(/[-]{2,}/g, '-');\n            value = value.replace(/(^-|-$)/g, '');\n\n            return value.toLowerCase();\n\n            ///////////////////////////////////////////////////\n\n            function iterate(item, key) {\n                value = value.replace(new RegExp(key, 'g'), item);\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('translationStorageProvider', translationStorageProviderFactory);\n\n    translationStorageProviderFactory.$inject = [\n        '$cookies',\n        '$log',\n        'LANGUAGES'\n    ];\n    /* @ngInject */\n    function translationStorageProviderFactory($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        ////////////////\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language' + ' \"en\"');\n                $cookies.putObject(name, 'en');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('Language', LanguageFactory);\n\n    LanguageFactory.$inject = [\n        '$q',\n        '$translate',\n        'LANGUAGES'\n    ];\n    /* @ngInject */\n    function LanguageFactory($q, $translate, LANGUAGES) {\n        return {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        ////////////////////////\n\n        function getAll() {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent() {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .factory('GoogleAPI', GoogleAPIFactory);\n\n    GoogleAPIFactory.$inject = [\n        '$http',\n        'AppConstants'\n    ];\n\n    /* @ngInject */\n    function GoogleAPIFactory($http, AppConstants) {\n        return {\n            items: listItems,\n            questions: getQuestions\n        };\n\n        ///////////////////////////////////////////////////\n\n        function getQuestions(sheetId) {\n            return $http({\n                method: 'GET',\n                url: 'https://sheets.googleapis.com/v4/spreadsheets/' + sheetId + '/values/A:B?key=' + AppConstants.API_KEY\n            }).then(successCallback, errorCallback);\n\n            ////////////////////////////////////////\n\n            function errorCallback(response) {\n                // called asynchronously if an error occurs\n                // or server returns response with an error status.\n                console.log('error in getting questions', response);\n                return response;\n            }\n\n            function successCallback(response) {\n                // this callback will be called asynchronously\n                // when the response is available\n                console.log('success in getting questions');\n\n                return response.data.values.map(onMap);\n\n                //////////////////////////////////////////////////\n\n                function onMap(qArray) {\n                    var questionTitle = qArray[0];\n                    var optionsStr = qArray[1];\n                    var questionType = 'checkbox';\n                    var numOfAnswers = (optionsStr.match(/[A]/g) || []).length;\n\n                    if (numOfAnswers === 0) {\n                        questionType = 'text'\n                    } else if (numOfAnswers === 1) {\n                        questionType = 'radio'\n                    } else {\n                        questionType = 'checkbox'\n                    }\n\n                    var answers = optionsStr.split('\\n').map(onSplitMap);\n\n                    return {\n                        type: questionType,\n                        name: questionTitle,\n                        answers: answers\n                    };\n\n                    ///////////////////////////////////////////\n\n                    function onSplitMap(option) {\n                        var isAnswer = false;\n                        if (option.startsWith('[A]')) {\n                            isAnswer = true;\n                        }\n\n                        var answer = option.replace('[A]', '');\n                        return {\n                            name: answer,\n                            answer: isAnswer\n                        }\n                    }\n                }\n            }\n        }\n\n        function listItems(rootId, mimeTypes) {\n            var q = '\\'' + rootId + '\\' in parents';\n            if (mimeTypes !== undefined) {\n                var mimeTypeQueries = mimeTypes.map(onMap).join(' or ');\n                q += ' and (' + mimeTypeQueries + ')';\n            }\n\n            return $http({\n                method: 'GET',\n                url: 'https://www.googleapis.com/drive/v3/files?q=' + q + '&key=' + AppConstants.API_KEY\n            }).then(successCallback, errorCallback);\n\n            /////////////////////////////////////////////\n\n            function onMap(mimeType) {\n                return ' mimeType = \\'' + mimeType + '\\'';\n            }\n\n            function successCallback(response) {\n                // this callback will be called asynchronously\n                // when the response is available\n                console.log('success in getting courses');\n\n                return response.data;\n            }\n\n            function errorCallback(response) {\n                // called asynchronously if an error occurs\n                // or server returns response with an error status.\n                console.log('error in getting courses', response);\n                return response;\n            }\n        }\n\n    }\n\n})(angular);\n\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        ////////////////////\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'fa': 'پارسی',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('buttons', ButtonsFilter);\n\n    ButtonsFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function ButtonsFilter($filter) {\n        return buttons;\n\n        ////////////////\n\n        function buttons(input, params) {\n            var format = $filter('format');\n            var output = '';\n            var container = '<div flex layout-align=\"start center\" layout=\"row\">{0}</div>';\n            var button = '<md-button ng-attr-ng-click=\"{0}\" class=\"no-margin {1}\"><span translate>{2}</span></md-button>';\n\n            angular.forEach(\n                params, function (item) {\n                    var cls = (item.value === input) ? item.activeCls : '';// check if it's selected or not\n                    cls += ' ' + (item.class ? item.class : '');\n                    output += format(button, item.click ? item.click.replace(/\"/g, '\\'') : '', cls.replace(/\"/g, '\\''), item.text);\n                }\n            );\n\n            return format(container, output);\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('icon', IconFilter);\n\n    IconFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function IconFilter($filter) {\n        return icon;\n\n        ///////////////////////////////////////////////////\n\n        function icon(input, params) {\n            var format = $filter('format');\n            var output = '';\n            var icon = '<md-icon>{0}</md-icon>';\n\n            if (angular.isArray(input)) {\n                angular.forEach(input, forEach);\n            } else {\n                output = format(icon, (params[input] ? params[input] : params['default']));\n            }\n\n            return output;\n\n            ////////////////////////////////////////////////////////////////\n\n            function forEach(item) {\n                output += format(icon, (params[item] ? params[item] : params['default']));\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('localeOrderBy', LocaleOrderBy);\n\n    LocaleOrderBy.$inject = [];\n    /* @ngInject */\n    function LocaleOrderBy() {\n        return compare;\n\n        ///////////////////////////////////////////\n\n        function compare(items, field) {\n            var filtered = [];\n\n            angular.forEach(items, onPush);\n\n            filtered.sort(onSort);\n\n            return filtered;\n\n            function onSort(a, b) {\n                var aa = a[field].toLocaleLowerCase();\n                var bb = b[field].toLocaleLowerCase();\n                return aa.localeCompare(bb)\n            }\n\n            function onPush(item) {\n                filtered.push(item);\n            }\n\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('object', ObjectFilter)\n        .filter('showObject', ShowObjectFilter);\n\n    function ObjectFilter() {\n        return objectFilter;\n\n        ////////////////\n\n        function objectFilter(input, path, asArray) {\n            if (angular.isString(path)) {\n                path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n                path = path.replace(/^\\./, '');           // strip a leading dot\n                var pathArr = path.split('.');\n                var value = angular.extend({}, input);\n                angular.forEach(\n                    pathArr, function (item) {\n                        try {\n\n                            var val = asArray ? [] : '';\n                            if (angular.isArray(value)) {\n                                angular.forEach(\n                                    value, function (current, index) {\n                                        if (asArray) {\n                                            val.push(current[item]);\n                                        } else {\n                                            val += current[item] + (index < value.length - 1 ? ',' : '');\n                                        }\n                                    }\n                                );\n                            } else {\n                                var current = value[item];\n                                if (asArray && !angular.isArray(current)) {\n                                    val = [current];\n                                } else {\n                                    val = current;\n                                }\n                            }\n\n                            value = val;\n                        } catch (e) {\n                            if (asArray) {\n                                value = [];\n                            } else {\n                                value = '';\n                            }\n                        }\n                    }\n                );\n            }\n            return value;\n        }\n    }\n\n    ShowObjectFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function ShowObjectFilter($filter) {\n        return showObject;\n\n        ////////////////\n\n        function showObject(input, layout) {\n            var format = $filter('format');\n            var output = '';\n            var container = '<div class=\"configuration\" layout=\"{1}\" layout-align=\"center start\">{0}</div>';\n            var data = '<div class=\"md-list-item-text\" layout=\"row\" layout-align=\"{2}\"><strong>{0}:</strong><div layout-margin>{1}</div></div>';\n\n            if (angular.isObject(input)) {\n                angular.forEach(\n                    input, function (value, key) {\n                        if (angular.isObject(value)) {\n                            output += format(data, key, showObject(angular.extend({}, value, 'start start'), 'column'));\n                        } else {\n                            output += format(data, key, value, 'center center');\n                        }\n                    }\n                );\n            }\n\n            return format(container, output, (layout ? layout : 'column'));\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('format', FormatFilter)\n        .filter('capitalize', CapitalizeFilter)\n        .filter('characters', CharactersFilter)\n        .filter('words', WordsFilter)\n        .filter('split', SplitFilter)\n        .filter('yesNo', YesNoFilter)\n        .filter('join', JoinFilter)\n        .filter('normalizeSlugUrl', NormalizeSlugUrlFilter)\n        .filter('prettify', PrettifyFilter);\n\n    FormatFilter.$inject = [];\n    /* @ngInject */\n    function FormatFilter() {\n        return formatFilter;\n\n        ////////////////\n\n        function formatFilter(input) {\n            // The string containing the format items (e.g. \"{0}\")\n            // will and always has to be the first argument.\n            var theString = input;\n\n            // start with the second argument (i = 1)\n            for (var i = 1; i < arguments.length; i++) {\n                // \"gm\" = RegEx options for Global search (more than one instance)\n                // and for Multiline search\n                var regEx = new RegExp('\\\\{' + (i - 1) + '\\\\}', 'gm');\n                theString = theString.replace(regEx, arguments[i]);\n            }\n\n            return theString;\n        }\n    }\n\n    CapitalizeFilter.$inject = [];\n    /* @ngInject */\n    function CapitalizeFilter() {\n        return capitalizeFilter;\n\n        ////////////////\n\n        function capitalizeFilter(input) {\n            return (input + '').replace(\n                /^([a-z])|\\s+([a-z])/g, function ($1) {\n                    return $1.toUpperCase();\n                }\n            );\n        }\n    }\n\n    CharactersFilter.$inject = [];\n    /* @ngInject */\n    function CharactersFilter() {\n        return charactersFilter;\n\n        ////////////////////\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length - 1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n\n    WordsFilter.$inject = [];\n    /* @ngInject */\n    function WordsFilter() {\n        return wordsFilter;\n\n        /////////////////////\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n\n            return input;\n        }\n    }\n\n    SplitFilter.$inject = [];\n    /* @ngInject */\n    function SplitFilter() {\n        return splitFilter;\n\n        ////////////////\n\n        function splitFilter(input, separator, splitIndex) {\n            var split = input.split(separator);\n            if (!splitIndex) {\n                return split;\n            }\n            return split.length <= splitIndex ? '' : split[splitIndex];\n        }\n    }\n\n    YesNoFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function YesNoFilter($filter) {\n        return yesNoFilter;\n\n        ////////////////\n\n        function yesNoFilter(input, trueResponse, falseResponse) {\n            if (input) {\n                return $filter(\"translate\")(trueResponse || \"global.form.yes\")\n            } else {\n                return $filter(\"translate\")(falseResponse || \"global.form.no\")\n            }\n        }\n    }\n\n    JoinFilter.$inject = [];\n    /* @ngInject */\n    function JoinFilter() {\n        return joinFilter;\n\n        ////////////////\n\n        function joinFilter(input, separator) {\n            if (angular.isArray(input)) {\n                return input.join(separator);\n            }\n\n            return '';\n        }\n    }\n\n    NormalizeSlugUrlFilter.$inject = ['StringUtil'];\n    /* @ngInject */\n    function NormalizeSlugUrlFilter(StringUtil) {\n        return StringUtil.normalizeSlugUrl;\n    }\n\n    PrettifyFilter.$inject = [];\n    /* @ngInject */\n    function PrettifyFilter() {\n        return syntaxHighlight;\n\n        //////////////////////////////////////////////\n\n        function syntaxHighlight(json) {\n            if (!json) {\n                return '';\n            }\n            if (!angular.isString(json)) {\n                json = angular.toJson(json, true);\n            }\n            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?),?/g, onMatch);\n\n            /////////////////////////////////////////////////\n\n            function onMatch(match) {\n                var cls = 'number';\n                if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                        cls = 'key';\n                    } else {\n                        cls = 'string';\n                    }\n                } else if (/true|false/.test(match)) {\n                    cls = 'boolean';\n                } else if (/null/.test(match)) {\n                    cls = 'null';\n                }\n\n                return '<span class=\"' + cls + '\">' + match + '</span>';\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('hasAnyAuthority', hasAnyAuthority)\n        .directive('hasAuthority', hasAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n    /* @ngInject */\n    function hasAnyAuthority(Principal) {\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n        function link(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('ng-hide');\n                },\n                setHidden = function () {\n                    element.addClass('ng-hide');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(\n                    function () {\n                        return Principal.isAuthenticated();\n                    }, function () {\n                        defineVisibility(true);\n                    }\n                );\n            }\n        }\n    }\n\n    hasAuthority.$inject = ['Principal'];\n    /* @ngInject */\n    function hasAuthority(Principal) {\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n        function link(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('ng-hide');\n                },\n                setHidden = function () {\n                    element.addClass('ng-hide');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(\n                            function (result) {\n                                if (result) {\n                                    setVisible();\n                                } else {\n                                    setHidden();\n                                }\n                            }\n                        );\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(\n                    function () {\n                        return Principal.isAuthenticated();\n                    }, function () {\n                        defineVisibility(true);\n                    }\n                );\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('autocompleteInfiniteScroll', AutocompleteInfiniteScrollDirective);\n\n    AutocompleteInfiniteScrollDirective.$inject = ['$interval'];\n    /* @ngInject */\n    function AutocompleteInfiniteScrollDirective($interval) {\n        return {\n            link: link,\n            restrict: 'A'\n        };\n\n        function link(scope, el, attrs) {\n            var now = new Date().getTime();\n\n            var interval = $interval(checkTillExists, 100);\n\n            ///////////////////////////////////////\n\n            function checkTillExists() {\n                var rep = angular.element(document.getElementsByClassName(\"md-virtual-repeat-scroller\"));\n\n                if (rep === null || rep.length === 0) {\n                    return;\n                }\n\n                $interval.cancel(interval);\n\n                rep.on('scroll', onScroll);\n\n                scope.$on('$destroy', removeEvent);\n\n                //////////////////////////////////////\n\n                function removeEvent() {\n                    rep.off('scroll', onScroll);\n                }\n\n                function onScroll(evt) {\n                    if (rep[0].scrollTop + rep[0].offsetHeight >= rep[0].scrollHeight) {\n                        var time = new Date().getTime();\n                        if (time - now > 100) {\n                            now = time;\n                            scope.$apply(apply);\n                        }\n                    }\n\n                    /////////////////////////////////\n\n                    function apply() {\n                        scope.$eval(attrs.autocompleteInfiniteScroll);\n                    }\n                }\n            }\n        }\n    }\n\n})(angular);\n\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('compile', compileDirective);\n\n    compileDirective.$inject = [];\n    /* @ngInject */\n    function compileDirective() {\n        return link;\n\n        ///////////\n\n        function link(scope, element, attrs) {\n            try {\n                element.html(attrs.compile);\n            } catch (e) {\n                console.log(e);\n                element.html('Error Occurred');\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('mdCustomTable', mdCustomTable);\n\n    mdCustomTable.$inject = [];\n    /* @ngInject */\n    function mdCustomTable() {\n        return {\n            bindToController: true,\n            controller: CustomTableController,\n            controllerAs: 'vm',\n            restrict: 'E',\n            templateUrl: 'app/blocks/util/directives/CustomTableView.html',\n            transclude: {\n                leftPaginationMenu: '?leftPaginationMenu',\n                leftShowHideMenu: '?leftShowHideMenu'\n            },\n            scope: {\n                headers: '=',\n                data: '=',\n                total: '=?',\n                pagination: '=?',\n                promise: '=?',\n                searchBox: '=?',\n                showHideColumns: '=?',\n                userInfo: '=?',\n                keyNavigationEnabled: \"=?\",\n                onPaginate: '&?',\n                onReorder: '&?',\n                onRowClick: '&?',\n                onRowDblClick: '&?',\n                /**\n                 * Select/Deselect one row listener\n                 */\n                onRowsToggle: '&?',\n                onSearchSubmit: '&?',\n                onMouseOverOnCell: '&?',\n                onMouseLeaveOnCell: '&?',\n                hidePager: '&?',\n                /**\n                 * if you enable it, you can see the Select All button on the left side of top pagination menu\n                 * and you switch table to select all mode\n                 */\n                enableSelectAll: '=?',\n                /**\n                 * The name of event for forcing table to check all item in current page\n                 * To call select all you need to fire this event\n                 */\n                toggleCurrentPageSelection: '@?',\n                /**\n                 * The name of event for getting selected item, you need to fire this event with $rootScope.$broadcast(eventName, callback)\n                 * In callback you have object parameter like below\n                 *\n                 * {\n                 *      all: true/false ( all items are selected )\n                 *      unselected: Array of unselected items\n                 *      selected: Array of selected items\n                 *      count: selected count ( it get count in select all and normal selection mode )\n                 * }\n                 */\n                getSelectedItemsEvent: '@?',\n                /**\n                 * The name of event for getting selected item, you need to fire this event with $rootScope.$broadcast(eventName, callback)\n                 * In callback you have object parameter like below\n                 *\n                 * {\n                 *      selected: Array of selected items\n                 * }\n                 */\n                getLegacySelectedItemsEvent: '@?',\n                /**\n                 * The name of event to clear all selection in table\n                 */\n                clearSelectionEvent: '@?',\n                onSelectedCount: '&?',\n                /**\n                 * function that returns promise, as on rejection value is returned back\n                 * to old value\n                 */\n                onCellValueChange: '&?',\n                /**\n                 * selectable must be one of two values\n                 * - single - single selection is enabled\n                 * - multiple - multiple selection is enabled\n                 */\n                selectable: '@?',\n                /**\n                 * key-controlled attribute is defined to make the table\n                 * control by 'CTRL' key\n                 */\n                keyControlled: '=?',\n                class: '=?'\n            }\n        };\n    }\n\n    CustomTableController.$inject = [\n        '$scope',\n        '$element',\n        '$timeout',\n        '$q',\n        '$filter',\n        '$window',\n        '$translate',\n        '$mdDialog',\n        'CustomEditDialog',\n        'Alert',\n        'DateUtils',\n        'CustomTableUtil',\n        'RichTextEditDialog',\n        'HtmlTagUtil',\n        'StringUtil',\n        'TableConstants'\n    ];\n\n    /* @ngInject */\n    function CustomTableController($scope, $element, $timeout, $q, $filter, $window, $translate, $mdDialog, CustomEditDialog, Alert, DateUtils, CustomTableUtil, RichTextEditDialog, HtmlTagUtil, StringUtil, TableConstants) {\n        var vm = this;\n\n        //-- constants --\n        var CTRL_KEY = 17;\n\n        // -- START -- below are md-data-table callbacks\n        vm.paginate = paginate;\n        vm.reorder = reorder;\n        vm.onRowSelect = onRowSelect;\n        vm.onDblRowSelect = onDblRowSelect;\n        vm.onRowDeselect = onRowDeselect;\n        vm.onSearch = onSearch;\n        vm.onCellClick = onCellClick;\n        vm.onCellDblClick = onCellDblClick;\n        vm.onCellEnterPress = onCellEnterPress;\n        vm.callFunction = callFunction;\n        vm.getSuitableData = getSuitableData;\n        vm.getSuitableDataParams = getSuitableDataParams;\n        vm.getCorrectValue = getCorrectValue;\n        vm.openEditDialog = openEditDialog;\n        vm.openRichTextDialog = openRichTextDialog;\n        vm.getLimitedAndEscapedData = getLimitedAndEscapedData;\n        vm.increaseTotalDisplayed = increaseTotalDisplayed;\n        vm.onEdit = onEdit;\n        vm.onSearchFilter = onSearchFilter;\n        vm.getValue = CustomTableUtil.getValue;\n        vm.getCellClass = getCellClass;\n        vm.onToggleSelectAll = onToggleSelectAll;\n        vm.getSelectedCount = getSelectedCount;\n\n        // -- END -- below are md-data-table callbacks\n        vm.selected = [];\n\n        vm.selectedProducts = new Set();\n        vm.unselectedProducts = new Set();\n        vm.selectedAll = false;\n\n        vm.finishMultiple = true;\n        vm.searchForm = {};\n        vm.currentRowIndx = 0;\n        vm.currentCellIndx = 0;\n        vm.defaultPagination = {\n            page: 1,\n            size: 5,\n            options: [\n                10,\n                30,\n                50,\n                100\n            ],\n            label: {\n                page: $translate.instant('global.customDataTable.page'),\n                rowsPerPage: $translate.instant('global.customDataTable.rowsPerPage'),\n                of: $translate.instant('global.customDataTable.of')\n            }\n        };\n        vm.defaultHeader = {\n            editable: false,\n            showHide: true,\n            visible: true,\n            property: null,\n            onClick: null,\n            orderBy: null,\n            desc: false\n        };\n        vm.controllKeyPressed = false;\n        vm.isEmptyData = true;\n        vm.totalDisplayed = 25;\n        vm.displayedData = [];\n        activate();\n\n        ////////////////////\n\n        function activate() {\n            //add arrow navigation to tables after render\n            $timeout(\n                function () {\n                    afterHtmlRender();\n                }, 0\n            );\n\n            vm.isEmptyData = !vm.data || vm.data.length === 0;\n\n            if (angular.isUndefined(vm.pagination)) {\n                vm.pagination = {};\n            }\n            vm.pagination = angular.extend({}, vm.defaultPagination, vm.pagination);\n            if (angular.isDefined(vm.data) && angular.isArray(vm.data)) {\n                setPageData(sliceData(vm.data, vm.order));\n            }\n            registerWatchOnData();\n            registerWatchOnHeaders();\n\n            if (angular.isUndefined(vm.total) && vm.data) {\n                vm.total = vm.data.length;\n            } else if (angular.isUndefined(vm.total)) {\n                vm.total = 0;\n            }\n\n            if (angular.isUndefined(vm.selectable)) {\n                vm.selectable = false;\n            }\n            if (angular.isArray(vm.headers)) {\n                vm.tHeaders = extendHeaders(vm.headers);\n            }\n\n            angular.element($window).on('keydown', holdKey);\n            angular.element($window).on('keyup', releaseKey);\n            //selecting row by click on any cell is enabled if key navigation is not enabled\n            vm.rowSelectable = !angular.isDefined(vm.keyNavigationEnabled);\n\n            if (angular.isString(vm.toggleCurrentPageSelection)) {\n                $scope.$on(vm.toggleCurrentPageSelection, toggleItemSelection);\n            }\n\n            if (angular.isString(vm.getSelectedItemsEvent)) {\n                $scope.$on(vm.getSelectedItemsEvent, getAllSelected);\n            }\n\n            if (angular.isString(vm.getLegacySelectedItemsEvent)) {\n                $scope.$on(vm.getLegacySelectedItemsEvent, getAllLegacySelected);\n            }\n\n\n            if (angular.isString(vm.clearSelectionEvent)) {\n                $scope.$on(vm.clearSelectionEvent, clearSelection);\n            }\n\n            //////////////////////////////////////////////\n\n            function getAllSelected(event, callback) {\n                if (angular.isFunction(callback)) {\n                    callback({\n                        count: getSelectedCount(),\n                        all: vm.selectedAll,\n                        unselected: Array.from(vm.unselectedProducts),\n                        selected: Array.from(vm.selectedProducts)\n                    });\n                }\n            }\n\n            function getAllLegacySelected(event, callback) {\n                if (angular.isFunction(callback)) {\n                    callback({\n                        selected: Array.from(vm.selected)\n                    });\n                }\n            }\n\n            function clearSelection() {\n                vm.selectedAll = false;\n                vm.selected.length = 0;\n                vm.unselectedProducts.clear();\n                vm.selectedProducts.clear();\n            }\n        }\n\n        function toggleItemSelection(event, deselect) {\n            if (deselect) {\n                vm.selected.length = 0;\n                return;\n            }\n\n            vm.selected = Array.from(new Set(vm.data));\n        }\n\n        function getSelectedCount() {\n            if (vm.selectedAll) {\n                return parseInt(vm.total) - vm.unselectedProducts.size;\n            }\n\n            return vm.selectedProducts.size;\n        }\n\n        function fireCountEvent() {\n            if (angular.isFunction(vm.onSelectedCount)) {\n                var count = getSelectedCount();\n                var func = vm.onSelectedCount({size: count});\n\n                if (angular.isFunction(func)) {\n                    func(count);\n                }\n            }\n        }\n\n        function getCellClass(header, model) {\n            if (angular.isFunction(header.cellClass)) {\n                return header.cellClass(header, model) || '';\n            }\n\n            return header.cellClass || '';\n        }\n\n        function onToggleSelectAll() {\n            vm.selectedProducts.clear();\n            vm.unselectedProducts.clear();\n            var all = vm.selectedAll;\n            vm.selectedAll = !all;\n            toggleItemSelection(null, all);\n\n            fireCountEvent();\n        }\n\n        function setPageData(pageData) {\n            vm.pageData = pageData;\n            if (vm.data) {\n                vm.totalDisplayed = vm.data.length;\n            }\n            vm.displayedData = $filter('limitTo')(vm.pageData, vm.totalDisplayed);\n            $scope.$emit('page-data:updated');\n        }\n\n        function increaseTotalDisplayed() {\n            if (!vm.pageData) {\n                return;\n            }\n            if (vm.totalDisplayed + 3 < vm.pageData.length) {\n                vm.totalDisplayed += 3;\n                vm.displayedData = $filter('limitTo')(vm.pageData, vm.totalDisplayed);\n                return;\n            }\n            vm.totalDisplayed = vm.pageData.length;\n            vm.displayedData = $filter('limitTo')(vm.pageData, vm.totalDisplayed);\n        }\n\n        function onEdit(header) {\n            var config = {\n                templateUrl: 'app/blocks/util/directives/table-input/TextInputView.html',\n                controller: 'TableInputController',\n                controllerAs: 'vm',\n                locals: {\n                    validations: null\n                }\n            };\n\n            if (header.edit.type === TableConstants.editType.NUMERIC) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/NumericInputView.html';\n                config.controller = 'NumericInputController';\n            } else if (header.edit.type === TableConstants.editType.BOOLEAN) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/BooleanInputView.html';\n            } else if (header.edit.type === TableConstants.editType.ENUM) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/EnumInputView.html';\n                config.controller = 'TableEnumInputController';\n            }\n\n            config = angular.merge(config, header.edit.options);\n            $mdDialog.show(config).then(header.edit.callback);\n        }\n\n        function onSearchFilter(header) {\n            var config = {\n                templateUrl: 'app/blocks/util/directives/table-input/TextInputView.html',\n                controller: 'TableInputController',\n                controllerAs: 'vm',\n                locals: {\n                    validations: null\n                }\n            };\n\n            if (header.search.type === TableConstants.editType.NUMERIC) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/NumericInputView.html';\n            } else if (header.search.type === TableConstants.editType.BOOLEAN) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/BooleanInputView.html';\n            } else if (header.search.type === TableConstants.editType.ENUM) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/EnumInputView.html';\n                config.controller = 'TableEnumInputController';\n            }\n\n            config = angular.merge(config, header.search.options);\n            $mdDialog.show(config).then(header.search.callback);\n        }\n\n\n        function afterHtmlRender() {\n            vm.tableBody = angular.element($element).find('table tbody');\n            registerNavigationListener(vm.tableBody);\n        }\n\n        function registerNavigationListener(tableBody) {\n            if (!tableBody || tableBody.length === 0) {\n                return;\n            }\n            angular.element(tableBody).on('keydown', navigationListener);\n        }\n\n        function navigationListener(event) {\n            if (event.keyCode === 37 && vm.currentCellIndx > 0) {\n                //move left\n                vm.currentCellIndx--;\n                changeCellPosition('right');\n                return false;\n            }\n            if (event.keyCode === 38 && vm.currentRowIndx > 0) {\n                //move up\n                vm.currentRowIndx--;\n                changeCellPosition('down');\n                return false;\n            }\n            if (event.keyCode === 39 && vm.currentCellIndx < vm.tHeaders.length) {\n                //move right\n                vm.currentCellIndx++;\n                changeCellPosition('left');\n                return false;\n            }\n            if (event.keyCode === 40 && vm.pageData && vm.currentRowIndx < vm.pageData.length - 1) {\n                //move down\n                vm.currentRowIndx++;\n                changeCellPosition('up');\n                return false;\n            }\n        }\n\n        function extendHeaders(headers) {\n            var extendedHeaders = [];\n            for (var i = 0; i < headers.length; i++) {\n                if (angular.isDefined(headers[i])) {\n                    var extend = angular.extend({}, vm.defaultHeader, headers[i]);\n                    extendedHeaders.push(angular.extend(headers[i], extend));\n                }\n            }\n            return extendedHeaders;\n        }\n\n        function changeCellPosition(fromDir) {\n            if (!vm.tableBody || vm.tableBody.length === 0) {\n                return;\n            }\n            var prevCell = vm.currentCell;\n            var currentRow = vm.tableBody.find('tr')[vm.currentRowIndx];\n            if (!currentRow) {\n                return;\n            }\n            vm.currentCell = currentRow.children[vm.currentCellIndx];\n            if (vm.currentCell) {\n                //if current cell is now checkbox column cell\n                if (isCellCheckbox(vm.currentCell)) {\n                    vm.currentCell = prevCell;\n                    handleCheckboxCellPositioning(fromDir);\n                    return;\n                }\n                //if current cell is hidden column cell\n                if (isCellHidden(vm.currentCell)) {\n                    handleHiddenCellPositioning(fromDir);\n                }\n                if (prevCell) {\n                    angular.element(prevCell).removeClass(\"active-cell\");\n                }\n                vm.currentCell.focus();\n                angular.element(vm.currentCell).addClass(\"active-cell\");\n                return;\n            }\n            vm.currentCell = prevCell;\n        }\n\n        function isCellHidden(cell) {\n            return angular.element(cell).hasClass('ng-hide');\n        }\n\n        function handleHiddenCellPositioning(fromDir) {\n            switch (fromDir) {\n                case 'up':\n                    vm.currentRowIndx++;\n                    break;\n                case 'down':\n                    vm.currentRowIndx--;\n                    break;\n                case 'left':\n                    vm.currentCellIndx++;\n                    break;\n                case 'right':\n                    vm.currentCellIndx--;\n                    break;\n            }\n            changeCellPosition(fromDir);\n        }\n\n        function handleCheckboxCellPositioning(fromDir) {\n            switch (fromDir) {\n                case 'up':\n                    vm.currentRowIndx--;\n                    break;\n                case 'down':\n                    vm.currentRowIndx++;\n                    break;\n                case 'left':\n                    vm.currentCellIndx--;\n                    break;\n                case 'right':\n                    vm.currentCellIndx++;\n                    break;\n            }\n        }\n\n        function isCellCheckbox(cell) {\n            return angular.element(cell).find(\"md-checkbox\").length > 0\n        }\n\n        function isEditableField(model, header) {\n            if (angular.isFunction(header.editable)) {\n                return header.editable(model, header);\n            }\n            return header.editable;\n        }\n\n        function onCellClick(event, model, header) {\n            var cellElement = angular.element(event.target);\n            vm.currentRowIndx = cellElement.parent().parent().children().index(cellElement.parent());\n            vm.currentCellIndx = cellElement.parent().children().index(cellElement);\n            if (!vm.selectable) {\n                vm.currentCellIndx += 1;\n            }\n            changeCellPosition();\n        }\n\n        function onCellDblClick(event, model, header) {\n            var isEditable = isEditableField(model, header);\n            if (isEditable && !vm.keyNavigationEnabled) {\n                if (header.type === 'text') {\n                    vm.openRichTextDialog(event, model, header);\n                    return;\n                }\n                vm.openEditDialog(event, model, header);\n                return;\n            }\n\n            onCellClick(event, model, header);\n\n            if (isEditable && vm.keyNavigationEnabled) {\n                if (header.type === 'text') {\n                    vm.openRichTextDialog(event, model, header);\n                    return;\n                }\n                vm.openEditDialog(event, model, header);\n            }\n\n            vm.selected.length = 0;\n        }\n\n        function onCellEnterPress(event, model, header) {\n            vm.onCellDblClick(event, model, header);\n        }\n\n        function callFunction(fn, model, header) {\n            if (angular.isFunction(fn)) {\n                return fn(model, header);\n            }\n        }\n\n        function registerWatchOnData() {\n            $scope.$watchCollection(\n                function watchData(scope) {\n                    return vm.data;\n                },\n                function handleChange(newValue, oldValue) {\n                    vm.isEmptyData = !newValue || newValue.length === 0;\n                    setPageData(sliceData(newValue, vm.order));\n                }\n            );\n        }\n\n        function registerWatchOnHeaders() {\n            $scope.$watchCollection(\n                function watchData(scope) {\n                    return vm.headers;\n                },\n                function handleChange(newValue, oldValue) {\n                    if (!angular.isArray(newValue)) {\n                        return;\n                    }\n                    vm.tHeaders = extendHeaders(newValue);\n                }\n            );\n        }\n\n        function getSuitableDataParams(data, header) {\n            return CustomTableUtil.getValue(data, header.params);\n        }\n\n        function getCorrectValue(model, header) {\n            var value = header.type === 'text' ? getLimitedAndEscapedData(model, header) : getSuitableData(model, header);\n\n            if (!value) {\n                return $translate.instant('global.no_value');\n            }\n\n            return value;\n        }\n\n        function getSuitableData(data, header) {\n            var val = CustomTableUtil.getFieldValue(data, header);\n\n            if (angular.isUndefined(val) || val == null) {\n                return '';\n            }\n\n            if (header.property) {\n                if (header.property === 'length') {\n                    val = val[header.property];\n                }\n                //add more function if needed\n            }\n\n            if (header.type && (header.type === 'date' || header.type === 'datetime')) {\n                val = DateUtils.getFormattedDate(Date.parse(val));\n            }\n\n            if (angular.isFunction(header.applyFilterIf) && !header.applyFilterIf(data, header)) {\n                return val;\n            }\n\n            if (header.filter) {\n                try {\n                    val = $filter(header.filter)(val, header.filterParams);\n                } catch (e) {\n                    val = 'Filter does not exist';\n                }\n            }\n\n            return val;\n        }\n\n        function onSearch(searchText) {\n            if (angular.isFunction(vm.onSearchSubmit)) {\n                vm.onSearchSubmit(searchText);\n                return;\n            }\n            setPageData(sliceData(vm.data, vm.order));\n            if (searchText && searchText.length > 0) {\n                Alert.info($translate.instant('global.customDataTable.searchFound', {found: '' + vm.total}));\n            }\n        }\n\n        function getSearchedData(data, searchText) {\n            if (!angular.isArray(data) || !searchText || searchText.length === 0) {\n                return data;\n            }\n            return $filter('filter')(data, vm.searchForm.searchText);\n        }\n\n        /**\n         * function= callback called when a pagination parameters like size, page is changed,\n         * calls onPaginate callback if it were defined\n         *\n         * onPaginate function is expected to be called with onPaginate(page, pageSize)\n         * @param page\n         * @param pageSize\n         */\n\n        function paginate(page, pageSize) {\n            vm.finishMultiple = true;\n            vm.pagination.page = page;\n            vm.pagination.size = pageSize;\n            if (angular.isFunction(vm.onPaginate)) {\n                vm.onPaginate(\n                    {\n                        page: page,\n                        pageSize: pageSize\n                    }\n                );\n                return;\n            }\n            setPageData(sliceData(vm.data, vm.pagination.order));\n        }\n\n        function isRemotePagination() {\n            return vm.onPaginate || vm.data.length <= vm.pagination.size;\n        }\n\n        function sliceData(data, order) {\n            if (!angular.isArray(data)) {\n                return data;\n            }\n            var slicedData = data;\n            var offset = 0;\n            //apply first search on data\n            if (!vm.onSearchSubmit && vm.searchForm.searchText && vm.searchForm.searchText.length > 0) {\n                slicedData = getSearchedData(data, vm.searchForm.searchText);\n                vm.total = slicedData.length;\n                offset = (vm.pagination.page - 1) * vm.pagination.size;\n            }\n            //apply order if there is any\n            if (!vm.onReorder && order) {\n                slicedData = getOrderedData(slicedData, order);\n            }\n            //if no remote pagination and static data length is higher then page size\n            //then offset should be calculated for static data\n            if (!isRemotePagination()) {\n                offset = (vm.pagination.page - 1) * vm.pagination.size;\n            }\n            slicedData = slicedData.slice(offset, offset + vm.pagination.size);\n            return slicedData;\n        }\n\n        function getOrderedData(data, order) {\n            if (!angular.isArray(data)) {\n                return data;\n            }\n            if (order && angular.isString(order)) {\n                var predicate = order;\n                var reverse = false;\n                if (order.indexOf('-') !== -1) {\n                    predicate = order.split('-')[1];\n                    reverse = true;\n                }\n                return $filter('orderBy')(data, predicate, reverse);\n            }\n            return data;\n        }\n\n        function reorder(order) {\n            if (angular.isDefined(vm.onReorder)) {\n                vm.onReorder(\n                    {\n                        order: order\n                    }\n                );\n                return;\n            }\n            setPageData(sliceData(vm.data, order));\n        }\n\n        function selectionEnabled() {\n            if (!vm.keyControlled) {\n                return angular.isDefined(vm.selectable);\n            }\n            return angular.isDefined(vm.selectable) && vm.controllKeyPressed;\n        }\n\n        function isSelectAllPerPage() {\n            if (vm.pageData && vm.selected && vm.selected.length % vm.pagination.size === vm.totalDisplayed) {\n                angular.forEach(vm.selected, function (selectedOne) {\n                    if (vm.pageData.indexOf(selectedOne) === -1) {\n                        return false;\n                    }\n                });\n                return true;\n            }\n            return false;\n        }\n\n        function onDblRowSelect(model) {\n            if (angular.isFunction(vm.onRowDblClick)) {\n                vm.onRowDblClick(\n                    {\n                        model: model\n                    }\n                );\n            }\n        }\n\n        function onRowSelect(model) {\n            if (!selectionEnabled() && vm.selected.length <= 1) {\n                if (!angular.isDefined(vm.keyNavigationEnabled)) {\n                    if (angular.isFunction(vm.onRowClick)) {\n                        vm.onRowClick(\n                            {\n                                model: model\n                            }\n                        );\n                    }\n                    callRowToggle(model, false);\n                }\n                // do not set new array, instead clear it\n                vm.selected.length = 0;\n                return;\n            }\n            if (isSelectAllPerPage()) {\n                for (var start = vm.totalDisplayed; start < vm.pageData.length; start++) {\n                    if (vm.selected.indexOf(vm.pageData[start]) === -1) {\n                        vm.selected.push(vm.pageData[start]);\n                    }\n                }\n            }\n            callRowToggle(model, false);\n        }\n\n        function onRowDeselect(model) {\n            if (selectionEnabled() && vm.selected.length === 0) {\n                updateScope(\n                    function () {\n                        vm.controllKeyPressed = !vm.keyControlled;\n                    }\n                );\n            }\n\n            callRowToggle(model, true);\n        }\n\n        function holdKey(event) {\n            // on hold keys\n            if (event.keyCode === CTRL_KEY) {\n                updateScope(\n                    function () {\n                        vm.controllKeyPressed = true;\n                    }\n                );\n            }\n        }\n\n        function releaseKey(event) {\n            // on release keys\n            if (event.keyCode === CTRL_KEY) {\n                updateScope(\n                    function () {\n                        if (selectionEnabled() && vm.keyControlled && vm.selected.length === 0) {\n                            vm.controllKeyPressed = false;\n                        }\n                    }\n                );\n            }\n        }\n\n        function callRowToggle(item, unchecked) {\n            if (angular.isFunction(vm.onRowsToggle)) {\n                var func = vm.onRowsToggle({\n                    item: item,\n                    unchecked: unchecked\n                });\n\n                if (angular.isFunction(func)) {\n                    func(item, unchecked);\n                }\n            }\n\n            if (vm.enableSelectAll) {\n                var first = vm.unselectedProducts;\n                var second = vm.selectedProducts;\n\n                if (unchecked) {\n                    first = vm.selectedProducts;\n                    second = vm.unselectedProducts;\n                }\n\n                second.add(item.id);\n                first.delete(item.id);\n\n                if (unchecked && vm.selectedAll) {\n                    vm.selectedAll = vm.getSelectedCount() !== 0;\n                }\n            }\n\n            fireCountEvent();\n        }\n\n        function updateScope(callback) {\n            $timeout(\n                function () {\n                    $scope.$apply(callback);\n                }, 0\n            );\n        }\n\n        function callOnCellSaveCallback(header, model, newValue, oldValue) {\n            if (angular.isFunction(vm.onCellValueChange)) {\n                return vm.onCellValueChange(\n                    {\n                        header: header,\n                        model: model,\n                        newValue: newValue,\n                        oldValue: oldValue\n                    }\n                );\n            }\n            var defer = $q.defer();\n            defer.resolve(true);\n            return defer.promise;\n        }\n\n        function openRichTextDialog(event, model, header) {\n            event.stopPropagation();\n            RichTextEditDialog.showDialog(\n                {\n                    modelValue: CustomTableUtil.getFieldValue(model, header),\n                    targetEvent: event,\n                    onSave: function (text) {\n                        var oldValue = CustomTableUtil.getFieldValue(model, header);\n                        if (oldValue === text) {\n                            //no change\n                            returnFocusToCell();\n                            return;\n                        }\n                        //first set value\n                        CustomTableUtil.setValue(model, header.field, text);\n                        //if remote function should be called call it\n                        callOnCellSaveCallback(header.field, model, text, oldValue).catch(\n                            function (updatedModel) {\n                                model = updatedModel;\n                            }\n                        );\n                        returnFocusToCell();\n                    }\n                }\n            );\n        }\n\n        function returnFocusToCell() {\n            if (vm.keyNavigationEnabled && vm.currentCell) {\n                vm.currentCell.focus();\n            }\n        }\n\n        function openEditDialog(event, model, header) {\n            if (event) {\n                event.stopPropagation();\n            }\n            function checkAndSave(newValue) {\n                var oldValue = CustomTableUtil.getFieldValue(model, header);\n                if (oldValue === newValue) {\n                    //no change\n                    returnFocusToCell();\n                    return;\n                }\n                //first set value\n                CustomTableUtil.setValue(model, header.field, newValue);\n                //if remote function should be called call it\n                callOnCellSaveCallback(header.field, model, newValue, oldValue).catch(\n                    function (updatedModel) {\n                        model = updatedModel;\n                    }\n                );\n            }\n\n            CustomEditDialog.showDialog(\n                {\n                    modelValue: CustomTableUtil.getFieldValue(model, header),\n                    placeHolder: header.text,\n                    type: header.type ? header.type : 'text',\n                    afterOutsideToClose: function (value) {\n                        checkAndSave(value);\n                        returnFocusToCell();\n                    },\n                    afterEscToClose: function (value) {\n                        checkAndSave(value);\n                        returnFocusToCell();\n                    },\n                    save: function (input) {\n                        checkAndSave(input.$modelValue);\n                        returnFocusToCell();\n                    },\n                    targetEvent: event,\n                    validators: header.validators\n                }\n            );\n        }\n\n        function getLimitedAndEscapedData(data, header) {\n            var richTextValue = CustomTableUtil.getFieldValue(data, header);\n            if (!richTextValue || richTextValue === '') {\n                return richTextValue;\n            }\n            richTextValue = HtmlTagUtil.escapeTags(richTextValue);\n            return StringUtil.limitTo(richTextValue, 100);\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('datetime', datetimeDirective);\n\n    datetimeDirective.$inject = ['moment'];\n    /* @ngInject */\n    function datetimeDirective(moment) {\n        return {\n            link: link,\n            require: '^ngModel',\n            restrict: 'A',\n            scope: {\n                datetime: '@'\n            }\n        };\n\n        //////////////////\n\n        function link(scope, elm, attrs, ctrl) {\n            var dateFormat = attrs.datetime;\n\n            ctrl.$formatters.unshift(unshiftFormatter);\n            ctrl.$parsers.unshift(unshiftParser);\n\n            ///////////////////////////////////////////////////////\n\n            function unshiftFormatter(modelValue) {\n                if (!dateFormat || !modelValue) {\n                    return '';\n                }\n                return dateFormat;\n            }\n\n            function unshiftParser(viewValue) {\n                var date = moment(viewValue, dateFormat);\n                return (date && date.isValid() && date.year() > 1950) ? date.toDate() : '';\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    var defaultDateFormat = 'DD.MM.YYYY';\n\n    angular.module('app.blocks')\n        .directive('datetimePicker', DatetimePickerDirective)\n        .config(ConfigureTimePicker);\n\n    ConfigureTimePicker.$inject = ['$mdDateLocaleProvider'];\n    /* @ngInject */\n    function ConfigureTimePicker($mdDateLocaleProvider) {\n        $mdDateLocaleProvider.formatDate = formatDate;\n        $mdDateLocaleProvider.parseDate = parseDate;\n\n        function parseDate(dateString) {\n            var m = moment(dateString, defaultDateFormat, true);\n            return m.isValid() ? m.toDate() : new Date(NaN);\n        }\n\n        function formatDate(date) {\n            if (moment(date).isValid()) {\n                return moment(date).format(defaultDateFormat);\n            }\n            return null;\n        }\n    }\n\n    DatetimePickerDirective.$inject = [];\n    /* @ngInject */\n    function DatetimePickerDirective() {\n        return {\n            bindToController: true,\n            controller: DatetimePickerController,\n            controllerAs: 'vm',\n            restrict: 'E',\n            templateUrl: 'app/blocks/util/directives/DatetimePickerView.html',\n            scope: {\n                value: '=',\n                showDate: '=?',\n                showTime: '=?',\n                maxDate: '=?',\n                label: '@',\n                format: '=?',\n                minDate: '=?'\n            },\n            link: initConf\n        };\n\n        function initConf(scope, element, attrs) {\n            if (attrs.showTime === null) {\n                attrs.showTime = true;\n            }\n            if (attrs.showDate === null) {\n                attrs.showDate = true;\n            }\n\n            scope.timePickerOptions = {\n                step: 15,\n                timeFormat: 'H:i'\n            };\n\n        }\n    }\n\n    DatetimePickerController.$inject = [\n        '$filter',\n        '$scope'\n    ];\n    /* @ngInject */\n    function DatetimePickerController($filter, $scope) {\n        var vm = this;\n\n        vm.format = vm.format || defaultDateFormat;\n\n        vm.showDate = vm.showDate || true;\n        vm.showTime = vm.showTime || true;\n\n        if (vm.value) {\n            vm.timeValue = $scope.value;\n            vm.dateValue = $scope.value;\n        } else {\n            vm.timeValue = null;\n            vm.dateValue = null;\n        }\n\n        $scope.$watch('vm.timeValue', combineDateTime);\n        $scope.$watch('vm.dateValue', combineDateTime);\n        $scope.$watch('vm.value', valueChanged);\n\n        function valueChanged(newValue) {\n            if (!newValue) {\n                vm.timeValue = null;\n                vm.dateValue = null;\n            }\n        }\n\n        function combineDateTime(newValue, oldValue) {\n            if (oldValue !== null && newValue === null) {\n                if (vm.dateValue === null) {\n                    vm.timeValue = null;\n                    vm.dateValue = null;\n                    vm.value = undefined;\n                }\n            }\n\n            if (vm.dateValue) {\n                vm.value = vm.dateValue;\n                if (vm.timeValue === null) {\n                    var now = new Date();\n                    vm.value.setHours(now.getHours());\n                    vm.value.setMinutes(now.getMinutes());\n                }\n            }\n\n            if (vm.timeValue) {\n                if (vm.dateValue === null) {\n                    vm.value = new Date();\n                }\n                vm.timeValueStr = formatTime(vm.timeValue);\n                var timeParts = vm.timeValueStr.split(':');\n                vm.value.setHours(timeParts[0]);\n                vm.value.setMinutes(timeParts[1]);\n            }\n\n            if (vm.value === null) {\n                vm.timeValue = null;\n                vm.dateValue = null;\n            } else {\n                vm.timeValue = vm.value;\n                vm.dateValue = vm.value;\n            }\n\n        }\n\n        function formatTime(date) {\n            return $filter('date')(date, \"HH:mm\");\n        }\n\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('onEnterKey', OnEnterKeyDirective);\n\n    OnEnterKeyDirective.$inject = [];\n    /* @ngInject */\n    function OnEnterKeyDirective() {\n        return directive;\n\n        ////////////////////////////////////////////////////////////\n\n        function directive(scope, element, attrs) {\n            element.bind(\"keydown keypress\", listener);\n\n            /////////////////////////////////////////////////////////\n\n            function listener(event) {\n                var keyCode = event.which || event.keyCode;\n                if (keyCode === 13) {\n                    scope.$apply(apply);\n                    event.preventDefault();\n                }\n\n                //////////////////////////////////////////////////\n\n                function apply() {\n                    scope.$eval(attrs.onEnterKey);\n                }\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('equalTo', equalToDirective);\n\n    equalToDirective.$inject = [];\n    /* @ngInject */\n    function equalToDirective() {\n        return {\n            require: 'ngModel',\n            scope: {\n                otherModelValue: \"=equalTo\"\n            },\n            link: link\n        };\n    }\n\n    function link(scope, element, attributes, ngModel) {\n        ngModel.$validators.equalTo = function (modelValue) {\n            return modelValue === scope.otherModelValue;\n        };\n        scope.$watch(\"otherModelValue\", ngModel.$validate);\n    }\n\n})(angular);\n","/*\n * Angular Fixed Table Header\n * https://github.com/daniel-nagy/fixed-table-header\n * @license MIT\n * v0.2.1\n */\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('fixHead', fixHead);\n\n    fixHead.$inject = ['$window', '$timeout', '$compile'];\n\n    function fixHead($window, $timeout, $compile) {\n        return {\n            compile: compileFn\n        };\n\n        function compileFn(tElement) {\n            var header = {\n                clone: tElement.clone(),\n                original: tElement\n            };\n\n            header.clone.removeAttr('fix-head').removeAttr('ng-if');\n            //need to compile within original table, out of original table checkbox won't work\n            header.original.after(header.clone);\n            //table.clone.append(header.clone);\n\n            return function(scope, element) {\n                var table = {\n                    clone: element.parent().clone().empty(),\n                    original: element.parent()\n                };\n\n                //hide the clone header, which will be shown on scroll only\n                table.clone.css({\n                    position: 'fixed',\n                    top: 0,\n                    display: 'none',\n                    backgroundColor: 'white',\n                    zIndex: '33'\n                });\n\n                $compile(table.clone)(scope);\n                table.clone.html(element);\n                header.original = table.original.find('thead');\n\n                var scrollContainer = table.original.parent();\n                scrollContainer.parent()[0].insertBefore(table.clone[0], scrollContainer[0]);\n\n                scrollContainer.on('scroll', function () {\n                    // use CSS transforms to move the cloned header when the table is scrolled horizontally\n                    element.css('transform', 'translate3d(' + -(scrollContainer.prop('scrollLeft')) + 'px, 0, 0)');\n                });\n\n                angular.element($window).bind('scroll', function(){\n                    var tableOffset = scrollContainer.offset();\n                    var el = angular.element(this);\n                    var scrollTop = el.scrollTop();\n\n                    if ((scrollTop > tableOffset.top) && (scrollTop < tableOffset.top + scrollContainer.height())) {\n                        table.clone.css(\"display\", \"block\");\n                    } else {\n                        table.clone.css(\"display\", \"none\");\n                    }\n                });\n\n                function cells() {\n                    return element.find('th').length;\n                }\n\n                function getCells(node) {\n                    return Array.prototype.map.call(node.find('th'), function (cell) {\n                        return jQLite(cell);\n                    });\n                }\n\n                function jQLite(node) {\n                    return angular.element(node);\n                }\n\n                function updateCells() {\n                    var cells = {\n                        clone: getCells(element),\n                        original: getCells(header.original)\n                    };\n\n                    cells.clone.forEach(function (clone, index) {\n                        if(clone.data('isClone')) {\n                            return;\n                        }\n\n                        // prevent duplicating watch listeners\n                        clone.data('isClone', true);\n\n                        var cell = cells.original[index] || cells.clone[index];\n                        var style = $window.getComputedStyle(cell[0] || {});\n\n                        var getWidth = function () {\n                            return style.width;\n                        };\n\n                        var setWidth = function () {\n                            clone.css({minWidth: style.width, maxWidth: style.width});\n                        };\n\n                        var listener = scope.$watch(getWidth, setWidth);\n\n                        $window.addEventListener('resize', setWidth);\n\n                        clone.on('$destroy', function () {\n                            listener();\n                            $window.removeEventListener('resize', setWidth);\n                        });\n\n                        cell.on('$destroy', function () {\n                            clone.remove();\n                        });\n                    });\n                }\n\n                $timeout(function(){\n                    scope.$watch(cells, updateCells);\n                });\n\n                header.original.on('$destroy', function () {\n                    element.remove();\n                });\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('maxBytes', OnMaxBytes);\n\n    OnMaxBytes.$inject = [];\n    /* @ngInject */\n    function OnMaxBytes() {\n        return {\n            restrict: 'A',\n            require: '?ngModel',\n            link: link\n        };\n\n        ///////////////////////\n\n        function link(scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = onValidator;\n\n            ////////////////////////////////////////////////////////////\n\n            function onValidator(modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n\n                ////////////////////////////////////////////////////\n\n                function numberOfBytes(base64String) {\n                    return base64String.length / 4 * 3 - paddingSize(base64String);\n\n                    ////////////////////////////////////////////////////////////\n\n                    function paddingSize(base64String) {\n                        if (endsWith('==', base64String)) {\n                            return 2;\n                        }\n                        if (endsWith('=', base64String)) {\n                            return 1;\n                        }\n                        return 0;\n\n                        ///////////////////////////////////////////////////////\n\n                        function endsWith(suffix, str) {\n                            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('minBytes', OnMinBytes);\n\n    function OnMinBytes() {\n        return {\n            restrict: 'A',\n            require: '?ngModel',\n            link: link\n        };\n\n        /////////////////\n\n        function link(scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = onValidator;\n\n            //////////////////////////////////////////////////////////\n\n            function onValidator(modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n\n                //////////////////////////////////////////////////////////\n\n                function numberOfBytes(base64String) {\n                    return base64String.length / 4 * 3 - paddingSize(base64String);\n\n                    ////////////////////////////////////////////////////////\n\n                    function paddingSize(base64String) {\n                        if (endsWith('==', base64String)) {\n                            return 2;\n                        }\n                        if (endsWith('=', base64String)) {\n                            return 1;\n                        }\n                        return 0;\n\n                        //////////////////////////////////////////////////////////////\n\n                        function endsWith(suffix, str) {\n                            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('splashScreen', splashScreen);\n\n    splashScreen.$inject = ['$filter'];\n    /* @ngInject */\n    function splashScreen($filter) {\n        return {\n            replace: true,\n            restrict: 'E',\n            template: (function () {\n                var dot = '<div class=\"loader--dot\"></div>';\n                var format = '<md-content ng-cloak class=\"splash-screen md-primary-bg\">' +\n                    '<div class=\"loader\">{0}<div class=\"loader--text\"></div></div>' +\n                    '</md-content>';\n\n                for (var i = 0; i < 2; i++) {\n                    dot += dot;\n                }\n\n                return $filter('format')(format, dot);\n            })()\n        };\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('customTextAngular', customTextAngularDirective);\n\n    customTextAngularDirective.$inject = [\n        '$parse',\n        '$timeout',\n        'textAngularManager'\n    ];\n\n\n    /* @ngInject */\n    function customTextAngularDirective($parse, $timeout, textAngularManager) {\n        return {\n            bindToController: true,\n            controller: CustomTextAngularController,\n            templateUrl: 'app/blocks/util/directives/TextAngularView.html',\n            controllerAs: 'vm',\n            restrict: 'E',\n            scope: {\n                name: '@?',\n                value: '=',\n                rows: '@?',\n                toolbar: '@?',\n                focus: '@?',\n                maxLength: '@?'\n            },\n            link: link\n        };\n\n\n        function link(scope, element, attributes) {\n\n            // Parse the focus expression\n            var shouldFocus = $parse(attributes.focus)(scope);\n\n            if (!shouldFocus) {\n                return;\n            }\n\n            $timeout(timeout, 0, false);\n\n            function timeout() {\n                // Retrieve the scope and trigger focus\n                var editor = textAngularManager.retrieveEditor(attributes.name);\n                if (editor) {\n                    var editorScope = editor.scope;\n                    editorScope.displayElements.text.trigger('focus');\n                }\n            }\n        }\n\n\n    }\n\n    CustomTextAngularController.$inject = [\n        '$scope',\n        '$element',\n        '$attrs'\n    ];\n\n\n    /* @ngInject */\n    function CustomTextAngularController($scope, $element, $attrs) {\n        var vm = this;\n        var defaultToolbarButtons = \"[['h1','h2','h3'],\" +\n            \"['pre','quote','bold','italics','underline','strikeThrough'], \" +\n            \"['ul','ol'],['undo','redo'],['justifyLeft','justifyCenter','justifyRight','justifyFull'],\" +\n            \"['indent','outdent'],['insertImage','insertLink','wordcount','charcount']]\";\n\n        if (!vm.name) {\n            vm.name = 'textAngularName_' + Date.now();\n        }\n\n        if (!vm.toolbar) {\n            vm.toolbar = defaultToolbarButtons;\n        }\n\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('textAngularMaxLength', textAngularMaxLength);\n\n    textAngularMaxLength.$inject = [];\n    /* @ngInject */\n    function textAngularMaxLength() {\n        return {\n            require: 'ngModel',\n            link: link\n        };\n\n        ///////////////////////\n\n        function link(scope, element, attrs, ctrl) {\n\n            ctrl.$validators.textAngularMaxLength = textAngularMaxLength;\n\n            ////////////////////////////////////////\n\n            function textAngularMaxLength(modelValue, viewValue) {\n\n                if (ctrl.$isEmpty(modelValue)) {\n                    // consider empty models to be valid\n                    return true;\n                }\n\n                if (attrs.textAngularMaxLength && attrs.textAngularMaxLength.length > 0) {\n                    return viewValue.length <= parseInt(attrs.textAngularMaxLength);\n                }\n\n                return true;\n            }\n\n        }\n\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .component(\n            'alert', {\n                templateUrl: 'app/blocks/util/directives/AlertComponentView.html',\n                controller: AlertController,\n                controllerAs: 'vm',\n                bindings: {\n                    toast: '=',\n                    timeout: '@',\n                    catchServerError: '@'\n                }\n            }\n        );\n\n    AlertController.$inject = [\n        '$rootScope',\n        '$scope',\n        'Alert'\n    ];\n    /* @ngInject */\n    function AlertController($rootScope, $scope, Alert) {\n        var vm = this;\n\n        activate();\n\n        function activate() {\n            vm.alerts = Alert.get();\n            listenToServerError();\n        }\n\n        function listenToServerError() {\n            if (!vm.timeout && vm.timeout !== 0) {\n                vm.timeout = 5000;\n            }\n\n            if (vm.catchServerError !== false) {\n                vm.catchServerError = true;\n            }\n\n            var cleanHttpErrorListener = $rootScope.$on(\n                'smartApp.httpError', function (event, response) {\n                    event.stopPropagation();\n                    if (!vm.catchServerError) {\n                        return;\n                    }\n                    var errors = Alert.handleServerResponse(response);\n                    angular.forEach(\n                        errors, function (item) {\n                            if (!item || !item.message || (angular.isString(item.message) && item.message.trim() === '')) {\n                                return;\n                            }\n                            addServerErrorAlert(item);\n                        }\n                    );\n                }\n            );\n            $scope.$on(\n                '$destroy', function () {\n                    if (vm.catchServerError || angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null) {\n                        cleanHttpErrorListener();\n\n                        vm.alerts = [];//TODO: should handle state change and clear all the messages\n                    }\n                }\n            );\n        }\n\n        function addServerErrorAlert(response) {\n            if (response.params) {\n                if (response.params.exception === 'com.netflix.zuul.exception.ZuulException') {\n                    return;\n                }\n            }\n\n            var alert = Alert.add(\n                {\n                    type: 'warn',\n                    msg: response.message,\n                    params: response.params,\n                    timeout: response.timeout || 0,\n                    toast: vm.toast,\n                    scoped: true\n                },\n                vm.alerts\n            );\n\n            if (!vm.toast && !Alert.alreadyAdded(alert)) {\n                vm.alerts.push(alert);\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptorFactory);\n\n    errorHandlerInterceptorFactory.$inject = [\n        '$q',\n        '$rootScope'\n    ];\n    /* @ngInject */\n    function errorHandlerInterceptorFactory($q, $rootScope) {\n        return {\n            responseError: responseError\n        };\n\n        ////////////////\n\n        function responseError(response) {\n            if (!angular.isObject(response.config) || response.config.broadcast !== false) {\n                if (response.status !== 401 || !angular.isString(response.data.path) || response.data.path.indexOf('/api/account') < 0) {\n                    $rootScope.$emit('smartApp.httpError', response);\n                }\n            }\n\n            return $q.reject(response);\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('notificationInterceptor', notificationInterceptorFactory);\n\n    notificationInterceptorFactory.$inject = ['Alert'];\n    /* @ngInject */\n    function notificationInterceptorFactory(Alert) {\n        return {\n            response: response\n        };\n\n        ///////////////////////////////////////////////////////\n\n        function response(response) {\n            if (!angular.isObject(response.config) || response.config.broadcast !== false) {\n                var alertKey = response.headers('X-smartApp-alert');\n                if (angular.isString(alertKey)) {\n                    Alert.success(\n                        alertKey,\n                        {\n                            param: response.headers('X-smartApp-params')\n                        }\n                    );\n                }\n            }\n            return response;\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('StateHandler', StateHandlerService);\n\n    StateHandlerService.$inject = [\n        '$mdDialog',\n        '$rootScope',\n        '$state',\n        '$translate',\n        'Language',\n        'TranslationHandler',\n        'Alert',\n        'DEBUG_INFO_ENABLED',\n        'VERSION'\n    ];\n\n    /* @ngInject */\n    function StateHandlerService($mdDialog, $rootScope, $state, $translate, Language, TranslationHandler, Alert, DEBUG_INFO_ENABLED, VERSION) {\n        this.initialize = initialize;\n\n        ////////////////\n\n        function initialize() {\n            $rootScope.DEBUG_INFO_ENABLED = DEBUG_INFO_ENABLED;\n            $rootScope.VERSION = VERSION;\n            $rootScope.back = back;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', onChangeStart);\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', onChangeSuccess);\n\n            $rootScope.$on('$destroy', onDestroy);\n\n            ////////////////////////////////////////////////////////////////\n\n            function back() {\n                // If previous state is 'activate' or do not exist go to 'home'\n                if ($rootScope.previousStateName === 'activation' ||\n                    $rootScope.previousStateName === null ||\n                    $state.get($rootScope.previousStateName) === null) {\n                    $state.go('home');\n                } else {\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n                }\n            }\n\n            function onChangeSuccess(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title';\n\n                //clear alerts\n                Alert.clear();\n\n                // Remember previous state unless we've been redirected to login or we've just\n                // reset the state memory after logout. If we're redirected to login, our\n                // previousState is already set in the authExpiredInterceptor. If we're going\n                // to login directly, we don't want to be sent to some previous state anyway\n                if (!$rootScope.redirected && $rootScope.previousStateName) {\n                    $rootScope.previousStateName = fromState.name;\n                    $rootScope.previousStateParams = fromParams;\n                }\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                TranslationHandler.updateTitle(titleKey);\n                $mdDialog.hide();\n            }\n\n            function onDestroy() {\n                if (angular.isDefined(stateChangeStart) && stateChangeStart !== null) {\n                    stateChangeStart();\n                }\n                if (angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null) {\n                    stateChangeSuccess();\n                }\n            }\n\n            function onChangeStart(event, toState, toStateParams) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n\n                // Update the language\n                Language.getCurrent().then($translate.use);\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('TranslationHandler', TranslationHandlerService);\n\n    TranslationHandlerService.$inject = [\n        '$state',\n        '$rootScope',\n        '$translate',\n        '$window'\n    ];\n    /* @ngInject */\n    function TranslationHandlerService($state, $rootScope, $translate, $window) {\n        this.initialize = initialize;\n        this.updateTitle = updateTitle;\n\n        ////////////////\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', updateTitle);\n\n            $rootScope.$on('$destroy', onDestroy);\n\n            ///////////////////////////////////////////////////////////\n\n            function onDestroy() {\n                if (angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null) {\n                    translateChangeSuccess();\n                }\n            }\n        }\n\n        // update the window title using params in the following\n        // precendence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(onTitle);\n\n            ////////////////////////////////////////////////////////\n\n            function onTitle(title) {\n                $window.document.title = title;\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .controller('AppController', AppController);\n\n    AppController.$inject = [\n        '$mdUtil',\n        '$mdSidenav',\n        '$state'\n    ];\n\n    /* @ngInject */\n    function AppController($mdUtil, $mdSidenav, $state) {\n\n        var vm = this;\n\n        vm.pages = [\n            {\n                type: 'exam',\n                title: 'My Messages',\n                id: '1Z4bk8xSx-8AudSwHAdUT2KgBQsPi7PmiOzBwzPKVSt8'\n            },\n            {\n                type: 'exam',\n                title: 'Possessives',\n                id: '1KZCIs_nVrB7NWP1F0N53UIH7VSUAJDNrUX58BiIx6uQ'\n            }\n        ];\n\n        vm.listQuestions = listQuestions;\n        vm.goTo = goTo;\n        vm.changePage = changePage;\n        vm.openMenu = openMenu;\n\n        activate();\n\n        ////////////////////////////////\n\n        function activate() {\n            changePage(vm.pages[0]);\n        }\n\n        function goTo(state) {\n            $state.go(state, null, {reload: true});\n        }\n\n        function openMenu() {\n            $mdUtil.debounce(timer, 200)();\n\n            ///////////////////////////////////////////\n\n            function timer() {\n                $mdSidenav('left').toggle();\n            }\n        }\n\n        function changePage(item) {\n            vm.current = item;\n            $state.go('content', {id: item.id}, {reload: true});\n        }\n\n        function listQuestions() {\n            getQuestions('1FqmeBTcnVTOTNeXegnXTuczrLTbqtGXh0kO5bXRej2M').then(onThen);\n\n            ///////////////////////////////////////////////////\n\n            function onThen(t) {\n                console.log(t);\n            }\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('LanguageController', LanguageController);\n\n    LanguageController.$inject = [\n        '$translate',\n        'Language',\n        'tmhDynamicLocale',\n        'timeAgoSettings'\n    ];\n    /* @ngInject */\n    function LanguageController($translate, Language, tmhDynamicLocale, timeAgoSettings) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        activate();\n\n        //////////////////////\n\n        function activate() {\n            Language.getAll().then(onLang);\n            Language.getCurrent().then(changeLanguage);\n\n            /////////////////////////////////////////////////////\n\n            function onLang(languages) {\n                vm.languages = languages;\n            }\n        }\n\n        function changeLanguage(languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n            timeAgoSettings.overrideLang = languageKey;\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('dynamicController', DynamicControllerDirective);\n\n    DynamicControllerDirective.$inject = [\n        '$parse',\n        '$mdCompiler'\n    ];\n    /* @ngInject */\n    function DynamicControllerDirective($parse, $mdCompiler) {\n        return {\n            restrict: 'A',\n            terminal: true,\n            priority: 100000,\n            link: link\n        };\n\n        ///////////////////////////////////////////\n\n        function link(scope, elem) {\n            // Compile the element with the ng-controller attribute\n            var url = elem.attr('template-url') || null;\n            if (!url) {\n                return;\n            }\n\n            url = $parse(url)(scope);\n            var name = elem.attr('dynamic-controller');\n            var controller = null;\n            var model = null;\n            var as = null;\n\n            if (name) {\n                var data = elem.attr('controller-data');\n                controller = $parse(name)(scope);\n                as = elem.attr('controller-as');\n\n                elem.removeAttr('dynamic-controller');\n                elem.removeAttr('controller-data');\n                elem.removeAttr('controller-as');\n                elem.removeAttr('template-url');\n\n                if (data) {\n                    model = $parse(data)(scope);\n                }\n            }\n\n            var config = {\n                templateUrl: url,\n                controller: controller,\n                controllerAs: as,\n                locals: {model: model}\n            };\n            $mdCompiler.compile(config).then(onThen);\n\n            //////////////////////////////////////////////\n\n            function onThen(compileData) {\n                compileData.link(scope);\n                elem.html(compileData.element);\n            }\n        }\n\n    }\n\n})(angular);\n\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('NumericInputController', NumericInputController);\n\n    NumericInputController.$inject = [\n        '$mdDialog',\n        'validations'\n    ];\n    /* @ngInject */\n    function NumericInputController($mdDialog, validations) {\n        var vm = this;\n\n        vm.dismiss = dismiss;\n        vm.apply = apply;\n        vm.validations = validations;\n        vm.patternOnlyOneDecimal = /^[0-9]+(\\.[0-9]{1,2})?$/;\n\n        activate();\n\n        ////////////////\n\n        function activate() {\n\n        }\n\n        function apply() {\n            $mdDialog.hide(vm.model && parseFloat(vm.model.content) || null);\n        }\n\n        function dismiss() {\n            $mdDialog.cancel();\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('TableEnumInputController', TableEnumInputController);\n\n    TableEnumInputController.$inject = [\n        '$mdDialog',\n        '$q',\n        'config'\n    ];\n    /* @ngInject */\n    function TableEnumInputController($mdDialog, $q, config) {\n        var vm = this;\n\n        vm.config = config || {};\n        vm.items = [];\n        vm.page = -1;\n        vm.busy = false;\n\n        vm.onSearch = search;\n        vm.dismiss = dismiss;\n        vm.apply = apply;\n        vm.onItemClick = onItemClick;\n        vm.displayField = displayField;\n\n        activate();\n\n        //////////////////////////////////\n\n        function activate() {\n            var initialData = {\n                size: 10,\n                minLength: 0,\n                displayField: 'text',\n                method: angular.noop,\n                hint: 'global.customDataTable.query_hint',\n                pagination: true,\n                selectedField: false //if it is set to false, it means the whole data will be returned\n            };\n            vm.config = angular.merge(initialData, vm.config);\n        }\n\n        function search(query, resetPage) {\n            if (vm.busy) {\n                vm.busy = false;\n                return $q.resolve(vm.items);\n            }\n\n            vm.busy = true;\n\n            if (!resetPage && vm.config.pagination) {\n                vm.page++;\n            } else {\n                vm.page = 0;\n            }\n\n            return vm.config.method(\n                {size: vm.config.size, page: vm.page},\n                query\n            ).then(onSuccess, onError);\n\n            //////////////////////////////////////\n\n            function onSuccess(data) {\n                vm.busy = data.length === 0;\n\n                if (resetPage) {\n                    vm.items.splice(0, vm.items.length)\n                }\n                if (angular.isFunction(vm.config.onBeforeAdd)) {\n                    vm.config.onBeforeAdd(data);\n                }\n                vm.items.push.apply(vm.items, data);\n\n                return vm.items;\n            }\n\n            function onError(error) {\n                vm.busy = false;\n                console.error(error);\n            }\n        }\n\n        function onItemClick(event, item) {\n            if (item.disabled) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        function displayField(item) {\n            if (angular.isFunction(vm.config.displayField)) {\n                return vm.config.displayField(item);\n            }\n\n            return item[vm.config.displayField];\n        }\n\n        function apply() {\n            var data = vm.model;\n\n            if (vm.config.selectedField !== false) {\n                data = data[vm.config.selectedField];\n            }\n\n            $mdDialog.hide(data);\n        }\n\n        function dismiss() {\n            $mdDialog.cancel();\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('TableInputController', TableInputController);\n\n    TableInputController.$inject = [\n        '$mdDialog',\n        'validations'\n    ];\n    /* @ngInject */\n    function TableInputController($mdDialog, validations) {\n        var vm = this;\n\n        vm.dismiss = dismiss;\n        vm.apply = apply;\n        vm.validations = validations;\n\n        activate();\n\n        ////////////////\n\n        function activate() {\n\n        }\n\n        function apply() {\n            $mdDialog.hide(vm.model && vm.model.content || null);\n        }\n\n        function dismiss() {\n            $mdDialog.cancel();\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.content')\n        .controller('ContentController', ContentController);\n\n    ContentController.$inject = [\n        '$timeout',\n        '$sce',\n        'id'\n    ];\n\n    /* @ngInject */\n    function ContentController($timeout, $sce, id) {\n        var vm = this;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n            changePage('https://docs.google.com/document/d/' + id + '/?embedded=true')\n        }\n\n        function changePage(url) {\n            url = $sce.trustAsResourceUrl(url);\n            var iframe = angular.element(document.querySelector('#content'));\n            iframe.attr('src', '');\n\n            $timeout(changeUrl, 100);\n\n            ////////////////////////////////////////////\n\n            function changeUrl() {\n                iframe.attr('src', url);\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .controller('CourseController', CourseController);\n\n    CourseController.$inject = [];\n\n    /* @ngInject */\n    function CourseController() {\n        var vm = this;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .controller('CourseDetailController', CourseDetailController);\n\n    CourseDetailController.$inject = [\n        '$state',\n        'AppConstants',\n        'model'\n    ];\n\n    /* @ngInject */\n    function CourseDetailController($state, AppConstants, model) {\n        var vm = this;\n\n        vm.model = model;\n\n        vm.goToItem = goToItem;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n        }\n\n        function goToItem(item) {\n            if (item.mimeType === AppConstants.DOCUMENT_MIME_TYPE) {\n                $state.go('content', {id: item.id}, {reload: true});\n            } else {\n                $state.go('question.list', {sheetId: item.id}, {reload: true});\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .controller('CourseListController', CourseListController);\n\n    CourseListController.$inject = [\n        '$state',\n        'AppConstants',\n        'GoogleAPI'\n    ];\n\n    /* @ngInject */\n    function CourseListController($state, AppConstants, GoogleAPI) {\n        var vm = this;\n\n        vm.items = [];\n\n        vm.goToItem = goToItem;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n            listCourses();\n        }\n\n        function goToItem(id) {\n            $state.go('course.detail', {id: id}, {reload: true});\n        }\n\n        function listCourses() {\n            GoogleAPI.items(AppConstants.ROOT_FOLDER_ID, [AppConstants.FOLDER_MIME_TYPE]).then(onThen);\n\n\n            /////////////////////////////////////////////////////\n\n            function onThen(t) {\n                console.log('data in the final block');\n                console.log(t.files);\n                vm.items = t.files;\n            }\n        }\n\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.home')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = [];\n    /* @ngInject */\n    function HomeController() {\n        var vm = this;\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.layout')\n        .controller('SidebarController', SidebarController);\n\n    SidebarController.$inject = [\n        '$state',\n        'routerHelper',\n        'MenuGroups'\n    ];\n    /* @ngInject */\n    function SidebarController($state, routerHelper, MenuGroups) {\n        var vm = this;\n\n        var states = routerHelper.getStates();\n        vm.isCurrent = isCurrent;\n\n        activate();\n\n        /////////////////////\n\n        function activate() {\n            refreshNavRoutes();\n        }\n\n        function refreshNavRoutes() {\n            var routes = states.filter(filter).sort(sort);\n\n            vm.routes = [];\n\n            var groups = {};\n            routes.forEach(onIterate);\n\n            var i = 1;\n            for (var index in groups) {\n                if (groups.hasOwnProperty(index)) {\n                    var order = (index === 'root') ? 0 : i++;\n                    var text = 'layout.sidebar.groups.' + index;\n                    if (index.indexOf('plugin.') > -1) {\n                        text = index.replace('plugin.', '') + '.title';\n                    }\n                    vm.routes[order] = angular.extend(\n                        {},\n                        {\n                            name: index,\n                            text: text\n                        },\n                        groups[index]\n                    );\n                }\n            }\n\n            ////////////////////////////////////////////////\n\n            function filter(r) {\n                return !r.abstract &&\n                    (\n                        !r.settings || r.settings.showOnMenu !== false\n                    );\n            }\n\n            function sort(r1, r2) {\n                if (!r1.settings || !r2.settings) {\n                    return 0;\n                }\n                return r1.settings.order - r2.settings.order;\n            }\n\n            function onIterate(item) {\n                if (!item.settings) {\n                    return true;\n                }\n                var group = item.settings.group = item.settings.group || angular.extend({}, MenuGroups.ROOT);\n\n                if (!angular.isObject(group)) {\n                    group = {\n                        name: group\n                    };\n                }\n\n                if (angular.isUndefined(groups[group.name])) {\n                    groups[group.name] = {\n                        items: [],\n                        icon: group.icon\n                    };\n                }\n\n                groups[group.name].items.push(\n                    angular.extend(\n                        {},\n                        item.settings,\n                        {\n                            name: item.name\n                        }\n                    )\n                );\n            }\n        }\n\n        function isCurrent(route) {\n            if (!route.title || !$state.current || !$state.current.title) {\n                return '';\n            }\n            var menuName = route.title;\n            return $state.current.title.substr(0, menuName.length) === menuName ? 'current' : '';\n        }\n    }\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .controller('QuestionListController', QuestionListController);\n\n    QuestionListController.$inject = [\n        '$state',\n        'GoogleAPI',\n        'sheetId'\n    ];\n\n    /* @ngInject */\n    function QuestionListController($state, GoogleAPI, sheetId) {\n        var vm = this;\n\n        vm.items = [];\n\n        vm.submitAnswer = submitAnswer;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n            listQuestions();\n        }\n\n        function submitAnswer() {\n            // $state.go('question.detail', {id: id}, {reload: true});\n            console.log(vm.items);\n        }\n\n        function listQuestions() {\n            GoogleAPI.questions(sheetId).then(onThen);\n\n            /////////////////////////////////////////////////////\n\n            function onThen(response) {\n                console.log('data in the final block', response);\n                vm.items = response;\n            }\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .controller('QuestionController', QuestionController);\n\n    QuestionController.$inject = [];\n\n    /* @ngInject */\n    function QuestionController() {\n        var vm = this;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n        }\n    }\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .constant('AppConstants', {\n            FOLDER_MIME_TYPE: 'application/vnd.google-apps.folder',\n            SPREADSHEET_MIME_TYPE: 'application/vnd.google-apps.spreadsheet',\n            DOCUMENT_MIME_TYPE: 'application/vnd.google-apps.document',\n            QUESTION_SHEET_ID: '1FqmeBTcnVTOTNeXegnXTuczrLTbqtGXh0kO5bXRej2M',\n            ROOT_FOLDER_ID: '0B7TUAIgyr7KDaUw1X0c3dDlVeEU',\n            API_KEY: 'AIzaSyAPv2lxveRF_vRWo8vLY4juoq40CvNDsTM'\n        });\n\n})(angular);\n","/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module(\n            'smartApp', [\n                'yaru22.angular-timeago',\n                'ngMaterial',\n                'ngStorage',\n                'ngMessages',\n                'ngLetterAvatar',\n                'ngSanitize',\n                'tmh.dynamicLocale',\n                'pascalprecht.translate',\n                'camelCaseToHuman',\n                'ngResource',\n                'ngCookies',\n                'ngAria',\n                'ngCacheBuster',\n                'ngFileUpload',\n                'ui.router',\n                'infinite-scroll',\n                'angular-loading-bar',\n                'oc.lazyLoad',\n                'md.data.table',\n                'ngAnimate',\n                'textAngular',\n                'ng.deviceDetector',\n                'angularLazyImg',\n                'angular-clipboard',\n                'app.layout',\n                'app.blocks',\n                'app.home',\n                'app.course',\n                'app.content',\n                'app.question'\n            ]\n        )\n        .run(run);\n\n    run.$inject = [\n        'StateHandler',\n        'TranslationHandler'\n    ];\n\n    /* @ngInject */\n    function run(StateHandler, TranslationHandler) {\n        StateHandler.initialize();\n        TranslationHandler.initialize();\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.blocks', []);\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.content', []);\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.course', []);\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.home', []);\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.layout', []);\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.question', []);\n\n})(angular);\n;\n(function (angular) {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('app.blocks')\n        .constant('VERSION', \"1.2\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', ['en']);\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .constant(\n            'TableConstants', {\n                editType: {\n                    NUMERIC: 'NUMERIC',\n                    BOOLEAN: 'BOOLEAN',\n                    TEXT: 'TEXT',\n                    ENUM: 'ENUM',\n                    CUSTOM: 'CUSTOM'\n                }\n            }\n        );\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.layout')\n        .constant(\n            'MenuIcons', {\n                ROOT: 'apps',\n                ADMIN: 'perm_data_setting',\n                ACCOUNT: 'vpn_key'\n            }\n        );\n\n})(angular);\n;\n/* Help configure the state-base ui.router */\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .provider('routerHelper', routerHelperProvider);\n\n    routerHelperProvider.$inject = [\n        '$locationProvider',\n        '$stateProvider',\n        '$urlRouterProvider'\n    ];\n    /* @ngInject */\n    function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\n        /* jshint validthis:true */\n        var config = {\n            pageTitle: undefined,\n            resolveAlways: {}\n        };\n\n        //$locationProvider.html5Mode(true);\n\n        this.configure = function (cfg) {\n            angular.extend(config, cfg);\n        };\n\n        this.$get = RouterHelper;\n\n        RouterHelper.$inject = [\n            '$location',\n            '$window',\n            '$rootScope',\n            '$state',\n            '$translate',\n            '$translatePartialLoader',\n            '$filter',\n            'Alert'\n        ];\n        /* @ngInject */\n        function RouterHelper($location, $window, $rootScope, $state, $translate, $translatePartialLoader, $filter, Alert) {\n            var handlingStateChangeError = false;\n            var hasOtherwise = false;\n            var stateCounts = {\n                errors: 0,\n                changes: 0\n            };\n\n            var service = {\n                configureStates: configureStates,\n                getStates: getStates,\n                stateCounts: stateCounts\n            };\n\n            init();\n\n            return service;\n\n            ///////////////\n\n            function configureStates(states, otherwisePath) {\n                states.forEach(forEach);\n                if (otherwisePath && !hasOtherwise) {\n                    hasOtherwise = true;\n                    $urlRouterProvider.otherwise(otherwisePath);\n                }\n\n                /////////////////////////////////////////////\n\n                function forEach(item) {\n                    item.config.resolve = angular.extend(item.config.resolve || {}, config.resolveAlways);\n                    $stateProvider.state(item.state, item.config);\n                }\n            }\n\n            function init() {\n                // Route cancellation:\n                // On routing error, go to the dashboard.\n                // Provide an exit clause if it tries to do it twice.\n                $rootScope.$on('$stateChangeError', stateChangeError);\n                $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n            }\n\n            function getStates() {\n                return $state.get();\n            }\n\n            function stateChangeError(event, toState, toParams, fromState, fromParams, error) {\n                if (handlingStateChangeError) {\n                    return;\n                }\n                stateCounts.errors++;\n                handlingStateChangeError = true;\n                var destination = (toState &&\n                    (toState.data.pageTitle || toState.name || toState.loadedTemplateUrl)) ||\n                    'unknown target';\n\n                $translatePartialLoader.addPart('global');\n                $translate.refresh().then(onRefresh);\n\n                ///////////////////////////////////////////////////////////////\n\n                function onRefresh() {\n                    $translate('global.route.failed').then(onSuccess, console.log);\n\n                    ///////////////////////////////////////////////////////////////\n\n                    function onSuccess(message) {\n                        var msg = $filter('format')(\n                            message,\n                            destination,\n                            (error.data || ''),\n                            (error.statusText || ''),\n                            (error.status || ''),\n                            (error || '')\n                        );\n                        Alert.warning(msg, [toState]);\n                        $location.path('/');\n                    }\n                }\n            }\n\n            function stateChangeSuccess(event, toState) {\n                stateCounts.changes++;\n                handlingStateChangeError = false;\n                var title = config.pageTitle + ' ' + (toState.title || '');\n                $translate(title || 'global.access.title').then(onSuccess);\n\n                ////////////////////////////////////////////////////////\n\n                function onSuccess(title) {\n                    $window.document.title = title;\n                    $rootScope.title = title;\n                }\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .provider('Alert', AlertProvider);\n\n    AlertProvider.$inject = [];\n    /* @ngInject */\n    function AlertProvider() {\n        var $this = this;\n        $this.toast = false;\n        /* jshint validthis:true */\n        $this.showAsToast = showAsToast;\n\n        $this.$get = Alert;\n\n        Alert.$inject = [\n            '$timeout',\n            '$sce',\n            '$translate',\n            '$injector'\n        ];\n        /* @ngInject */\n        function Alert($timeout, $sce, $translate, $injector) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                defaultTimeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                handleServerResponse: handleServerResponse,\n                clear: clear,\n                get: get,\n                confirm: confirm,\n                deleteConfirmation: deleteConfirmation,\n                success: success,\n                error: error,\n                info: info,\n                alreadyAdded: alreadyAdded\n            };\n\n            /////////////////////\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts.length = 0;\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function getTimeout(timeout) {\n                if (!timeout && timeout !== 0) {\n                    return defaultTimeout;\n                }\n                return timeout;\n            }\n\n            function deleteConfirmation(event, title, message, okButtonMessage, cancelButtonMessage, variable) {\n                return confirm(\n                    event,\n                    title || 'global.delete.title',\n                    message || 'global.delete.message',\n                    okButtonMessage || 'global.delete.buttons.delete',\n                    cancelButtonMessage || 'global.delete.buttons.cancel',\n                    variable\n                );\n            }\n\n            function success(msg, params, timeout, toast, usingMessageFormat) {\n                return this.add(\n                    {\n                        type: 'accent',\n                        msg: msg,\n                        params: params,\n                        usingMessageFormat: usingMessageFormat,\n                        timeout: getTimeout(timeout),\n                        toast: toast || isToast()\n                    }\n                );\n            }\n\n            function confirm(event, title, message, okButtonMessage, cancelButtonMessage, params, usingMessageFormat) {\n                var $mdDialog = $injector.get('$mdDialog');\n                var messageFormat = usingMessageFormat ? 'messageformat' : null;\n\n                var text = {\n                    title: $translate.instant(title, params || {}, messageFormat),\n                    message: $translate.instant(message, params || {}, messageFormat),\n                    okButtonMessage: $translate.instant(okButtonMessage, params || {}, messageFormat),\n                    cancelButtonMessage: $translate.instant(cancelButtonMessage, params || {}, messageFormat)\n                };\n                var confirm = $mdDialog.confirm()\n                    .title(text.title)\n                    .textContent(text.message)\n                    .ariaLabel(text.message)\n                    .targetEvent(event)\n                    .ok(text.okButtonMessage)\n                    .cancel(text.cancelButtonMessage);\n                return $mdDialog.show(confirm);\n            }\n\n            function error(msg, params, timeout, toast, usingMessageFormat) {\n                return this.add(\n                    {\n                        type: 'warn',\n                        msg: msg,\n                        params: params,\n                        usingMessageFormat: usingMessageFormat,\n                        timeout: getTimeout(timeout),\n                        toast: toast || isToast()\n                    }\n                );\n            }\n\n            function info(msg, params, timeout, toast, usingMessageFormat) {\n                return this.add(\n                    {\n                        type: 'primary',\n                        msg: msg,\n                        params: params,\n                        usingMessageFormat: usingMessageFormat,\n                        timeout: getTimeout(timeout),\n                        toast: toast || isToast()\n                    }\n                );\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if (!alert.scoped && !alreadyAdded(alert)) {\n                    alerts.push(alert);\n                }\n                //TODO: this usage is wrong, we have to fix it later...\n                return alert;\n            }\n\n            function alreadyAdded(alert) {\n                return alerts.filter(function (item) {\n                        return item.msg.toString() === alert.msg.toString()\n                    }).length > 0;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                var format = alertOptions.usingMessageFormat ? 'messageformat' : null;\n                alertOptions.alertId = alertId++;\n                if (alertOptions.toast) {\n                    var $mdToast = $injector.get('$mdToast');\n                    $mdToast.show(\n                        {\n                            templateUrl: 'app/blocks/util/directives/AlertProviderDialogTemplate.html',\n                            bindToController: true,\n                            controller: ToastController,\n                            controllerAs: 'vm',\n                            hideDelay: alertOptions.timeout,\n                            position: 'top right',\n                            locals: {\n                                content: alertOptions.msg,\n                                params: alertOptions.params,\n                                type: alertOptions.type,\n                                interpolation: format\n                            }\n                        }\n                    );\n\n                    return;\n                }\n\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params, format);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(\n                        function () {\n                            that.closeAlert(alertOptions.alertId, extAlerts);\n                        }, alertOptions.timeout\n                    );\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(\n                    thisAlerts.map(\n                        function (e) {\n                            return e.id;\n                        }\n                    ).indexOf(id), thisAlerts\n                );\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n\n            function handleServerResponse(httpResponse) {\n                var errors = [];\n                var status = Math.floor(httpResponse.status / 100);\n                var result = httpResponse.data;\n                switch (status) {\n                    // connection refused, server not reachable\n                    case 0:\n                    case -1:\n                        errors.push(\n                            {\n                                key: 'error.server.not.reachable'\n                            }\n                        );\n                        break;\n\n                    case 4:\n                        var errorHeader = httpResponse.headers('X-smartApp-error');\n                        var errorParams = httpResponse.headers('X-smartApp-params');\n                        if (errorHeader) {\n                            errors.push(\n                                {\n                                    message: errorHeader,\n                                    params: angular.fromJson(errorParams),\n                                    timeout: 3000\n                                }\n                            );\n                        } else if (result && result.fieldErrors) {\n                            for (var i = 0; i < result.fieldErrors.length; i++) {\n                                var fieldError = result.fieldErrors[i];\n                                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                                var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                                var key = fieldError.objectName + '.errors.' + ('' + fieldError.message).toLowerCase() + '.' + convertedField;\n                                errors.push(\n                                    {\n                                        message: $translate.instant(key)\n                                    }\n                                );\n                            }\n                        } else if (result && result.message) {\n                            var message = result.message;\n                            if (result.description) {\n                                message = $translate.instant(message) + \" : \" + result.description;\n                            }\n                            errors.push(\n                                {\n                                    message: message,\n                                    params: result,\n                                    timeout: 3000\n                                }\n                            );\n                        } else if (result && result.AuthenticationException) {\n                            errors.push(\n                                {\n                                    message: result.AuthenticationException\n                                }\n                            );\n                        } else {\n                            if (typeof result === 'string' && result.length === 0) {\n                                return;\n                            }\n                            errors.push(\n                                {\n                                    message: angular.fromJson(result),\n                                    timeout: 3000\n                                }\n                            );\n                        }\n                        break;\n                    case 5:\n                        var errorHeader = httpResponse.headers('X-smartApp-error');\n                        var errorParams = httpResponse.headers('X-smartApp-params');\n                        if (errorHeader) {\n                            errors.push(\n                                {\n                                    message: errorHeader,\n                                    params: angular.fromJson(errorParams)\n                                }\n                            );\n                        } else if (result && result.fieldErrors) {\n                            for (var i = 0; i < result.fieldErrors.length; i++) {\n                                var fieldError = result.fieldErrors[i];\n                                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                                var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                                var key = fieldError.objectName + '.errors.' + ('' + fieldError.message).toLowerCase() + '.' + convertedField;\n                                errors.push(\n                                    {\n                                        message: $translate.instant(key)\n                                    }\n                                );\n                            }\n                        } else if (result && result.message) {\n                            errors.push(\n                                {\n                                    message: result.message,\n                                    params: result\n                                }\n                            );\n                        } else {\n                            errors.push(\n                                {\n                                    message: result\n                                }\n                            );\n                        }\n                        break;\n\n                    default:\n                        if (result && result.message) {\n                            errors.push(\n                                {\n                                    message: result.message\n                                }\n                            );\n                        } else {\n                            errors.push(\n                                {\n                                    message: angular.toJson(result, true)\n                                }\n                            );\n                        }\n                }\n\n                return errors;\n            }\n\n        }\n\n        function showAsToast(isToast) {\n            $this.toast = isToast;\n        }\n\n        ToastController.$inject = ['$mdToast'];\n        /* @ngInject */\n        function ToastController($mdToast) {\n            var vm = this;\n\n            vm.close = close;\n\n            ////////////\n\n            function close() {\n                $mdToast.hide();\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .config(AppConfig);\n\n    AppConfig.$inject = [\n        '$mdThemingProvider',\n        'timeAgoSettings',\n        'lazyImgConfigProvider'\n    ];\n    /* @ngInject */\n    function AppConfig($mdThemingProvider, timeAgoSettings, lazyImgConfigProvider) {\n\n        lazyImgConfigProvider.setOptions({onError: onImageError});\n\n        timeAgoSettings.strings['en'] = timeAgoSettings.strings['en_US'];\n\n        // $mdIconProvider.defaultFontSet('fa'); // using awesome fonts\n        $mdThemingProvider.alwaysWatchTheme(true);\n\n        ////////////////////////////////////////////////////\n\n        function onImageError(image) {\n            var element = angular.element(image.$elem);\n            element.attr('src', 'content/images/no_image_icon_en.gif');\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(alertConfig);\n\n    alertConfig.$inject = ['AlertProvider'];\n    /* @ngInject */\n    function alertConfig(AlertProvider) {\n        // set below to true to make alerts look like toast\n        AlertProvider.showAsToast(false);\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(compileConfig);\n\n    compileConfig.$inject = [\n        '$compileProvider',\n        'DEBUG_INFO_ENABLED'\n    ];\n    /* @ngInject */\n    function compileConfig($compileProvider, DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        if (!DEBUG_INFO_ENABLED) {\n            $compileProvider.debugInfoEnabled(false);\n        }\n        /*\n         If you wish to debug an application with this information\n         then you should open up a debug console in the browser\n         then call this method directly in this console:\n\n         angular.reloadWithDebugInfo();\n         */\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(httpConfig);\n\n    httpConfig.$inject = [\n        '$urlRouterProvider',\n        '$httpProvider',\n        'httpRequestInterceptorCacheBusterProvider',\n        '$urlMatcherFactoryProvider'\n    ];\n    /* @ngInject */\n    function httpConfig($urlRouterProvider, $httpProvider,\n                        httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist(\n            [\n                /.*google.*/,\n                /.*View.html/\n            ], false\n        );\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n\n        $urlMatcherFactoryProvider.type(\n            'boolean', {\n                name: 'boolean',\n                decode: decode,\n                encode: encode,\n                equals: equals,\n                is: is,\n                pattern: /bool|true|0|1/\n            }\n        );\n\n        //////////////////////////////////////////\n\n        function decode(val) {\n            return val === true || val === 'true';\n        }\n\n        function encode(val) {\n            return val ? 1 : 0;\n        }\n\n        function equals(a, b) {\n            return this.is(a) && a === b;\n        }\n\n        function is(val) {\n            return [\n                    true,\n                    false,\n                    0,\n                    1\n                ].indexOf(val) >= 0;\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = [\n        '$localStorageProvider',\n        '$sessionStorageProvider'\n    ];\n    /* @ngInject */\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('smart-');\n        $sessionStorageProvider.setKeyPrefix('smart-');\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .config(translateConfig);\n\n    translateConfig.$inject = [\n        '$translateProvider',\n        'tmhDynamicLocaleProvider'\n    ];\n    /* @ngInject */\n    function translateConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader(\n            '$translatePartialLoader', {\n                urlTemplate: 'i18n/{lang}/{part}.json'\n            }\n        );\n\n        $translateProvider.preferredLanguage('en');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n        $translateProvider.forceAsyncReload(true);\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .run(runApp);\n\n    runApp.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runApp(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'app',\n                config: {\n                    abstract: true,\n                    data: {\n                        authorities: [],\n                        pageTitle: 'app.title'\n                    },\n                    resolve: {\n                        initialization: initialization,\n                        language: language\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('global');\n        return $translate.refresh();\n    }\n\n    initialization.$inject = [\n        '$rootScope',\n        '$state',\n        '$stateParams'\n    ];\n\n    /* @ngInject */\n    function initialization($rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.content')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'content',\n                config: {\n                    url: '/contents/{id}',\n                    parent: 'app',\n                    data: {\n                        pageTitle: 'content.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/contents/ContentView.html',\n                            controller: 'ContentController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language,\n                        id: id\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('content');\n        return $translate.refresh();\n    }\n\n    id.$inject = ['$stateParams'];\n\n    /* @ngInject */\n    function id($stateParams) {\n        return $stateParams.id;\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'course',\n                config: {\n                    url: '/courses',\n                    abstract: true,\n                    parent: 'app',\n                    data: {\n                        pageTitle: 'course.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/courses/CourseView.html',\n                            controller: 'CourseController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('course');\n        return $translate.refresh();\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'course.detail',\n                config: {\n                    url: '/{id}',\n                    data: {\n                        pageTitle: 'course.title.main'\n                    },\n                    views: {\n                        body: {\n                            templateUrl: 'app/courses/detail/CourseDetailView.html',\n                            controller: 'CourseDetailController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        model: model\n                    }\n                }\n            }\n        ];\n    }\n\n    model.$inject = [\n        '$stateParams',\n        'AppConstants',\n        'GoogleAPI'\n    ];\n\n    /* @ngInject */\n    function model($stateParams, AppConstants, GoogleAPI) {\n        if (!$stateParams.id) {\n            return null;\n        }\n\n        //list children\n        //find content\n        return GoogleAPI.items($stateParams.id, [\n            AppConstants.SPREADSHEET_MIME_TYPE,\n            AppConstants.DOCUMENT_MIME_TYPE\n        ]).then(onThen);\n\n        ///////////////////////////////////////////////\n\n        function onThen(t) {\n            // document with the name of the course is the summary\n            //sheet with the name of the course is exam\n            //sheet with the same name as document is the homework of that content.\n            t.files.forEach(onEach);\n\n            return t;\n\n            ///////////////////////////////////////////\n\n            function onEach(file) {\n                file.type = file.mimeType === AppConstants.SPREADSHEET_MIME_TYPE ? 'homework' : 'content';\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .run(runCourse);\n\n    runCourse.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runCourse(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'course.list',\n                config: {\n                    url: '',\n                    data: {\n                        authorities: [],\n                        pageTitle: 'course.title.main'\n                    },\n                    views: {\n                        body: {\n                            templateUrl: 'app/courses/list/CourseListView.html',\n                            controller: 'CourseListController',\n                            controllerAs: 'vm'\n                        }\n                    }\n                }\n            }\n        ];\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.home')\n        .run(runHome);\n\n    runHome.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runHome(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'home',\n                config: {\n                    url: '/',\n                    parent: 'app',\n                    data: {\n                        authorities: [],\n                        pageTitle: 'home.title.main',\n                        menu: {\n                            icon: 'home',\n                            text: 'global.menu.home',\n                            groupOrder: -20\n                        }\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/home/HomeView.html',\n                            controller: 'HomeController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('home');\n        return $translate.refresh();\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.layout')\n        .run(runLayout);\n\n    runLayout.$inject = ['routerHelper'];\n    /* @ngInject */\n    function runLayout(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'layout',\n                config: {\n                    url: '/layout',\n                    parent: 'app',\n                    abstract: true,\n                    data: {\n                        authorities: []\n                    }\n                }\n            },\n            {\n                state: 'layout.denied',\n                config: {\n                    url: '/error/denied',\n                    data: {\n                        pageTitle: 'layout.error.denied'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/layouts/error/AccessDeniedView.html'\n                        }\n                    }\n                }\n            },\n            {\n                state: 'layout.error',\n                config: {\n                    url: '/error',\n                    data: {\n                        pageTitle: 'layout.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/layouts/error/ErrorView.html'\n                        }\n                    }\n                }\n            }\n        ];\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .run(runQuestion);\n\n    runQuestion.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runQuestion(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'question.list',\n                config: {\n                    url: '',\n                    data: {\n                        authorities: [],\n                        pageTitle: 'question.title.main'\n                    },\n                    views: {\n                        body: {\n                            templateUrl: 'app/questions/list/QuestionListView.html',\n                            controller: 'QuestionListController',\n                            controllerAs: 'vm'\n                        }\n                    }\n                }\n            }\n        ];\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .run(runQuestion);\n\n    runQuestion.$inject = ['routerHelper'];\n\n    /* @ngInject */\n    function runQuestion(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'question',\n                config: {\n                    url: '/questions/{sheetId}',\n                    abstract: true,\n                    parent: 'app',\n                    data: {\n                        pageTitle: 'question.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/questions/QuestionView.html',\n                            controller: 'QuestionController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        language: language,\n                        sheetId: sheetId\n                    }\n                }\n            }\n        ];\n    }\n\n    language.$inject = [\n        '$translate',\n        '$translatePartialLoader'\n    ];\n\n    /* @ngInject */\n    function language($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('question');\n        return $translate.refresh();\n    }\n\n    sheetId.$inject = ['$stateParams'];\n\n    /* @ngInject */\n    function sheetId($stateParams) {\n        return $stateParams.sheetId;\n    }\n})(angular);\n;\n/*jshint bitwise: false*/\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('Base64', Base64Service);\n\n    Base64Service.$inject = [];\n    /* @ngInject */\n    function Base64Service() {\n        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n            'abcdefghijklmnopqrstuvwxyz' +\n            '0123456789+/=';\n        this.encode = encode;\n        this.decode = decode;\n\n        ////////////////\n\n        function encode(input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode(input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('CrudUtils', CrudUtilsService);\n\n    CrudUtilsService.$inject = ['DateUtils'];\n    /* @ngInject */\n    function CrudUtilsService(DateUtils) {\n        this.getAll = getAll;\n        this.transformResponse = transformResponse;\n        this.transformRequest = transformRequest;\n\n        /////////////////////////////////////\n\n        function transformResponse(data) {\n            return DateUtils.fromServer(data);\n        }\n\n        function transformRequest(data) {\n            return DateUtils.toServer(data);\n        }\n\n        function getAll() {\n            return angular.extend(\n                {}, {\n                    query: {\n                        method: 'GET',\n                        isArray: true,\n                        transformResponse: DateUtils.fromServer\n                    },\n                    get: {\n                        method: 'GET',\n                        transformResponse: DateUtils.fromServer\n                    },\n                    update: {\n                        method: 'PUT',\n                        transformRequest: DateUtils.toServer,\n                        transformResponse: DateUtils.fromServer\n                    },\n                    save: {\n                        method: 'POST',\n                        transformRequest: DateUtils.toServer,\n                        transformResponse: DateUtils.fromServer\n                    },\n                    delete: {method: 'DELETE'}\n                }\n            );\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular.module('app.blocks')\n        .service('CustomEditDialog', CustomEditDialogService)\n        .controller('CustomEditDialogController', CustomEditDialogController);\n\n    CustomEditDialogService.$inject = [\n        '$document',\n        '$mdEditDialog'\n    ];\n    /* @ngInject */\n    function CustomEditDialogService($document, $mdEditDialog) {\n        var ESCAPE = 27;\n        var body = angular.element($document.prop('body'));\n\n        this.showDialog = showDialog;\n\n        function showDialog(options) {\n            options = angular.extend({}, options, build('small', options));\n            var promise = $mdEditDialog.show(options);\n            promise.then(onThen);\n\n            ////////////////////////////////////////////////////////\n\n            function onThen(ctrl) {\n                var backdrop = angular.element('body').find('md-backdrop.md-edit-dialog-backdrop');\n                if (options.clickOutsideToClose) {\n                    clickOutsideToClose(backdrop, ctrl.getElement(), ctrl.getInput(), options.afterOutsideToClose);\n                }\n                escToClose(ctrl.getElement(), ctrl.getInput(), options.afterEscToClose);\n\n\n                ////////////////////////////////////////////////////////\n\n                function clickOutsideToClose(backdrop, element, input, afterClose) {\n                    backdrop.on('click', onClick);\n\n                    ///////////////////////////////////////////////\n\n                    function onClick() {\n                        element.remove();\n                        if (angular.isFunction(afterClose)) {\n                            afterClose(input.$modelValue);\n                        }\n                    }\n                }\n\n                function escToClose(element, input, onClose) {\n                    var keyup = onKeyUp;\n\n                    body.on('keyup', keyup);\n\n                    element.on('$destroy', onDestroy);\n\n                    ////////////////////////////////////////////////////\n\n                    function onKeyUp(event) {\n                        if (event.keyCode === ESCAPE) {\n                            element.remove();\n                            if (angular.isFunction(onClose)) {\n                                onClose(input.$modelValue);\n                            }\n                        }\n                    }\n\n                    function onDestroy() {\n                        body.off('keyup', keyup);\n                    }\n                }\n            }\n\n            function build(size, options) {\n                return {\n                    bindToController: true,\n                    controller: 'CustomEditDialogController',\n                    controllerAs: 'vm',\n                    escToClose: true,\n                    clickOutsideToClose: true,\n                    focusOnOpen: true,\n                    locals: {\n                        save: options.save\n                    },\n                    scope: {\n                        cancel: options.cancel || 'global.cancel',\n                        messages: options.messages,\n                        model: options.modelValue,\n                        getType: getType,\n                        ok: options.ok || 'global.save',\n                        placeholder: options.placeholder,\n                        title: options.title,\n                        size: size\n                    },\n                    templateUrl: 'app/blocks/util/services/CustomEditDialogView.html'\n                };\n\n                ////////////////////////////////////////////////\n\n                function getType() {\n                    var type = (\"\" + options.type).toLowerCase();\n                    if (type === 'boolean') {\n                        return 'checkbox';\n                    }\n                    return 'text';\n                }\n            }\n        }\n    }\n\n    CustomEditDialogController.$inject = [\n        '$scope',\n        '$element',\n        '$q',\n        'save'\n    ];\n    /* @ngInject */\n    function CustomEditDialogController($scope, $element, $q, save) {\n        var vm = this;\n\n        vm.dismiss = dismiss;\n        vm.getInput = getInput;\n        vm.getElement = getElement;\n\n        $scope.submit = submit;\n\n        //////////////////////////////////////////////\n\n        function submit() {\n            update().then(vm.dismiss);\n\n            //////////////////////////////////////////\n\n            function update() {\n                if ($scope.editDialog.$invalid) {\n                    return $q.reject();\n                }\n\n                if (angular.isFunction(save)) {\n                    return $q.when(save($scope.editDialog.input));\n                }\n\n                return $q.resolve();\n            }\n        }\n\n        function dismiss() {\n            $element.remove();\n        }\n\n        function getElement() {\n            return $element;\n        }\n\n        function getInput() {\n            return $scope.editDialog.input;\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('CustomTableUtil', CustomTableUtilService);\n\n    CustomTableUtilService.$inject = [];\n    /* @ngInject */\n    function CustomTableUtilService() {\n        this.convertOrderToColumnAndOrder = convertOrderToColumnAndOrder;\n        this.getValue = getValue;\n        this.getFieldValue = getFieldValue;\n        this.setValue = setValue;\n\n        ////////////////\n\n        function convertOrderToColumnAndOrder(order) {\n            if (!order) {\n                return order;\n            }\n            var sortOrder = order.charAt(0) === '-' ? 'desc' : 'asc';\n            var sortColumn = order.charAt(0) === '-' ? order.substr(1) : order;\n            return {\n                column: sortColumn,\n                order: sortOrder\n            };\n        }\n\n        function setValue(model, fieldName, value) {\n            fieldName = fieldName.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n            fieldName = fieldName.replace(/^\\./, '');           // strip a leading dot\n            var a = fieldName.split('.');\n            for (var i = 0, n = a.length; i < n; ++i) {\n                var k = a[i];\n                if (i === n - 1) {\n                    model[k] = value;\n                    return true;\n                }\n                if (!model) {\n                    model = {};\n                }\n                if (k in model) {\n                    model = model[k];\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        }\n\n        function getValue(model, fieldName) {\n            //field name is not set then i can't get value\n            if (!fieldName) {\n                return null;\n            }\n            if (!fieldName) {\n                return null;\n            }\n            fieldName = fieldName.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n            fieldName = fieldName.replace(/^\\./, '');           // strip a leading dot\n            var a = fieldName.split('.');\n            for (var i = 0, n = a.length; i < n; ++i) {\n                if (!model) {\n                    return null;\n                }\n                var k = a[i];\n                if (k in model) {\n                    model = model[k];\n                } else {\n                    return;\n                }\n            }\n            return model;\n        }\n\n        function getFieldValue(model, header) {\n            if (angular.isObject(header) && angular.isFunction(header.get)) {\n                return header.get(model);\n            }\n\n            return getValue(model, header.field);\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('DataUtils', DataUtilsService);\n\n    DataUtilsService.$inject = ['$window'];\n    /* @ngInject */\n    function DataUtilsService($window) {\n        this.abbreviate = abbreviate;\n        this.byteSize = byteSize;\n        this.openFile = openFile;\n        this.toBase64 = toBase64;\n\n        /////////////////////////////////////////////\n\n        function abbreviate(text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize(base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile(type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64(file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = onLoad;\n\n            //////////////////////////////////////////////////\n\n            function onLoad(e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n *\n * Convert Date Fields into Date Objects\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('DateUtils', DateUtilsService);\n\n    DateUtilsService.$inject = ['$filter'];\n    /* @ngInject */\n    function DateUtilsService($filter) {\n        this.convertLocalDateToServer = convertLocalDateToServer;\n        this.convertLocalDateFromServer = convertLocalDateFromServer;\n        this.convertDateTimeFromServer = convertDateTimeFromServer;\n        this.formatWithoutSeconds = formatWithoutSeconds;\n        this.formatShort = formatShort;\n        this.format = format;\n        this.fromServer = fromServer;\n        this.toServer = toServer;\n        this.pureData = pureData;\n        this.getFormattedDate = getFormattedDate;\n        // common date format for all date input fields\n        this.dateformat = format;\n\n        ///////////////////////////////////////////////////\n\n        function convertLocalDateToServer(date) {\n            if (date) {\n                return $filter('date')(date, serverFormat(), 'UTC');\n            } else {\n                return null;\n            }\n        }\n\n        function getFormattedDate(date, dateFormat) {\n            if (date) {\n                return angular.isUndefined(dateFormat) ? $filter('date')(date, format()) : $filter('date')(date, dateFormat);\n            }\n            return null;\n        }\n\n        function convertLocalDateFromServer(date, format) {\n            if (date) {\n                var dateLongValue = Date.parse(date);\n                return getFormattedDate(dateLongValue, format);\n            }\n            return null;\n        }\n\n        function convertStringDateToServer(date) {\n            if (date) {\n                var dateLongValue = Date.parse(date);\n                return getFormattedDate(dateLongValue, serverFormat());\n            }\n            return null;\n        }\n\n        function convertDateTimeFromServer(date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function changeDate(item, fields) {\n            if (item.modifiedAt) {\n                item.untouchedModifiedAt = item.modifiedAt;\n                item.modifiedAt = convertLocalDateFromServer(item.modifiedAt);\n            }\n\n            if (item.createdAt) {\n                item.untouchedCreatedAt = item.createdAt;\n                item.createdAt = convertLocalDateFromServer(item.createdAt);\n            }\n\n            if (angular.isArray(fields)) {\n                angular.forEach(fields, iterateField);\n            }\n\n            //////////////////////////////////////////////////\n\n            function iterateField(row) {\n                if (item[row]) {\n                    item[row + 'Touched'] = convertLocalDateFromServer(item[row]);\n                }\n            }\n        }\n\n        function changeToServerDate(item, fields) {\n            if (item.modifiedAt) {\n                if (angular.isString(item.modifiedAt)) {\n                    item.modifiedAt = convertStringDateToServer(item.modifiedAt);\n                } else {\n                    item.modifiedAt = convertLocalDateToServer(item.modifiedAt);\n                }\n            }\n\n            if (item.createdAt) {\n                if (angular.isString(item.createdAt)) {\n                    item.createdAt = convertStringDateToServer(item.createdAt);\n                } else {\n                    item.createdAt = convertLocalDateToServer(item.createdAt);\n                }\n            }\n\n            if (angular.isArray(fields)) {\n                angular.forEach(fields, iterateField);\n            }\n\n            //////////////////////////////////////////////////\n\n            function iterateField(row) {\n                var value = item[row];\n                if (value) {\n                    if (angular.isString(value)) {\n                        value = convertStringDateToServer(value);\n                    } else {\n                        value = convertLocalDateToServer(value);\n                    }\n\n                    item[row] = value;\n                }\n            }\n        }\n\n        function pureData(data) {\n            return angular.fromJson(angular.toJson(data));\n        }\n\n        function fromServer(data, fields) {\n            if (!data) {\n                return {};\n            }\n\n            data = angular.fromJson(data);\n\n            return searchForAllDates(data, false, fields);\n        }\n\n        function toServer(data, fields) {\n            if (!data) {\n                return '';\n            }\n            data = searchForAllDates(data, true, fields);\n            return angular.toJson(data);\n        }\n\n        function removeAngularObjects(data) {\n            return angular.fromJson(angular.toJson(data));\n        }\n\n        function searchForAllDates(data, toServer, fields) {\n            if (angular.isObject(data)) {\n                if (toServer) {\n                    data=removeAngularObjects(data);\n                    changeToServerDate(data, fields);\n                } else {\n                    changeDate(data, fields);\n                }\n                angular.forEach(data, onIterate);\n            }\n            return data;\n\n            /////////////////////////////////////////\n\n            function onIterate(item) {\n                searchForAllDates(item, toServer, fields);\n            }\n        }\n\n        function formatWithoutSeconds() {\n            return 'EEEE, dd LLLL yyyy, HH:mm';\n        }\n\n        function formatShort() {\n            return 'yyyy.MM.dd HH:mm';\n        }\n\n        function format() {\n            return 'EEEE, dd LLLL yyyy, HH:mm:ss';\n        }\n\n        function serverFormat() {\n            return \"yyyy-MM-dd'T'HH:mm:ss.sss'Z'\"\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('HtmlTagUtil', HtmlTagUtilService);\n\n    HtmlTagUtilService.$inject = [];\n    /* @ngInject */\n    function HtmlTagUtilService() {\n        this.escapeTags = escapeTags;\n\n        ////////////////\n\n        function escapeTags(stringWithTags) {\n            return stringWithTags\n                .replace(/<\\/?(b|i|em|strong|span|u|strikethrough|a|img|small|sub|sup|label)( [^>*?])?>/gi, '') // remove inline tags without adding spaces\n                .replace(/(<[^>]*?>\\s*<[^>]*?>)/ig, ' ') // replace adjacent tags with possible space between with a space\n                .replace(/(<[^>]*?>)/ig, '') // remove any singular tags\n                .replace(/\\s+/ig, ' ');// condense spacing\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('ResponseUtil', ResponseUtilService);\n\n    ResponseUtilService.$inject = [];\n    /* @ngInject */\n    function ResponseUtilService() {\n        this.parseLink = parseLink;\n        this.buildSort = buildSort;\n\n        ////////////////\n\n        function parseLink(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, partsFunc);\n\n            return links;\n\n            function partsFunc(p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function ($0, $1, $2, $3) {\n                        queryString[$1] = $3;\n                    }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            }\n        }\n\n        function buildSort(orderBy) {\n            if (orderBy && angular.isString(orderBy)) {\n                var predicate = orderBy;\n                var reverse = false;\n                if (orderBy.indexOf('-') !== -1) {\n                    predicate = orderBy.split('-')[1];\n                    reverse = true;\n                }\n\n                return [predicate + ',' + (reverse ? 'asc' : 'desc')];\n            }\n\n            return [];\n        }\n\n    }\n\n})(angular);\n;\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('RichTextEditDialog', RichTextEditDialogService)\n        .controller('RichTextEditDialogController', RichTextEditDialogController);\n\n    RichTextEditDialogService.$inject = ['$rootScope', '$mdDialog'];\n    /* @ngInject */\n    function RichTextEditDialogService($rootScope, $mdDialog) {\n        this.showDialog = showDialog;\n\n        ////////////////\n\n        function showDialog(options) {\n            options = angular.extend({}, options, build(options));\n            var promise = $mdDialog.show(options);\n            promise.finally(function(text) {\n                //if anything to make after promise is resolved\n\n            });\n        }\n\n        function build(options) {\n            var textEditDialogScope = $rootScope.$new(true);\n            textEditDialogScope.model = options.modelValue;\n            textEditDialogScope.title = options.title;\n            return {\n                bindToController: true,\n                controller: 'RichTextEditDialogController',\n                controllerAs: 'vm',\n                escapeToClose: false,\n                clickOutsideToClose: true,\n                focusOnOpen: true,\n                templateUrl: 'app/blocks/util/services/RichTextEditDialogView.html',\n                locals: {\n                    onSave: options.onSave\n                },\n                scope: textEditDialogScope\n            }\n        }\n    }\n\n    RichTextEditDialogController.$inject = ['$scope', '$mdDialog', '$q', 'onSave'];\n    /* @ngInject */\n    function RichTextEditDialogController($scope, $mdDialog, $q, onSave) {\n        var vm = this;\n\n        vm.model = $scope.model;\n        vm.title = $scope.title;\n        vm.dismiss = dismiss;\n        vm.save = save;\n        vm.resolvedWithSave = false;\n\n        activate();\n\n        function activate() {\n            //on any close try to save\n            $scope.$on('$destroy', function() {\n                if(angular.isFunction(onSave) && !vm.resolvedWithSave) {\n                    onSave(vm.model);\n                }\n            });\n        }\n\n        function update() {\n            if(angular.isFunction(onSave)) {\n                vm.resolvedWithSave = true;\n                return $q.when(onSave(vm.model));\n            }\n            return $q.resolve();\n        }\n\n        function dismiss() {\n            $mdDialog.hide();\n        }\n\n        function save() {\n            update().then(function () {\n                vm.dismiss();\n            });\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('SidenavUtil', SidenavUtilService);\n\n    SidenavUtilService.$inject = ['$rootScope', '$q', '$mdSidenav', '$mdCompiler'];\n    /* @ngInject */\n    function SidenavUtilService($rootScope, $q, $mdSidenav, $mdCompiler) {\n        var deferred = null;\n        this.show = show;\n        this.cancel = cancel;\n        this.hide = hide;\n\n        ////////////////\n\n        function show(componentId, options) {\n            if ($mdSidenav(componentId).isOpen()) {\n                return deferred.promise;\n            }\n            deferred = $q.defer();\n\n            deferred.componentId = componentId;\n            $mdCompiler.compile(options).then(function (compiledData) {\n                var sideNav = angular.element(document.getElementById(componentId));\n                sideNav.html(compiledData.link($rootScope.$new(true)));\n                //sideNav.css(\"z-index\",1000);\n                $mdSidenav(componentId).open();\n            });\n\n            return deferred.promise;\n        }\n\n        function hide(response) {\n            if (deferred) {\n                deferred.resolve(response);\n            }\n\n            $mdSidenav(deferred.componentId).close();\n        }\n\n        function cancel(error) {\n            if (deferred) {\n                deferred.reject(error);\n            }\n\n            $mdSidenav(deferred.componentId).close();\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('StorageUtil', StorageUtilService);\n\n    StorageUtilService.$inject = ['$window'];\n    /* @ngInject */\n    function StorageUtilService($window) {\n        this.get = get;\n        this.save = save;\n        this.remove = remove;\n        this.clearAll = clearAll;\n\n        ////////////////\n\n        function get(key) {\n            return JSON.parse($window.localStorage.getItem(key));\n        }\n\n        function save(key, data) {\n            $window.localStorage.setItem(key, JSON.stringify(data));\n        }\n\n        function remove(key) {\n            $window.localStorage.removeItem(key);\n        }\n\n        function clearAll() {\n            $window.localStorage.clear();\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('StringUtil', StringUtilService);\n\n    StringUtilService.$inject = [];\n    /* @ngInject */\n    function StringUtilService() {\n        this.limitTo = limitTo;\n        this.normalize = normalize;\n\n        ////////////////////////////////////////////////////\n\n        function limitTo(string, size) {\n            if (!string) {\n                return string;\n            }\n            if (string.length <= size) {\n                return string;\n            }\n            var dots = \"...\";\n            string = string.substr(0, size);\n            var atWordEnd = string[size - dots.length] === ' ';\n            if (atWordEnd) {\n                return string.substr(0, size - dots.length) + dots;\n            }\n            return string.substr(0, string.lastIndexOf(\" \") + 1) + dots;\n        }\n\n        function normalize(value) {\n            if (!angular.isString(value)) {\n                return value;\n            }\n            var charMap = {\n                'À': 'A',\n                'Á': 'A',\n                'Â': 'A',\n                'Ã': 'A',\n                'Ä': 'A',\n                'Å': 'A',\n                'Æ': 'AE',\n                'È': 'E',\n                'É': 'E',\n                'Ê': 'E',\n                'Ë': 'E',\n                'Ì': 'I',\n                'Í': 'I',\n                'Î': 'I',\n                'Ï': 'I',\n                'Ð': 'D',\n                'Ñ': 'N',\n                'Ò': 'O',\n                'Ô': 'O',\n                'Õ': 'O',\n                'Ő': 'O',\n                'Ø': 'O',\n                'Ù': 'U',\n                'Ú': 'U',\n                'Û': 'U',\n                'Ű': 'U',\n                'Ý': 'Y',\n                'Þ': 'TH',\n                'ß': 'ss',\n                'à': 'a',\n                'á': 'a',\n                'â': 'a',\n                'ã': 'a',\n                'ä': 'a',\n                'å': 'a',\n                'æ': 'ae',\n                'è': 'e',\n                'é': 'e',\n                'ê': 'e',\n                'ë': 'e',\n                'ì': 'i',\n                'í': 'i',\n                'î': 'i',\n                'ï': 'i',\n                'ð': 'd',\n                'ñ': 'n',\n                'ò': 'o',\n                'ô': 'o',\n                'õ': 'o',\n                'ő': 'o',\n                'ø': 'o',\n                'ù': 'u',\n                'ú': 'u',\n                'û': 'u',\n                'ű': 'u',\n                'ý': 'y',\n                'þ': 'th',\n                'ÿ': 'y',\n\n                '©': '(c)',\n\n                'Α': 'A',\n                'Β': 'B',\n                'Γ': 'G',\n                'Δ': 'D',\n                'Ε': 'E',\n                'Ζ': 'Z',\n                'Η': 'H',\n                'Θ': '8',\n                'Ι': 'I',\n                'Κ': 'K',\n                'Λ': 'L',\n                'Μ': 'M',\n                'Ν': 'N',\n                'Ξ': '3',\n                'Ο': 'O',\n                'Π': 'P',\n                'Ρ': 'R',\n                'Σ': 'S',\n                'Τ': 'T',\n                'Υ': 'Y',\n                'Φ': 'F',\n                'Χ': 'X',\n                'Ψ': 'PS',\n                'Ω': 'W',\n                'Ά': 'A',\n                'Έ': 'E',\n                'Ί': 'I',\n                'Ό': 'O',\n                'Ύ': 'Y',\n                'Ή': 'H',\n                'Ώ': 'W',\n                'Ϊ': 'I',\n                'Ϋ': 'Y',\n                'α': 'a',\n                'β': 'b',\n                'γ': 'g',\n                'δ': 'd',\n                'ε': 'e',\n                'ζ': 'z',\n                'η': 'h',\n                'θ': '8',\n                'ι': 'i',\n                'κ': 'k',\n                'λ': 'l',\n                'μ': 'm',\n                'ν': 'n',\n                'ξ': '3',\n                'ο': 'o',\n                'π': 'p',\n                'ρ': 'r',\n                'σ': 's',\n                'τ': 't',\n                'υ': 'y',\n                'φ': 'f',\n                'χ': 'x',\n                'ψ': 'ps',\n                'ω': 'w',\n                'ά': 'a',\n                'έ': 'e',\n                'ί': 'i',\n                'ό': 'o',\n                'ύ': 'y',\n                'ή': 'h',\n                'ώ': 'w',\n                'ς': 's',\n                'ϊ': 'i',\n                'ΰ': 'y',\n                'ϋ': 'y',\n                'ΐ': 'i',\n\n                'Ş': 'S',\n                'İ': 'I',\n                'Ç': 'C',\n                'Ü': 'U',\n                'Ö': 'O',\n                'Ğ': 'G',\n                'ş': 's',\n                'ı': 'i',\n                'ç': 'c',\n                'ü': 'u',\n                'ö': 'o',\n                'ğ': 'g',\n\n                'А': 'A',\n                'Б': 'B',\n                'В': 'V',\n                'Г': 'G',\n                'Д': 'D',\n                'Е': 'E',\n                'Ё': 'Yo',\n                'Ж': 'Zh',\n                'З': 'Z',\n                'И': 'I',\n                'Й': 'J',\n                'К': 'K',\n                'Л': 'L',\n                'М': 'M',\n                'Н': 'N',\n                'О': 'O',\n                'П': 'P',\n                'Р': 'R',\n                'С': 'S',\n                'Т': 'T',\n                'У': 'U',\n                'Ф': 'F',\n                'Х': 'H',\n                'Ц': 'C',\n                'Ч': 'Ch',\n                'Ш': 'Sh',\n                'Щ': 'Sh',\n                'Ъ': '',\n                'Ы': 'Y',\n                'Ь': '',\n                'Э': 'E',\n                'Ю': 'Yu',\n                'Я': 'Ya',\n                'а': 'a',\n                'б': 'b',\n                'в': 'v',\n                'г': 'g',\n                'д': 'd',\n                'е': 'e',\n                'ё': 'yo',\n                'ж': 'zh',\n                'з': 'z',\n                'и': 'i',\n                'й': 'j',\n                'к': 'k',\n                'л': 'l',\n                'м': 'm',\n                'н': 'n',\n                'о': 'o',\n                'п': 'p',\n                'р': 'r',\n                'с': 's',\n                'т': 't',\n                'у': 'u',\n                'ф': 'f',\n                'х': 'h',\n                'ц': 'c',\n                'ч': 'ch',\n                'ш': 'sh',\n                'щ': 'sh',\n                'ъ': '',\n                'ы': 'y',\n                'ь': '',\n                'э': 'e',\n                'ю': 'yu',\n                'я': 'ya',\n\n                'Є': 'Ye',\n                'І': 'I',\n                'Ї': 'Yi',\n                'Ґ': 'G',\n                'є': 'ye',\n                'і': 'i',\n                'ї': 'yi',\n                'ґ': 'g',\n\n                'Ď': 'D',\n                'Ě': 'E',\n                'Ň': 'N',\n                'Ř': 'R',\n                'Ť': 'T',\n                'Ů': 'U',\n                'ď': 'd',\n                'ě': 'e',\n                'ň': 'n',\n                'ř': 'r',\n                'ť': 't',\n                'ů': 'u',\n\n                'Ą': 'A',\n                'Ć': 'C',\n                'Ę': 'e',\n                'Ł': 'L',\n                'Ń': 'N',\n                'Ó': 'o',\n                'Ś': 'S',\n                'Ź': 'Z',\n                'Ż': 'Z',\n                'ą': 'a',\n                'ć': 'c',\n                'ę': 'e',\n                'ł': 'l',\n                'ń': 'n',\n                'ó': 'o',\n                'ś': 's',\n                'ź': 'z',\n                'ż': 'z',\n\n                'Ā': 'A',\n                'Č': 'C',\n                'Ē': 'E',\n                'Ģ': 'G',\n                'Ī': 'i',\n                'Ķ': 'k',\n                'Ļ': 'L',\n                'Ņ': 'N',\n                'Š': 'S',\n                'Ū': 'u',\n                'Ž': 'Z',\n                'ā': 'a',\n                'č': 'c',\n                'ē': 'e',\n                'ģ': 'g',\n                'ī': 'i',\n                'ķ': 'k',\n                'ļ': 'l',\n                'ņ': 'n',\n                'š': 's',\n                'ū': 'u',\n                'ž': 'z'\n            };\n\n            angular.forEach(charMap, iterate);\n\n            value = value.replace(/[^a-z0-9]+/ig, '-');\n            value = value.replace(/[-]{2,}/g, '-');\n            value = value.replace(/(^-|-$)/g, '');\n\n            return value.toLowerCase();\n\n            ///////////////////////////////////////////////////\n\n            function iterate(item, key) {\n                value = value.replace(new RegExp(key, 'g'), item);\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('translationStorageProvider', translationStorageProviderFactory);\n\n    translationStorageProviderFactory.$inject = [\n        '$cookies',\n        '$log',\n        'LANGUAGES'\n    ];\n    /* @ngInject */\n    function translationStorageProviderFactory($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        ////////////////\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language' + ' \"en\"');\n                $cookies.putObject(name, 'en');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('Language', LanguageFactory);\n\n    LanguageFactory.$inject = [\n        '$q',\n        '$translate',\n        'LANGUAGES'\n    ];\n    /* @ngInject */\n    function LanguageFactory($q, $translate, LANGUAGES) {\n        return {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        ////////////////////////\n\n        function getAll() {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent() {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .factory('GoogleAPI', GoogleAPIFactory);\n\n    GoogleAPIFactory.$inject = [\n        '$http',\n        'AppConstants'\n    ];\n\n    /* @ngInject */\n    function GoogleAPIFactory($http, AppConstants) {\n        return {\n            items: listItems,\n            questions: getQuestions\n        };\n\n        ///////////////////////////////////////////////////\n\n        function getQuestions(sheetId) {\n            return $http({\n                method: 'GET',\n                url: 'https://sheets.googleapis.com/v4/spreadsheets/' + sheetId + '/values/A:B?key=' + AppConstants.API_KEY\n            }).then(successCallback, errorCallback);\n\n            ////////////////////////////////////////\n\n            function errorCallback(response) {\n                // called asynchronously if an error occurs\n                // or server returns response with an error status.\n                console.log('error in getting questions', response);\n                return response;\n            }\n\n            function successCallback(response) {\n                // this callback will be called asynchronously\n                // when the response is available\n                console.log('success in getting questions');\n\n                return response.data.values.map(onMap);\n\n                //////////////////////////////////////////////////\n\n                function onMap(qArray) {\n                    var questionTitle = qArray[0];\n                    var optionsStr = qArray[1];\n                    var questionType = 'checkbox';\n                    var numOfAnswers = (optionsStr.match(/[A]/g) || []).length;\n\n                    if (numOfAnswers === 0) {\n                        questionType = 'text'\n                    } else if (numOfAnswers === 1) {\n                        questionType = 'radio'\n                    } else {\n                        questionType = 'checkbox'\n                    }\n\n                    var answers = optionsStr.split('\\n').map(onSplitMap);\n\n                    return {\n                        type: questionType,\n                        name: questionTitle,\n                        answers: answers\n                    };\n\n                    ///////////////////////////////////////////\n\n                    function onSplitMap(option) {\n                        var isAnswer = false;\n                        if (option.startsWith('[A]')) {\n                            isAnswer = true;\n                        }\n\n                        var answer = option.replace('[A]', '');\n                        return {\n                            name: answer,\n                            answer: isAnswer\n                        }\n                    }\n                }\n            }\n        }\n\n        function listItems(rootId, mimeTypes) {\n            var q = '\\'' + rootId + '\\' in parents';\n            if (mimeTypes !== undefined) {\n                var mimeTypeQueries = mimeTypes.map(onMap).join(' or ');\n                q += ' and (' + mimeTypeQueries + ')';\n            }\n\n            return $http({\n                method: 'GET',\n                url: 'https://www.googleapis.com/drive/v3/files?q=' + q + '&key=' + AppConstants.API_KEY\n            }).then(successCallback, errorCallback);\n\n            /////////////////////////////////////////////\n\n            function onMap(mimeType) {\n                return ' mimeType = \\'' + mimeType + '\\'';\n            }\n\n            function successCallback(response) {\n                // this callback will be called asynchronously\n                // when the response is available\n                console.log('success in getting courses');\n\n                return response.data;\n            }\n\n            function errorCallback(response) {\n                // called asynchronously if an error occurs\n                // or server returns response with an error status.\n                console.log('error in getting courses', response);\n                return response;\n            }\n        }\n\n    }\n\n})(angular);\n\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        ////////////////////\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'fa': 'پارسی',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('buttons', ButtonsFilter);\n\n    ButtonsFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function ButtonsFilter($filter) {\n        return buttons;\n\n        ////////////////\n\n        function buttons(input, params) {\n            var format = $filter('format');\n            var output = '';\n            var container = '<div flex layout-align=\"start center\" layout=\"row\">{0}</div>';\n            var button = '<md-button ng-attr-ng-click=\"{0}\" class=\"no-margin {1}\"><span translate>{2}</span></md-button>';\n\n            angular.forEach(\n                params, function (item) {\n                    var cls = (item.value === input) ? item.activeCls : '';// check if it's selected or not\n                    cls += ' ' + (item.class ? item.class : '');\n                    output += format(button, item.click ? item.click.replace(/\"/g, '\\'') : '', cls.replace(/\"/g, '\\''), item.text);\n                }\n            );\n\n            return format(container, output);\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('icon', IconFilter);\n\n    IconFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function IconFilter($filter) {\n        return icon;\n\n        ///////////////////////////////////////////////////\n\n        function icon(input, params) {\n            var format = $filter('format');\n            var output = '';\n            var icon = '<md-icon>{0}</md-icon>';\n\n            if (angular.isArray(input)) {\n                angular.forEach(input, forEach);\n            } else {\n                output = format(icon, (params[input] ? params[input] : params['default']));\n            }\n\n            return output;\n\n            ////////////////////////////////////////////////////////////////\n\n            function forEach(item) {\n                output += format(icon, (params[item] ? params[item] : params['default']));\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('localeOrderBy', LocaleOrderBy);\n\n    LocaleOrderBy.$inject = [];\n    /* @ngInject */\n    function LocaleOrderBy() {\n        return compare;\n\n        ///////////////////////////////////////////\n\n        function compare(items, field) {\n            var filtered = [];\n\n            angular.forEach(items, onPush);\n\n            filtered.sort(onSort);\n\n            return filtered;\n\n            function onSort(a, b) {\n                var aa = a[field].toLocaleLowerCase();\n                var bb = b[field].toLocaleLowerCase();\n                return aa.localeCompare(bb)\n            }\n\n            function onPush(item) {\n                filtered.push(item);\n            }\n\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('object', ObjectFilter)\n        .filter('showObject', ShowObjectFilter);\n\n    function ObjectFilter() {\n        return objectFilter;\n\n        ////////////////\n\n        function objectFilter(input, path, asArray) {\n            if (angular.isString(path)) {\n                path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n                path = path.replace(/^\\./, '');           // strip a leading dot\n                var pathArr = path.split('.');\n                var value = angular.extend({}, input);\n                angular.forEach(\n                    pathArr, function (item) {\n                        try {\n\n                            var val = asArray ? [] : '';\n                            if (angular.isArray(value)) {\n                                angular.forEach(\n                                    value, function (current, index) {\n                                        if (asArray) {\n                                            val.push(current[item]);\n                                        } else {\n                                            val += current[item] + (index < value.length - 1 ? ',' : '');\n                                        }\n                                    }\n                                );\n                            } else {\n                                var current = value[item];\n                                if (asArray && !angular.isArray(current)) {\n                                    val = [current];\n                                } else {\n                                    val = current;\n                                }\n                            }\n\n                            value = val;\n                        } catch (e) {\n                            if (asArray) {\n                                value = [];\n                            } else {\n                                value = '';\n                            }\n                        }\n                    }\n                );\n            }\n            return value;\n        }\n    }\n\n    ShowObjectFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function ShowObjectFilter($filter) {\n        return showObject;\n\n        ////////////////\n\n        function showObject(input, layout) {\n            var format = $filter('format');\n            var output = '';\n            var container = '<div class=\"configuration\" layout=\"{1}\" layout-align=\"center start\">{0}</div>';\n            var data = '<div class=\"md-list-item-text\" layout=\"row\" layout-align=\"{2}\"><strong>{0}:</strong><div layout-margin>{1}</div></div>';\n\n            if (angular.isObject(input)) {\n                angular.forEach(\n                    input, function (value, key) {\n                        if (angular.isObject(value)) {\n                            output += format(data, key, showObject(angular.extend({}, value, 'start start'), 'column'));\n                        } else {\n                            output += format(data, key, value, 'center center');\n                        }\n                    }\n                );\n            }\n\n            return format(container, output, (layout ? layout : 'column'));\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .filter('format', FormatFilter)\n        .filter('capitalize', CapitalizeFilter)\n        .filter('characters', CharactersFilter)\n        .filter('words', WordsFilter)\n        .filter('split', SplitFilter)\n        .filter('yesNo', YesNoFilter)\n        .filter('join', JoinFilter)\n        .filter('normalizeSlugUrl', NormalizeSlugUrlFilter)\n        .filter('prettify', PrettifyFilter);\n\n    FormatFilter.$inject = [];\n    /* @ngInject */\n    function FormatFilter() {\n        return formatFilter;\n\n        ////////////////\n\n        function formatFilter(input) {\n            // The string containing the format items (e.g. \"{0}\")\n            // will and always has to be the first argument.\n            var theString = input;\n\n            // start with the second argument (i = 1)\n            for (var i = 1; i < arguments.length; i++) {\n                // \"gm\" = RegEx options for Global search (more than one instance)\n                // and for Multiline search\n                var regEx = new RegExp('\\\\{' + (i - 1) + '\\\\}', 'gm');\n                theString = theString.replace(regEx, arguments[i]);\n            }\n\n            return theString;\n        }\n    }\n\n    CapitalizeFilter.$inject = [];\n    /* @ngInject */\n    function CapitalizeFilter() {\n        return capitalizeFilter;\n\n        ////////////////\n\n        function capitalizeFilter(input) {\n            return (input + '').replace(\n                /^([a-z])|\\s+([a-z])/g, function ($1) {\n                    return $1.toUpperCase();\n                }\n            );\n        }\n    }\n\n    CharactersFilter.$inject = [];\n    /* @ngInject */\n    function CharactersFilter() {\n        return charactersFilter;\n\n        ////////////////////\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length - 1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n\n    WordsFilter.$inject = [];\n    /* @ngInject */\n    function WordsFilter() {\n        return wordsFilter;\n\n        /////////////////////\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n\n            return input;\n        }\n    }\n\n    SplitFilter.$inject = [];\n    /* @ngInject */\n    function SplitFilter() {\n        return splitFilter;\n\n        ////////////////\n\n        function splitFilter(input, separator, splitIndex) {\n            var split = input.split(separator);\n            if (!splitIndex) {\n                return split;\n            }\n            return split.length <= splitIndex ? '' : split[splitIndex];\n        }\n    }\n\n    YesNoFilter.$inject = ['$filter'];\n    /* @ngInject */\n    function YesNoFilter($filter) {\n        return yesNoFilter;\n\n        ////////////////\n\n        function yesNoFilter(input, trueResponse, falseResponse) {\n            if (input) {\n                return $filter(\"translate\")(trueResponse || \"global.form.yes\")\n            } else {\n                return $filter(\"translate\")(falseResponse || \"global.form.no\")\n            }\n        }\n    }\n\n    JoinFilter.$inject = [];\n    /* @ngInject */\n    function JoinFilter() {\n        return joinFilter;\n\n        ////////////////\n\n        function joinFilter(input, separator) {\n            if (angular.isArray(input)) {\n                return input.join(separator);\n            }\n\n            return '';\n        }\n    }\n\n    NormalizeSlugUrlFilter.$inject = ['StringUtil'];\n    /* @ngInject */\n    function NormalizeSlugUrlFilter(StringUtil) {\n        return StringUtil.normalizeSlugUrl;\n    }\n\n    PrettifyFilter.$inject = [];\n    /* @ngInject */\n    function PrettifyFilter() {\n        return syntaxHighlight;\n\n        //////////////////////////////////////////////\n\n        function syntaxHighlight(json) {\n            if (!json) {\n                return '';\n            }\n            if (!angular.isString(json)) {\n                json = angular.toJson(json, true);\n            }\n            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?),?/g, onMatch);\n\n            /////////////////////////////////////////////////\n\n            function onMatch(match) {\n                var cls = 'number';\n                if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                        cls = 'key';\n                    } else {\n                        cls = 'string';\n                    }\n                } else if (/true|false/.test(match)) {\n                    cls = 'boolean';\n                } else if (/null/.test(match)) {\n                    cls = 'null';\n                }\n\n                return '<span class=\"' + cls + '\">' + match + '</span>';\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('hasAnyAuthority', hasAnyAuthority)\n        .directive('hasAuthority', hasAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n    /* @ngInject */\n    function hasAnyAuthority(Principal) {\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n        function link(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('ng-hide');\n                },\n                setHidden = function () {\n                    element.addClass('ng-hide');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(\n                    function () {\n                        return Principal.isAuthenticated();\n                    }, function () {\n                        defineVisibility(true);\n                    }\n                );\n            }\n        }\n    }\n\n    hasAuthority.$inject = ['Principal'];\n    /* @ngInject */\n    function hasAuthority(Principal) {\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n        function link(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('ng-hide');\n                },\n                setHidden = function () {\n                    element.addClass('ng-hide');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(\n                            function (result) {\n                                if (result) {\n                                    setVisible();\n                                } else {\n                                    setHidden();\n                                }\n                            }\n                        );\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(\n                    function () {\n                        return Principal.isAuthenticated();\n                    }, function () {\n                        defineVisibility(true);\n                    }\n                );\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('autocompleteInfiniteScroll', AutocompleteInfiniteScrollDirective);\n\n    AutocompleteInfiniteScrollDirective.$inject = ['$interval'];\n    /* @ngInject */\n    function AutocompleteInfiniteScrollDirective($interval) {\n        return {\n            link: link,\n            restrict: 'A'\n        };\n\n        function link(scope, el, attrs) {\n            var now = new Date().getTime();\n\n            var interval = $interval(checkTillExists, 100);\n\n            ///////////////////////////////////////\n\n            function checkTillExists() {\n                var rep = angular.element(document.getElementsByClassName(\"md-virtual-repeat-scroller\"));\n\n                if (rep === null || rep.length === 0) {\n                    return;\n                }\n\n                $interval.cancel(interval);\n\n                rep.on('scroll', onScroll);\n\n                scope.$on('$destroy', removeEvent);\n\n                //////////////////////////////////////\n\n                function removeEvent() {\n                    rep.off('scroll', onScroll);\n                }\n\n                function onScroll(evt) {\n                    if (rep[0].scrollTop + rep[0].offsetHeight >= rep[0].scrollHeight) {\n                        var time = new Date().getTime();\n                        if (time - now > 100) {\n                            now = time;\n                            scope.$apply(apply);\n                        }\n                    }\n\n                    /////////////////////////////////\n\n                    function apply() {\n                        scope.$eval(attrs.autocompleteInfiniteScroll);\n                    }\n                }\n            }\n        }\n    }\n\n})(angular);\n\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('compile', compileDirective);\n\n    compileDirective.$inject = [];\n    /* @ngInject */\n    function compileDirective() {\n        return link;\n\n        ///////////\n\n        function link(scope, element, attrs) {\n            try {\n                element.html(attrs.compile);\n            } catch (e) {\n                console.log(e);\n                element.html('Error Occurred');\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('mdCustomTable', mdCustomTable);\n\n    mdCustomTable.$inject = [];\n    /* @ngInject */\n    function mdCustomTable() {\n        return {\n            bindToController: true,\n            controller: CustomTableController,\n            controllerAs: 'vm',\n            restrict: 'E',\n            templateUrl: 'app/blocks/util/directives/CustomTableView.html',\n            transclude: {\n                leftPaginationMenu: '?leftPaginationMenu',\n                leftShowHideMenu: '?leftShowHideMenu'\n            },\n            scope: {\n                headers: '=',\n                data: '=',\n                total: '=?',\n                pagination: '=?',\n                promise: '=?',\n                searchBox: '=?',\n                showHideColumns: '=?',\n                userInfo: '=?',\n                keyNavigationEnabled: \"=?\",\n                onPaginate: '&?',\n                onReorder: '&?',\n                onRowClick: '&?',\n                onRowDblClick: '&?',\n                /**\n                 * Select/Deselect one row listener\n                 */\n                onRowsToggle: '&?',\n                onSearchSubmit: '&?',\n                onMouseOverOnCell: '&?',\n                onMouseLeaveOnCell: '&?',\n                hidePager: '&?',\n                /**\n                 * if you enable it, you can see the Select All button on the left side of top pagination menu\n                 * and you switch table to select all mode\n                 */\n                enableSelectAll: '=?',\n                /**\n                 * The name of event for forcing table to check all item in current page\n                 * To call select all you need to fire this event\n                 */\n                toggleCurrentPageSelection: '@?',\n                /**\n                 * The name of event for getting selected item, you need to fire this event with $rootScope.$broadcast(eventName, callback)\n                 * In callback you have object parameter like below\n                 *\n                 * {\n                 *      all: true/false ( all items are selected )\n                 *      unselected: Array of unselected items\n                 *      selected: Array of selected items\n                 *      count: selected count ( it get count in select all and normal selection mode )\n                 * }\n                 */\n                getSelectedItemsEvent: '@?',\n                /**\n                 * The name of event for getting selected item, you need to fire this event with $rootScope.$broadcast(eventName, callback)\n                 * In callback you have object parameter like below\n                 *\n                 * {\n                 *      selected: Array of selected items\n                 * }\n                 */\n                getLegacySelectedItemsEvent: '@?',\n                /**\n                 * The name of event to clear all selection in table\n                 */\n                clearSelectionEvent: '@?',\n                onSelectedCount: '&?',\n                /**\n                 * function that returns promise, as on rejection value is returned back\n                 * to old value\n                 */\n                onCellValueChange: '&?',\n                /**\n                 * selectable must be one of two values\n                 * - single - single selection is enabled\n                 * - multiple - multiple selection is enabled\n                 */\n                selectable: '@?',\n                /**\n                 * key-controlled attribute is defined to make the table\n                 * control by 'CTRL' key\n                 */\n                keyControlled: '=?',\n                class: '=?'\n            }\n        };\n    }\n\n    CustomTableController.$inject = [\n        '$scope',\n        '$element',\n        '$timeout',\n        '$q',\n        '$filter',\n        '$window',\n        '$translate',\n        '$mdDialog',\n        'CustomEditDialog',\n        'Alert',\n        'DateUtils',\n        'CustomTableUtil',\n        'RichTextEditDialog',\n        'HtmlTagUtil',\n        'StringUtil',\n        'TableConstants'\n    ];\n\n    /* @ngInject */\n    function CustomTableController($scope, $element, $timeout, $q, $filter, $window, $translate, $mdDialog, CustomEditDialog, Alert, DateUtils, CustomTableUtil, RichTextEditDialog, HtmlTagUtil, StringUtil, TableConstants) {\n        var vm = this;\n\n        //-- constants --\n        var CTRL_KEY = 17;\n\n        // -- START -- below are md-data-table callbacks\n        vm.paginate = paginate;\n        vm.reorder = reorder;\n        vm.onRowSelect = onRowSelect;\n        vm.onDblRowSelect = onDblRowSelect;\n        vm.onRowDeselect = onRowDeselect;\n        vm.onSearch = onSearch;\n        vm.onCellClick = onCellClick;\n        vm.onCellDblClick = onCellDblClick;\n        vm.onCellEnterPress = onCellEnterPress;\n        vm.callFunction = callFunction;\n        vm.getSuitableData = getSuitableData;\n        vm.getSuitableDataParams = getSuitableDataParams;\n        vm.getCorrectValue = getCorrectValue;\n        vm.openEditDialog = openEditDialog;\n        vm.openRichTextDialog = openRichTextDialog;\n        vm.getLimitedAndEscapedData = getLimitedAndEscapedData;\n        vm.increaseTotalDisplayed = increaseTotalDisplayed;\n        vm.onEdit = onEdit;\n        vm.onSearchFilter = onSearchFilter;\n        vm.getValue = CustomTableUtil.getValue;\n        vm.getCellClass = getCellClass;\n        vm.onToggleSelectAll = onToggleSelectAll;\n        vm.getSelectedCount = getSelectedCount;\n\n        // -- END -- below are md-data-table callbacks\n        vm.selected = [];\n\n        vm.selectedProducts = new Set();\n        vm.unselectedProducts = new Set();\n        vm.selectedAll = false;\n\n        vm.finishMultiple = true;\n        vm.searchForm = {};\n        vm.currentRowIndx = 0;\n        vm.currentCellIndx = 0;\n        vm.defaultPagination = {\n            page: 1,\n            size: 5,\n            options: [\n                10,\n                30,\n                50,\n                100\n            ],\n            label: {\n                page: $translate.instant('global.customDataTable.page'),\n                rowsPerPage: $translate.instant('global.customDataTable.rowsPerPage'),\n                of: $translate.instant('global.customDataTable.of')\n            }\n        };\n        vm.defaultHeader = {\n            editable: false,\n            showHide: true,\n            visible: true,\n            property: null,\n            onClick: null,\n            orderBy: null,\n            desc: false\n        };\n        vm.controllKeyPressed = false;\n        vm.isEmptyData = true;\n        vm.totalDisplayed = 25;\n        vm.displayedData = [];\n        activate();\n\n        ////////////////////\n\n        function activate() {\n            //add arrow navigation to tables after render\n            $timeout(\n                function () {\n                    afterHtmlRender();\n                }, 0\n            );\n\n            vm.isEmptyData = !vm.data || vm.data.length === 0;\n\n            if (angular.isUndefined(vm.pagination)) {\n                vm.pagination = {};\n            }\n            vm.pagination = angular.extend({}, vm.defaultPagination, vm.pagination);\n            if (angular.isDefined(vm.data) && angular.isArray(vm.data)) {\n                setPageData(sliceData(vm.data, vm.order));\n            }\n            registerWatchOnData();\n            registerWatchOnHeaders();\n\n            if (angular.isUndefined(vm.total) && vm.data) {\n                vm.total = vm.data.length;\n            } else if (angular.isUndefined(vm.total)) {\n                vm.total = 0;\n            }\n\n            if (angular.isUndefined(vm.selectable)) {\n                vm.selectable = false;\n            }\n            if (angular.isArray(vm.headers)) {\n                vm.tHeaders = extendHeaders(vm.headers);\n            }\n\n            angular.element($window).on('keydown', holdKey);\n            angular.element($window).on('keyup', releaseKey);\n            //selecting row by click on any cell is enabled if key navigation is not enabled\n            vm.rowSelectable = !angular.isDefined(vm.keyNavigationEnabled);\n\n            if (angular.isString(vm.toggleCurrentPageSelection)) {\n                $scope.$on(vm.toggleCurrentPageSelection, toggleItemSelection);\n            }\n\n            if (angular.isString(vm.getSelectedItemsEvent)) {\n                $scope.$on(vm.getSelectedItemsEvent, getAllSelected);\n            }\n\n            if (angular.isString(vm.getLegacySelectedItemsEvent)) {\n                $scope.$on(vm.getLegacySelectedItemsEvent, getAllLegacySelected);\n            }\n\n\n            if (angular.isString(vm.clearSelectionEvent)) {\n                $scope.$on(vm.clearSelectionEvent, clearSelection);\n            }\n\n            //////////////////////////////////////////////\n\n            function getAllSelected(event, callback) {\n                if (angular.isFunction(callback)) {\n                    callback({\n                        count: getSelectedCount(),\n                        all: vm.selectedAll,\n                        unselected: Array.from(vm.unselectedProducts),\n                        selected: Array.from(vm.selectedProducts)\n                    });\n                }\n            }\n\n            function getAllLegacySelected(event, callback) {\n                if (angular.isFunction(callback)) {\n                    callback({\n                        selected: Array.from(vm.selected)\n                    });\n                }\n            }\n\n            function clearSelection() {\n                vm.selectedAll = false;\n                vm.selected.length = 0;\n                vm.unselectedProducts.clear();\n                vm.selectedProducts.clear();\n            }\n        }\n\n        function toggleItemSelection(event, deselect) {\n            if (deselect) {\n                vm.selected.length = 0;\n                return;\n            }\n\n            vm.selected = Array.from(new Set(vm.data));\n        }\n\n        function getSelectedCount() {\n            if (vm.selectedAll) {\n                return parseInt(vm.total) - vm.unselectedProducts.size;\n            }\n\n            return vm.selectedProducts.size;\n        }\n\n        function fireCountEvent() {\n            if (angular.isFunction(vm.onSelectedCount)) {\n                var count = getSelectedCount();\n                var func = vm.onSelectedCount({size: count});\n\n                if (angular.isFunction(func)) {\n                    func(count);\n                }\n            }\n        }\n\n        function getCellClass(header, model) {\n            if (angular.isFunction(header.cellClass)) {\n                return header.cellClass(header, model) || '';\n            }\n\n            return header.cellClass || '';\n        }\n\n        function onToggleSelectAll() {\n            vm.selectedProducts.clear();\n            vm.unselectedProducts.clear();\n            var all = vm.selectedAll;\n            vm.selectedAll = !all;\n            toggleItemSelection(null, all);\n\n            fireCountEvent();\n        }\n\n        function setPageData(pageData) {\n            vm.pageData = pageData;\n            if (vm.data) {\n                vm.totalDisplayed = vm.data.length;\n            }\n            vm.displayedData = $filter('limitTo')(vm.pageData, vm.totalDisplayed);\n            $scope.$emit('page-data:updated');\n        }\n\n        function increaseTotalDisplayed() {\n            if (!vm.pageData) {\n                return;\n            }\n            if (vm.totalDisplayed + 3 < vm.pageData.length) {\n                vm.totalDisplayed += 3;\n                vm.displayedData = $filter('limitTo')(vm.pageData, vm.totalDisplayed);\n                return;\n            }\n            vm.totalDisplayed = vm.pageData.length;\n            vm.displayedData = $filter('limitTo')(vm.pageData, vm.totalDisplayed);\n        }\n\n        function onEdit(header) {\n            var config = {\n                templateUrl: 'app/blocks/util/directives/table-input/TextInputView.html',\n                controller: 'TableInputController',\n                controllerAs: 'vm',\n                locals: {\n                    validations: null\n                }\n            };\n\n            if (header.edit.type === TableConstants.editType.NUMERIC) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/NumericInputView.html';\n                config.controller = 'NumericInputController';\n            } else if (header.edit.type === TableConstants.editType.BOOLEAN) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/BooleanInputView.html';\n            } else if (header.edit.type === TableConstants.editType.ENUM) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/EnumInputView.html';\n                config.controller = 'TableEnumInputController';\n            }\n\n            config = angular.merge(config, header.edit.options);\n            $mdDialog.show(config).then(header.edit.callback);\n        }\n\n        function onSearchFilter(header) {\n            var config = {\n                templateUrl: 'app/blocks/util/directives/table-input/TextInputView.html',\n                controller: 'TableInputController',\n                controllerAs: 'vm',\n                locals: {\n                    validations: null\n                }\n            };\n\n            if (header.search.type === TableConstants.editType.NUMERIC) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/NumericInputView.html';\n            } else if (header.search.type === TableConstants.editType.BOOLEAN) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/BooleanInputView.html';\n            } else if (header.search.type === TableConstants.editType.ENUM) {\n                config.templateUrl = 'app/blocks/util/directives/table-input/EnumInputView.html';\n                config.controller = 'TableEnumInputController';\n            }\n\n            config = angular.merge(config, header.search.options);\n            $mdDialog.show(config).then(header.search.callback);\n        }\n\n\n        function afterHtmlRender() {\n            vm.tableBody = angular.element($element).find('table tbody');\n            registerNavigationListener(vm.tableBody);\n        }\n\n        function registerNavigationListener(tableBody) {\n            if (!tableBody || tableBody.length === 0) {\n                return;\n            }\n            angular.element(tableBody).on('keydown', navigationListener);\n        }\n\n        function navigationListener(event) {\n            if (event.keyCode === 37 && vm.currentCellIndx > 0) {\n                //move left\n                vm.currentCellIndx--;\n                changeCellPosition('right');\n                return false;\n            }\n            if (event.keyCode === 38 && vm.currentRowIndx > 0) {\n                //move up\n                vm.currentRowIndx--;\n                changeCellPosition('down');\n                return false;\n            }\n            if (event.keyCode === 39 && vm.currentCellIndx < vm.tHeaders.length) {\n                //move right\n                vm.currentCellIndx++;\n                changeCellPosition('left');\n                return false;\n            }\n            if (event.keyCode === 40 && vm.pageData && vm.currentRowIndx < vm.pageData.length - 1) {\n                //move down\n                vm.currentRowIndx++;\n                changeCellPosition('up');\n                return false;\n            }\n        }\n\n        function extendHeaders(headers) {\n            var extendedHeaders = [];\n            for (var i = 0; i < headers.length; i++) {\n                if (angular.isDefined(headers[i])) {\n                    var extend = angular.extend({}, vm.defaultHeader, headers[i]);\n                    extendedHeaders.push(angular.extend(headers[i], extend));\n                }\n            }\n            return extendedHeaders;\n        }\n\n        function changeCellPosition(fromDir) {\n            if (!vm.tableBody || vm.tableBody.length === 0) {\n                return;\n            }\n            var prevCell = vm.currentCell;\n            var currentRow = vm.tableBody.find('tr')[vm.currentRowIndx];\n            if (!currentRow) {\n                return;\n            }\n            vm.currentCell = currentRow.children[vm.currentCellIndx];\n            if (vm.currentCell) {\n                //if current cell is now checkbox column cell\n                if (isCellCheckbox(vm.currentCell)) {\n                    vm.currentCell = prevCell;\n                    handleCheckboxCellPositioning(fromDir);\n                    return;\n                }\n                //if current cell is hidden column cell\n                if (isCellHidden(vm.currentCell)) {\n                    handleHiddenCellPositioning(fromDir);\n                }\n                if (prevCell) {\n                    angular.element(prevCell).removeClass(\"active-cell\");\n                }\n                vm.currentCell.focus();\n                angular.element(vm.currentCell).addClass(\"active-cell\");\n                return;\n            }\n            vm.currentCell = prevCell;\n        }\n\n        function isCellHidden(cell) {\n            return angular.element(cell).hasClass('ng-hide');\n        }\n\n        function handleHiddenCellPositioning(fromDir) {\n            switch (fromDir) {\n                case 'up':\n                    vm.currentRowIndx++;\n                    break;\n                case 'down':\n                    vm.currentRowIndx--;\n                    break;\n                case 'left':\n                    vm.currentCellIndx++;\n                    break;\n                case 'right':\n                    vm.currentCellIndx--;\n                    break;\n            }\n            changeCellPosition(fromDir);\n        }\n\n        function handleCheckboxCellPositioning(fromDir) {\n            switch (fromDir) {\n                case 'up':\n                    vm.currentRowIndx--;\n                    break;\n                case 'down':\n                    vm.currentRowIndx++;\n                    break;\n                case 'left':\n                    vm.currentCellIndx--;\n                    break;\n                case 'right':\n                    vm.currentCellIndx++;\n                    break;\n            }\n        }\n\n        function isCellCheckbox(cell) {\n            return angular.element(cell).find(\"md-checkbox\").length > 0\n        }\n\n        function isEditableField(model, header) {\n            if (angular.isFunction(header.editable)) {\n                return header.editable(model, header);\n            }\n            return header.editable;\n        }\n\n        function onCellClick(event, model, header) {\n            var cellElement = angular.element(event.target);\n            vm.currentRowIndx = cellElement.parent().parent().children().index(cellElement.parent());\n            vm.currentCellIndx = cellElement.parent().children().index(cellElement);\n            if (!vm.selectable) {\n                vm.currentCellIndx += 1;\n            }\n            changeCellPosition();\n        }\n\n        function onCellDblClick(event, model, header) {\n            var isEditable = isEditableField(model, header);\n            if (isEditable && !vm.keyNavigationEnabled) {\n                if (header.type === 'text') {\n                    vm.openRichTextDialog(event, model, header);\n                    return;\n                }\n                vm.openEditDialog(event, model, header);\n                return;\n            }\n\n            onCellClick(event, model, header);\n\n            if (isEditable && vm.keyNavigationEnabled) {\n                if (header.type === 'text') {\n                    vm.openRichTextDialog(event, model, header);\n                    return;\n                }\n                vm.openEditDialog(event, model, header);\n            }\n\n            vm.selected.length = 0;\n        }\n\n        function onCellEnterPress(event, model, header) {\n            vm.onCellDblClick(event, model, header);\n        }\n\n        function callFunction(fn, model, header) {\n            if (angular.isFunction(fn)) {\n                return fn(model, header);\n            }\n        }\n\n        function registerWatchOnData() {\n            $scope.$watchCollection(\n                function watchData(scope) {\n                    return vm.data;\n                },\n                function handleChange(newValue, oldValue) {\n                    vm.isEmptyData = !newValue || newValue.length === 0;\n                    setPageData(sliceData(newValue, vm.order));\n                }\n            );\n        }\n\n        function registerWatchOnHeaders() {\n            $scope.$watchCollection(\n                function watchData(scope) {\n                    return vm.headers;\n                },\n                function handleChange(newValue, oldValue) {\n                    if (!angular.isArray(newValue)) {\n                        return;\n                    }\n                    vm.tHeaders = extendHeaders(newValue);\n                }\n            );\n        }\n\n        function getSuitableDataParams(data, header) {\n            return CustomTableUtil.getValue(data, header.params);\n        }\n\n        function getCorrectValue(model, header) {\n            var value = header.type === 'text' ? getLimitedAndEscapedData(model, header) : getSuitableData(model, header);\n\n            if (!value) {\n                return $translate.instant('global.no_value');\n            }\n\n            return value;\n        }\n\n        function getSuitableData(data, header) {\n            var val = CustomTableUtil.getFieldValue(data, header);\n\n            if (angular.isUndefined(val) || val == null) {\n                return '';\n            }\n\n            if (header.property) {\n                if (header.property === 'length') {\n                    val = val[header.property];\n                }\n                //add more function if needed\n            }\n\n            if (header.type && (header.type === 'date' || header.type === 'datetime')) {\n                val = DateUtils.getFormattedDate(Date.parse(val));\n            }\n\n            if (angular.isFunction(header.applyFilterIf) && !header.applyFilterIf(data, header)) {\n                return val;\n            }\n\n            if (header.filter) {\n                try {\n                    val = $filter(header.filter)(val, header.filterParams);\n                } catch (e) {\n                    val = 'Filter does not exist';\n                }\n            }\n\n            return val;\n        }\n\n        function onSearch(searchText) {\n            if (angular.isFunction(vm.onSearchSubmit)) {\n                vm.onSearchSubmit(searchText);\n                return;\n            }\n            setPageData(sliceData(vm.data, vm.order));\n            if (searchText && searchText.length > 0) {\n                Alert.info($translate.instant('global.customDataTable.searchFound', {found: '' + vm.total}));\n            }\n        }\n\n        function getSearchedData(data, searchText) {\n            if (!angular.isArray(data) || !searchText || searchText.length === 0) {\n                return data;\n            }\n            return $filter('filter')(data, vm.searchForm.searchText);\n        }\n\n        /**\n         * function= callback called when a pagination parameters like size, page is changed,\n         * calls onPaginate callback if it were defined\n         *\n         * onPaginate function is expected to be called with onPaginate(page, pageSize)\n         * @param page\n         * @param pageSize\n         */\n\n        function paginate(page, pageSize) {\n            vm.finishMultiple = true;\n            vm.pagination.page = page;\n            vm.pagination.size = pageSize;\n            if (angular.isFunction(vm.onPaginate)) {\n                vm.onPaginate(\n                    {\n                        page: page,\n                        pageSize: pageSize\n                    }\n                );\n                return;\n            }\n            setPageData(sliceData(vm.data, vm.pagination.order));\n        }\n\n        function isRemotePagination() {\n            return vm.onPaginate || vm.data.length <= vm.pagination.size;\n        }\n\n        function sliceData(data, order) {\n            if (!angular.isArray(data)) {\n                return data;\n            }\n            var slicedData = data;\n            var offset = 0;\n            //apply first search on data\n            if (!vm.onSearchSubmit && vm.searchForm.searchText && vm.searchForm.searchText.length > 0) {\n                slicedData = getSearchedData(data, vm.searchForm.searchText);\n                vm.total = slicedData.length;\n                offset = (vm.pagination.page - 1) * vm.pagination.size;\n            }\n            //apply order if there is any\n            if (!vm.onReorder && order) {\n                slicedData = getOrderedData(slicedData, order);\n            }\n            //if no remote pagination and static data length is higher then page size\n            //then offset should be calculated for static data\n            if (!isRemotePagination()) {\n                offset = (vm.pagination.page - 1) * vm.pagination.size;\n            }\n            slicedData = slicedData.slice(offset, offset + vm.pagination.size);\n            return slicedData;\n        }\n\n        function getOrderedData(data, order) {\n            if (!angular.isArray(data)) {\n                return data;\n            }\n            if (order && angular.isString(order)) {\n                var predicate = order;\n                var reverse = false;\n                if (order.indexOf('-') !== -1) {\n                    predicate = order.split('-')[1];\n                    reverse = true;\n                }\n                return $filter('orderBy')(data, predicate, reverse);\n            }\n            return data;\n        }\n\n        function reorder(order) {\n            if (angular.isDefined(vm.onReorder)) {\n                vm.onReorder(\n                    {\n                        order: order\n                    }\n                );\n                return;\n            }\n            setPageData(sliceData(vm.data, order));\n        }\n\n        function selectionEnabled() {\n            if (!vm.keyControlled) {\n                return angular.isDefined(vm.selectable);\n            }\n            return angular.isDefined(vm.selectable) && vm.controllKeyPressed;\n        }\n\n        function isSelectAllPerPage() {\n            if (vm.pageData && vm.selected && vm.selected.length % vm.pagination.size === vm.totalDisplayed) {\n                angular.forEach(vm.selected, function (selectedOne) {\n                    if (vm.pageData.indexOf(selectedOne) === -1) {\n                        return false;\n                    }\n                });\n                return true;\n            }\n            return false;\n        }\n\n        function onDblRowSelect(model) {\n            if (angular.isFunction(vm.onRowDblClick)) {\n                vm.onRowDblClick(\n                    {\n                        model: model\n                    }\n                );\n            }\n        }\n\n        function onRowSelect(model) {\n            if (!selectionEnabled() && vm.selected.length <= 1) {\n                if (!angular.isDefined(vm.keyNavigationEnabled)) {\n                    if (angular.isFunction(vm.onRowClick)) {\n                        vm.onRowClick(\n                            {\n                                model: model\n                            }\n                        );\n                    }\n                    callRowToggle(model, false);\n                }\n                // do not set new array, instead clear it\n                vm.selected.length = 0;\n                return;\n            }\n            if (isSelectAllPerPage()) {\n                for (var start = vm.totalDisplayed; start < vm.pageData.length; start++) {\n                    if (vm.selected.indexOf(vm.pageData[start]) === -1) {\n                        vm.selected.push(vm.pageData[start]);\n                    }\n                }\n            }\n            callRowToggle(model, false);\n        }\n\n        function onRowDeselect(model) {\n            if (selectionEnabled() && vm.selected.length === 0) {\n                updateScope(\n                    function () {\n                        vm.controllKeyPressed = !vm.keyControlled;\n                    }\n                );\n            }\n\n            callRowToggle(model, true);\n        }\n\n        function holdKey(event) {\n            // on hold keys\n            if (event.keyCode === CTRL_KEY) {\n                updateScope(\n                    function () {\n                        vm.controllKeyPressed = true;\n                    }\n                );\n            }\n        }\n\n        function releaseKey(event) {\n            // on release keys\n            if (event.keyCode === CTRL_KEY) {\n                updateScope(\n                    function () {\n                        if (selectionEnabled() && vm.keyControlled && vm.selected.length === 0) {\n                            vm.controllKeyPressed = false;\n                        }\n                    }\n                );\n            }\n        }\n\n        function callRowToggle(item, unchecked) {\n            if (angular.isFunction(vm.onRowsToggle)) {\n                var func = vm.onRowsToggle({\n                    item: item,\n                    unchecked: unchecked\n                });\n\n                if (angular.isFunction(func)) {\n                    func(item, unchecked);\n                }\n            }\n\n            if (vm.enableSelectAll) {\n                var first = vm.unselectedProducts;\n                var second = vm.selectedProducts;\n\n                if (unchecked) {\n                    first = vm.selectedProducts;\n                    second = vm.unselectedProducts;\n                }\n\n                second.add(item.id);\n                first.delete(item.id);\n\n                if (unchecked && vm.selectedAll) {\n                    vm.selectedAll = vm.getSelectedCount() !== 0;\n                }\n            }\n\n            fireCountEvent();\n        }\n\n        function updateScope(callback) {\n            $timeout(\n                function () {\n                    $scope.$apply(callback);\n                }, 0\n            );\n        }\n\n        function callOnCellSaveCallback(header, model, newValue, oldValue) {\n            if (angular.isFunction(vm.onCellValueChange)) {\n                return vm.onCellValueChange(\n                    {\n                        header: header,\n                        model: model,\n                        newValue: newValue,\n                        oldValue: oldValue\n                    }\n                );\n            }\n            var defer = $q.defer();\n            defer.resolve(true);\n            return defer.promise;\n        }\n\n        function openRichTextDialog(event, model, header) {\n            event.stopPropagation();\n            RichTextEditDialog.showDialog(\n                {\n                    modelValue: CustomTableUtil.getFieldValue(model, header),\n                    targetEvent: event,\n                    onSave: function (text) {\n                        var oldValue = CustomTableUtil.getFieldValue(model, header);\n                        if (oldValue === text) {\n                            //no change\n                            returnFocusToCell();\n                            return;\n                        }\n                        //first set value\n                        CustomTableUtil.setValue(model, header.field, text);\n                        //if remote function should be called call it\n                        callOnCellSaveCallback(header.field, model, text, oldValue).catch(\n                            function (updatedModel) {\n                                model = updatedModel;\n                            }\n                        );\n                        returnFocusToCell();\n                    }\n                }\n            );\n        }\n\n        function returnFocusToCell() {\n            if (vm.keyNavigationEnabled && vm.currentCell) {\n                vm.currentCell.focus();\n            }\n        }\n\n        function openEditDialog(event, model, header) {\n            if (event) {\n                event.stopPropagation();\n            }\n            function checkAndSave(newValue) {\n                var oldValue = CustomTableUtil.getFieldValue(model, header);\n                if (oldValue === newValue) {\n                    //no change\n                    returnFocusToCell();\n                    return;\n                }\n                //first set value\n                CustomTableUtil.setValue(model, header.field, newValue);\n                //if remote function should be called call it\n                callOnCellSaveCallback(header.field, model, newValue, oldValue).catch(\n                    function (updatedModel) {\n                        model = updatedModel;\n                    }\n                );\n            }\n\n            CustomEditDialog.showDialog(\n                {\n                    modelValue: CustomTableUtil.getFieldValue(model, header),\n                    placeHolder: header.text,\n                    type: header.type ? header.type : 'text',\n                    afterOutsideToClose: function (value) {\n                        checkAndSave(value);\n                        returnFocusToCell();\n                    },\n                    afterEscToClose: function (value) {\n                        checkAndSave(value);\n                        returnFocusToCell();\n                    },\n                    save: function (input) {\n                        checkAndSave(input.$modelValue);\n                        returnFocusToCell();\n                    },\n                    targetEvent: event,\n                    validators: header.validators\n                }\n            );\n        }\n\n        function getLimitedAndEscapedData(data, header) {\n            var richTextValue = CustomTableUtil.getFieldValue(data, header);\n            if (!richTextValue || richTextValue === '') {\n                return richTextValue;\n            }\n            richTextValue = HtmlTagUtil.escapeTags(richTextValue);\n            return StringUtil.limitTo(richTextValue, 100);\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('datetime', datetimeDirective);\n\n    datetimeDirective.$inject = ['moment'];\n    /* @ngInject */\n    function datetimeDirective(moment) {\n        return {\n            link: link,\n            require: '^ngModel',\n            restrict: 'A',\n            scope: {\n                datetime: '@'\n            }\n        };\n\n        //////////////////\n\n        function link(scope, elm, attrs, ctrl) {\n            var dateFormat = attrs.datetime;\n\n            ctrl.$formatters.unshift(unshiftFormatter);\n            ctrl.$parsers.unshift(unshiftParser);\n\n            ///////////////////////////////////////////////////////\n\n            function unshiftFormatter(modelValue) {\n                if (!dateFormat || !modelValue) {\n                    return '';\n                }\n                return dateFormat;\n            }\n\n            function unshiftParser(viewValue) {\n                var date = moment(viewValue, dateFormat);\n                return (date && date.isValid() && date.year() > 1950) ? date.toDate() : '';\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    var defaultDateFormat = 'DD.MM.YYYY';\n\n    angular.module('app.blocks')\n        .directive('datetimePicker', DatetimePickerDirective)\n        .config(ConfigureTimePicker);\n\n    ConfigureTimePicker.$inject = ['$mdDateLocaleProvider'];\n    /* @ngInject */\n    function ConfigureTimePicker($mdDateLocaleProvider) {\n        $mdDateLocaleProvider.formatDate = formatDate;\n        $mdDateLocaleProvider.parseDate = parseDate;\n\n        function parseDate(dateString) {\n            var m = moment(dateString, defaultDateFormat, true);\n            return m.isValid() ? m.toDate() : new Date(NaN);\n        }\n\n        function formatDate(date) {\n            if (moment(date).isValid()) {\n                return moment(date).format(defaultDateFormat);\n            }\n            return null;\n        }\n    }\n\n    DatetimePickerDirective.$inject = [];\n    /* @ngInject */\n    function DatetimePickerDirective() {\n        return {\n            bindToController: true,\n            controller: DatetimePickerController,\n            controllerAs: 'vm',\n            restrict: 'E',\n            templateUrl: 'app/blocks/util/directives/DatetimePickerView.html',\n            scope: {\n                value: '=',\n                showDate: '=?',\n                showTime: '=?',\n                maxDate: '=?',\n                label: '@',\n                format: '=?',\n                minDate: '=?'\n            },\n            link: initConf\n        };\n\n        function initConf(scope, element, attrs) {\n            if (attrs.showTime === null) {\n                attrs.showTime = true;\n            }\n            if (attrs.showDate === null) {\n                attrs.showDate = true;\n            }\n\n            scope.timePickerOptions = {\n                step: 15,\n                timeFormat: 'H:i'\n            };\n\n        }\n    }\n\n    DatetimePickerController.$inject = [\n        '$filter',\n        '$scope'\n    ];\n    /* @ngInject */\n    function DatetimePickerController($filter, $scope) {\n        var vm = this;\n\n        vm.format = vm.format || defaultDateFormat;\n\n        vm.showDate = vm.showDate || true;\n        vm.showTime = vm.showTime || true;\n\n        if (vm.value) {\n            vm.timeValue = $scope.value;\n            vm.dateValue = $scope.value;\n        } else {\n            vm.timeValue = null;\n            vm.dateValue = null;\n        }\n\n        $scope.$watch('vm.timeValue', combineDateTime);\n        $scope.$watch('vm.dateValue', combineDateTime);\n        $scope.$watch('vm.value', valueChanged);\n\n        function valueChanged(newValue) {\n            if (!newValue) {\n                vm.timeValue = null;\n                vm.dateValue = null;\n            }\n        }\n\n        function combineDateTime(newValue, oldValue) {\n            if (oldValue !== null && newValue === null) {\n                if (vm.dateValue === null) {\n                    vm.timeValue = null;\n                    vm.dateValue = null;\n                    vm.value = undefined;\n                }\n            }\n\n            if (vm.dateValue) {\n                vm.value = vm.dateValue;\n                if (vm.timeValue === null) {\n                    var now = new Date();\n                    vm.value.setHours(now.getHours());\n                    vm.value.setMinutes(now.getMinutes());\n                }\n            }\n\n            if (vm.timeValue) {\n                if (vm.dateValue === null) {\n                    vm.value = new Date();\n                }\n                vm.timeValueStr = formatTime(vm.timeValue);\n                var timeParts = vm.timeValueStr.split(':');\n                vm.value.setHours(timeParts[0]);\n                vm.value.setMinutes(timeParts[1]);\n            }\n\n            if (vm.value === null) {\n                vm.timeValue = null;\n                vm.dateValue = null;\n            } else {\n                vm.timeValue = vm.value;\n                vm.dateValue = vm.value;\n            }\n\n        }\n\n        function formatTime(date) {\n            return $filter('date')(date, \"HH:mm\");\n        }\n\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('onEnterKey', OnEnterKeyDirective);\n\n    OnEnterKeyDirective.$inject = [];\n    /* @ngInject */\n    function OnEnterKeyDirective() {\n        return directive;\n\n        ////////////////////////////////////////////////////////////\n\n        function directive(scope, element, attrs) {\n            element.bind(\"keydown keypress\", listener);\n\n            /////////////////////////////////////////////////////////\n\n            function listener(event) {\n                var keyCode = event.which || event.keyCode;\n                if (keyCode === 13) {\n                    scope.$apply(apply);\n                    event.preventDefault();\n                }\n\n                //////////////////////////////////////////////////\n\n                function apply() {\n                    scope.$eval(attrs.onEnterKey);\n                }\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('equalTo', equalToDirective);\n\n    equalToDirective.$inject = [];\n    /* @ngInject */\n    function equalToDirective() {\n        return {\n            require: 'ngModel',\n            scope: {\n                otherModelValue: \"=equalTo\"\n            },\n            link: link\n        };\n    }\n\n    function link(scope, element, attributes, ngModel) {\n        ngModel.$validators.equalTo = function (modelValue) {\n            return modelValue === scope.otherModelValue;\n        };\n        scope.$watch(\"otherModelValue\", ngModel.$validate);\n    }\n\n})(angular);\n;\n/*\n * Angular Fixed Table Header\n * https://github.com/daniel-nagy/fixed-table-header\n * @license MIT\n * v0.2.1\n */\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('fixHead', fixHead);\n\n    fixHead.$inject = ['$window', '$timeout', '$compile'];\n\n    function fixHead($window, $timeout, $compile) {\n        return {\n            compile: compileFn\n        };\n\n        function compileFn(tElement) {\n            var header = {\n                clone: tElement.clone(),\n                original: tElement\n            };\n\n            header.clone.removeAttr('fix-head').removeAttr('ng-if');\n            //need to compile within original table, out of original table checkbox won't work\n            header.original.after(header.clone);\n            //table.clone.append(header.clone);\n\n            return function(scope, element) {\n                var table = {\n                    clone: element.parent().clone().empty(),\n                    original: element.parent()\n                };\n\n                //hide the clone header, which will be shown on scroll only\n                table.clone.css({\n                    position: 'fixed',\n                    top: 0,\n                    display: 'none',\n                    backgroundColor: 'white',\n                    zIndex: '33'\n                });\n\n                $compile(table.clone)(scope);\n                table.clone.html(element);\n                header.original = table.original.find('thead');\n\n                var scrollContainer = table.original.parent();\n                scrollContainer.parent()[0].insertBefore(table.clone[0], scrollContainer[0]);\n\n                scrollContainer.on('scroll', function () {\n                    // use CSS transforms to move the cloned header when the table is scrolled horizontally\n                    element.css('transform', 'translate3d(' + -(scrollContainer.prop('scrollLeft')) + 'px, 0, 0)');\n                });\n\n                angular.element($window).bind('scroll', function(){\n                    var tableOffset = scrollContainer.offset();\n                    var el = angular.element(this);\n                    var scrollTop = el.scrollTop();\n\n                    if ((scrollTop > tableOffset.top) && (scrollTop < tableOffset.top + scrollContainer.height())) {\n                        table.clone.css(\"display\", \"block\");\n                    } else {\n                        table.clone.css(\"display\", \"none\");\n                    }\n                });\n\n                function cells() {\n                    return element.find('th').length;\n                }\n\n                function getCells(node) {\n                    return Array.prototype.map.call(node.find('th'), function (cell) {\n                        return jQLite(cell);\n                    });\n                }\n\n                function jQLite(node) {\n                    return angular.element(node);\n                }\n\n                function updateCells() {\n                    var cells = {\n                        clone: getCells(element),\n                        original: getCells(header.original)\n                    };\n\n                    cells.clone.forEach(function (clone, index) {\n                        if(clone.data('isClone')) {\n                            return;\n                        }\n\n                        // prevent duplicating watch listeners\n                        clone.data('isClone', true);\n\n                        var cell = cells.original[index] || cells.clone[index];\n                        var style = $window.getComputedStyle(cell[0] || {});\n\n                        var getWidth = function () {\n                            return style.width;\n                        };\n\n                        var setWidth = function () {\n                            clone.css({minWidth: style.width, maxWidth: style.width});\n                        };\n\n                        var listener = scope.$watch(getWidth, setWidth);\n\n                        $window.addEventListener('resize', setWidth);\n\n                        clone.on('$destroy', function () {\n                            listener();\n                            $window.removeEventListener('resize', setWidth);\n                        });\n\n                        cell.on('$destroy', function () {\n                            clone.remove();\n                        });\n                    });\n                }\n\n                $timeout(function(){\n                    scope.$watch(cells, updateCells);\n                });\n\n                header.original.on('$destroy', function () {\n                    element.remove();\n                });\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('maxBytes', OnMaxBytes);\n\n    OnMaxBytes.$inject = [];\n    /* @ngInject */\n    function OnMaxBytes() {\n        return {\n            restrict: 'A',\n            require: '?ngModel',\n            link: link\n        };\n\n        ///////////////////////\n\n        function link(scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = onValidator;\n\n            ////////////////////////////////////////////////////////////\n\n            function onValidator(modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n\n                ////////////////////////////////////////////////////\n\n                function numberOfBytes(base64String) {\n                    return base64String.length / 4 * 3 - paddingSize(base64String);\n\n                    ////////////////////////////////////////////////////////////\n\n                    function paddingSize(base64String) {\n                        if (endsWith('==', base64String)) {\n                            return 2;\n                        }\n                        if (endsWith('=', base64String)) {\n                            return 1;\n                        }\n                        return 0;\n\n                        ///////////////////////////////////////////////////////\n\n                        function endsWith(suffix, str) {\n                            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('minBytes', OnMinBytes);\n\n    function OnMinBytes() {\n        return {\n            restrict: 'A',\n            require: '?ngModel',\n            link: link\n        };\n\n        /////////////////\n\n        function link(scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = onValidator;\n\n            //////////////////////////////////////////////////////////\n\n            function onValidator(modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n\n                //////////////////////////////////////////////////////////\n\n                function numberOfBytes(base64String) {\n                    return base64String.length / 4 * 3 - paddingSize(base64String);\n\n                    ////////////////////////////////////////////////////////\n\n                    function paddingSize(base64String) {\n                        if (endsWith('==', base64String)) {\n                            return 2;\n                        }\n                        if (endsWith('=', base64String)) {\n                            return 1;\n                        }\n                        return 0;\n\n                        //////////////////////////////////////////////////////////////\n\n                        function endsWith(suffix, str) {\n                            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('splashScreen', splashScreen);\n\n    splashScreen.$inject = ['$filter'];\n    /* @ngInject */\n    function splashScreen($filter) {\n        return {\n            replace: true,\n            restrict: 'E',\n            template: (function () {\n                var dot = '<div class=\"loader--dot\"></div>';\n                var format = '<md-content ng-cloak class=\"splash-screen md-primary-bg\">' +\n                    '<div class=\"loader\">{0}<div class=\"loader--text\"></div></div>' +\n                    '</md-content>';\n\n                for (var i = 0; i < 2; i++) {\n                    dot += dot;\n                }\n\n                return $filter('format')(format, dot);\n            })()\n        };\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('customTextAngular', customTextAngularDirective);\n\n    customTextAngularDirective.$inject = [\n        '$parse',\n        '$timeout',\n        'textAngularManager'\n    ];\n\n\n    /* @ngInject */\n    function customTextAngularDirective($parse, $timeout, textAngularManager) {\n        return {\n            bindToController: true,\n            controller: CustomTextAngularController,\n            templateUrl: 'app/blocks/util/directives/TextAngularView.html',\n            controllerAs: 'vm',\n            restrict: 'E',\n            scope: {\n                name: '@?',\n                value: '=',\n                rows: '@?',\n                toolbar: '@?',\n                focus: '@?',\n                maxLength: '@?'\n            },\n            link: link\n        };\n\n\n        function link(scope, element, attributes) {\n\n            // Parse the focus expression\n            var shouldFocus = $parse(attributes.focus)(scope);\n\n            if (!shouldFocus) {\n                return;\n            }\n\n            $timeout(timeout, 0, false);\n\n            function timeout() {\n                // Retrieve the scope and trigger focus\n                var editor = textAngularManager.retrieveEditor(attributes.name);\n                if (editor) {\n                    var editorScope = editor.scope;\n                    editorScope.displayElements.text.trigger('focus');\n                }\n            }\n        }\n\n\n    }\n\n    CustomTextAngularController.$inject = [\n        '$scope',\n        '$element',\n        '$attrs'\n    ];\n\n\n    /* @ngInject */\n    function CustomTextAngularController($scope, $element, $attrs) {\n        var vm = this;\n        var defaultToolbarButtons = \"[['h1','h2','h3'],\" +\n            \"['pre','quote','bold','italics','underline','strikeThrough'], \" +\n            \"['ul','ol'],['undo','redo'],['justifyLeft','justifyCenter','justifyRight','justifyFull'],\" +\n            \"['indent','outdent'],['insertImage','insertLink','wordcount','charcount']]\";\n\n        if (!vm.name) {\n            vm.name = 'textAngularName_' + Date.now();\n        }\n\n        if (!vm.toolbar) {\n            vm.toolbar = defaultToolbarButtons;\n        }\n\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('textAngularMaxLength', textAngularMaxLength);\n\n    textAngularMaxLength.$inject = [];\n    /* @ngInject */\n    function textAngularMaxLength() {\n        return {\n            require: 'ngModel',\n            link: link\n        };\n\n        ///////////////////////\n\n        function link(scope, element, attrs, ctrl) {\n\n            ctrl.$validators.textAngularMaxLength = textAngularMaxLength;\n\n            ////////////////////////////////////////\n\n            function textAngularMaxLength(modelValue, viewValue) {\n\n                if (ctrl.$isEmpty(modelValue)) {\n                    // consider empty models to be valid\n                    return true;\n                }\n\n                if (attrs.textAngularMaxLength && attrs.textAngularMaxLength.length > 0) {\n                    return viewValue.length <= parseInt(attrs.textAngularMaxLength);\n                }\n\n                return true;\n            }\n\n        }\n\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .component(\n            'alert', {\n                templateUrl: 'app/blocks/util/directives/AlertComponentView.html',\n                controller: AlertController,\n                controllerAs: 'vm',\n                bindings: {\n                    toast: '=',\n                    timeout: '@',\n                    catchServerError: '@'\n                }\n            }\n        );\n\n    AlertController.$inject = [\n        '$rootScope',\n        '$scope',\n        'Alert'\n    ];\n    /* @ngInject */\n    function AlertController($rootScope, $scope, Alert) {\n        var vm = this;\n\n        activate();\n\n        function activate() {\n            vm.alerts = Alert.get();\n            listenToServerError();\n        }\n\n        function listenToServerError() {\n            if (!vm.timeout && vm.timeout !== 0) {\n                vm.timeout = 5000;\n            }\n\n            if (vm.catchServerError !== false) {\n                vm.catchServerError = true;\n            }\n\n            var cleanHttpErrorListener = $rootScope.$on(\n                'smartApp.httpError', function (event, response) {\n                    event.stopPropagation();\n                    if (!vm.catchServerError) {\n                        return;\n                    }\n                    var errors = Alert.handleServerResponse(response);\n                    angular.forEach(\n                        errors, function (item) {\n                            if (!item || !item.message || (angular.isString(item.message) && item.message.trim() === '')) {\n                                return;\n                            }\n                            addServerErrorAlert(item);\n                        }\n                    );\n                }\n            );\n            $scope.$on(\n                '$destroy', function () {\n                    if (vm.catchServerError || angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null) {\n                        cleanHttpErrorListener();\n\n                        vm.alerts = [];//TODO: should handle state change and clear all the messages\n                    }\n                }\n            );\n        }\n\n        function addServerErrorAlert(response) {\n            if (response.params) {\n                if (response.params.exception === 'com.netflix.zuul.exception.ZuulException') {\n                    return;\n                }\n            }\n\n            var alert = Alert.add(\n                {\n                    type: 'warn',\n                    msg: response.message,\n                    params: response.params,\n                    timeout: response.timeout || 0,\n                    toast: vm.toast,\n                    scoped: true\n                },\n                vm.alerts\n            );\n\n            if (!vm.toast && !Alert.alreadyAdded(alert)) {\n                vm.alerts.push(alert);\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptorFactory);\n\n    errorHandlerInterceptorFactory.$inject = [\n        '$q',\n        '$rootScope'\n    ];\n    /* @ngInject */\n    function errorHandlerInterceptorFactory($q, $rootScope) {\n        return {\n            responseError: responseError\n        };\n\n        ////////////////\n\n        function responseError(response) {\n            if (!angular.isObject(response.config) || response.config.broadcast !== false) {\n                if (response.status !== 401 || !angular.isString(response.data.path) || response.data.path.indexOf('/api/account') < 0) {\n                    $rootScope.$emit('smartApp.httpError', response);\n                }\n            }\n\n            return $q.reject(response);\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .factory('notificationInterceptor', notificationInterceptorFactory);\n\n    notificationInterceptorFactory.$inject = ['Alert'];\n    /* @ngInject */\n    function notificationInterceptorFactory(Alert) {\n        return {\n            response: response\n        };\n\n        ///////////////////////////////////////////////////////\n\n        function response(response) {\n            if (!angular.isObject(response.config) || response.config.broadcast !== false) {\n                var alertKey = response.headers('X-smartApp-alert');\n                if (angular.isString(alertKey)) {\n                    Alert.success(\n                        alertKey,\n                        {\n                            param: response.headers('X-smartApp-params')\n                        }\n                    );\n                }\n            }\n            return response;\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('StateHandler', StateHandlerService);\n\n    StateHandlerService.$inject = [\n        '$mdDialog',\n        '$rootScope',\n        '$state',\n        '$translate',\n        'Language',\n        'TranslationHandler',\n        'Alert',\n        'DEBUG_INFO_ENABLED',\n        'VERSION'\n    ];\n\n    /* @ngInject */\n    function StateHandlerService($mdDialog, $rootScope, $state, $translate, Language, TranslationHandler, Alert, DEBUG_INFO_ENABLED, VERSION) {\n        this.initialize = initialize;\n\n        ////////////////\n\n        function initialize() {\n            $rootScope.DEBUG_INFO_ENABLED = DEBUG_INFO_ENABLED;\n            $rootScope.VERSION = VERSION;\n            $rootScope.back = back;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', onChangeStart);\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', onChangeSuccess);\n\n            $rootScope.$on('$destroy', onDestroy);\n\n            ////////////////////////////////////////////////////////////////\n\n            function back() {\n                // If previous state is 'activate' or do not exist go to 'home'\n                if ($rootScope.previousStateName === 'activation' ||\n                    $rootScope.previousStateName === null ||\n                    $state.get($rootScope.previousStateName) === null) {\n                    $state.go('home');\n                } else {\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n                }\n            }\n\n            function onChangeSuccess(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title';\n\n                //clear alerts\n                Alert.clear();\n\n                // Remember previous state unless we've been redirected to login or we've just\n                // reset the state memory after logout. If we're redirected to login, our\n                // previousState is already set in the authExpiredInterceptor. If we're going\n                // to login directly, we don't want to be sent to some previous state anyway\n                if (!$rootScope.redirected && $rootScope.previousStateName) {\n                    $rootScope.previousStateName = fromState.name;\n                    $rootScope.previousStateParams = fromParams;\n                }\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                TranslationHandler.updateTitle(titleKey);\n                $mdDialog.hide();\n            }\n\n            function onDestroy() {\n                if (angular.isDefined(stateChangeStart) && stateChangeStart !== null) {\n                    stateChangeStart();\n                }\n                if (angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null) {\n                    stateChangeSuccess();\n                }\n            }\n\n            function onChangeStart(event, toState, toStateParams) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n\n                // Update the language\n                Language.getCurrent().then($translate.use);\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .service('TranslationHandler', TranslationHandlerService);\n\n    TranslationHandlerService.$inject = [\n        '$state',\n        '$rootScope',\n        '$translate',\n        '$window'\n    ];\n    /* @ngInject */\n    function TranslationHandlerService($state, $rootScope, $translate, $window) {\n        this.initialize = initialize;\n        this.updateTitle = updateTitle;\n\n        ////////////////\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', updateTitle);\n\n            $rootScope.$on('$destroy', onDestroy);\n\n            ///////////////////////////////////////////////////////////\n\n            function onDestroy() {\n                if (angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null) {\n                    translateChangeSuccess();\n                }\n            }\n        }\n\n        // update the window title using params in the following\n        // precendence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(onTitle);\n\n            ////////////////////////////////////////////////////////\n\n            function onTitle(title) {\n                $window.document.title = title;\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .controller('AppController', AppController);\n\n    AppController.$inject = [\n        '$mdUtil',\n        '$mdSidenav',\n        '$state'\n    ];\n\n    /* @ngInject */\n    function AppController($mdUtil, $mdSidenav, $state) {\n\n        var vm = this;\n\n        vm.pages = [\n            {\n                type: 'exam',\n                title: 'My Messages',\n                id: '1Z4bk8xSx-8AudSwHAdUT2KgBQsPi7PmiOzBwzPKVSt8'\n            },\n            {\n                type: 'exam',\n                title: 'Possessives',\n                id: '1KZCIs_nVrB7NWP1F0N53UIH7VSUAJDNrUX58BiIx6uQ'\n            }\n        ];\n\n        vm.listQuestions = listQuestions;\n        vm.goTo = goTo;\n        vm.changePage = changePage;\n        vm.openMenu = openMenu;\n\n        activate();\n\n        ////////////////////////////////\n\n        function activate() {\n            changePage(vm.pages[0]);\n        }\n\n        function goTo(state) {\n            $state.go(state, null, {reload: true});\n        }\n\n        function openMenu() {\n            $mdUtil.debounce(timer, 200)();\n\n            ///////////////////////////////////////////\n\n            function timer() {\n                $mdSidenav('left').toggle();\n            }\n        }\n\n        function changePage(item) {\n            vm.current = item;\n            $state.go('content', {id: item.id}, {reload: true});\n        }\n\n        function listQuestions() {\n            getQuestions('1FqmeBTcnVTOTNeXegnXTuczrLTbqtGXh0kO5bXRej2M').then(onThen);\n\n            ///////////////////////////////////////////////////\n\n            function onThen(t) {\n                console.log(t);\n            }\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('LanguageController', LanguageController);\n\n    LanguageController.$inject = [\n        '$translate',\n        'Language',\n        'tmhDynamicLocale',\n        'timeAgoSettings'\n    ];\n    /* @ngInject */\n    function LanguageController($translate, Language, tmhDynamicLocale, timeAgoSettings) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        activate();\n\n        //////////////////////\n\n        function activate() {\n            Language.getAll().then(onLang);\n            Language.getCurrent().then(changeLanguage);\n\n            /////////////////////////////////////////////////////\n\n            function onLang(languages) {\n                vm.languages = languages;\n            }\n        }\n\n        function changeLanguage(languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n            timeAgoSettings.overrideLang = languageKey;\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .directive('dynamicController', DynamicControllerDirective);\n\n    DynamicControllerDirective.$inject = [\n        '$parse',\n        '$mdCompiler'\n    ];\n    /* @ngInject */\n    function DynamicControllerDirective($parse, $mdCompiler) {\n        return {\n            restrict: 'A',\n            terminal: true,\n            priority: 100000,\n            link: link\n        };\n\n        ///////////////////////////////////////////\n\n        function link(scope, elem) {\n            // Compile the element with the ng-controller attribute\n            var url = elem.attr('template-url') || null;\n            if (!url) {\n                return;\n            }\n\n            url = $parse(url)(scope);\n            var name = elem.attr('dynamic-controller');\n            var controller = null;\n            var model = null;\n            var as = null;\n\n            if (name) {\n                var data = elem.attr('controller-data');\n                controller = $parse(name)(scope);\n                as = elem.attr('controller-as');\n\n                elem.removeAttr('dynamic-controller');\n                elem.removeAttr('controller-data');\n                elem.removeAttr('controller-as');\n                elem.removeAttr('template-url');\n\n                if (data) {\n                    model = $parse(data)(scope);\n                }\n            }\n\n            var config = {\n                templateUrl: url,\n                controller: controller,\n                controllerAs: as,\n                locals: {model: model}\n            };\n            $mdCompiler.compile(config).then(onThen);\n\n            //////////////////////////////////////////////\n\n            function onThen(compileData) {\n                compileData.link(scope);\n                elem.html(compileData.element);\n            }\n        }\n\n    }\n\n})(angular);\n\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('NumericInputController', NumericInputController);\n\n    NumericInputController.$inject = [\n        '$mdDialog',\n        'validations'\n    ];\n    /* @ngInject */\n    function NumericInputController($mdDialog, validations) {\n        var vm = this;\n\n        vm.dismiss = dismiss;\n        vm.apply = apply;\n        vm.validations = validations;\n        vm.patternOnlyOneDecimal = /^[0-9]+(\\.[0-9]{1,2})?$/;\n\n        activate();\n\n        ////////////////\n\n        function activate() {\n\n        }\n\n        function apply() {\n            $mdDialog.hide(vm.model && parseFloat(vm.model.content) || null);\n        }\n\n        function dismiss() {\n            $mdDialog.cancel();\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('TableEnumInputController', TableEnumInputController);\n\n    TableEnumInputController.$inject = [\n        '$mdDialog',\n        '$q',\n        'config'\n    ];\n    /* @ngInject */\n    function TableEnumInputController($mdDialog, $q, config) {\n        var vm = this;\n\n        vm.config = config || {};\n        vm.items = [];\n        vm.page = -1;\n        vm.busy = false;\n\n        vm.onSearch = search;\n        vm.dismiss = dismiss;\n        vm.apply = apply;\n        vm.onItemClick = onItemClick;\n        vm.displayField = displayField;\n\n        activate();\n\n        //////////////////////////////////\n\n        function activate() {\n            var initialData = {\n                size: 10,\n                minLength: 0,\n                displayField: 'text',\n                method: angular.noop,\n                hint: 'global.customDataTable.query_hint',\n                pagination: true,\n                selectedField: false //if it is set to false, it means the whole data will be returned\n            };\n            vm.config = angular.merge(initialData, vm.config);\n        }\n\n        function search(query, resetPage) {\n            if (vm.busy) {\n                vm.busy = false;\n                return $q.resolve(vm.items);\n            }\n\n            vm.busy = true;\n\n            if (!resetPage && vm.config.pagination) {\n                vm.page++;\n            } else {\n                vm.page = 0;\n            }\n\n            return vm.config.method(\n                {size: vm.config.size, page: vm.page},\n                query\n            ).then(onSuccess, onError);\n\n            //////////////////////////////////////\n\n            function onSuccess(data) {\n                vm.busy = data.length === 0;\n\n                if (resetPage) {\n                    vm.items.splice(0, vm.items.length)\n                }\n                if (angular.isFunction(vm.config.onBeforeAdd)) {\n                    vm.config.onBeforeAdd(data);\n                }\n                vm.items.push.apply(vm.items, data);\n\n                return vm.items;\n            }\n\n            function onError(error) {\n                vm.busy = false;\n                console.error(error);\n            }\n        }\n\n        function onItemClick(event, item) {\n            if (item.disabled) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        function displayField(item) {\n            if (angular.isFunction(vm.config.displayField)) {\n                return vm.config.displayField(item);\n            }\n\n            return item[vm.config.displayField];\n        }\n\n        function apply() {\n            var data = vm.model;\n\n            if (vm.config.selectedField !== false) {\n                data = data[vm.config.selectedField];\n            }\n\n            $mdDialog.hide(data);\n        }\n\n        function dismiss() {\n            $mdDialog.cancel();\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.blocks')\n        .controller('TableInputController', TableInputController);\n\n    TableInputController.$inject = [\n        '$mdDialog',\n        'validations'\n    ];\n    /* @ngInject */\n    function TableInputController($mdDialog, validations) {\n        var vm = this;\n\n        vm.dismiss = dismiss;\n        vm.apply = apply;\n        vm.validations = validations;\n\n        activate();\n\n        ////////////////\n\n        function activate() {\n\n        }\n\n        function apply() {\n            $mdDialog.hide(vm.model && vm.model.content || null);\n        }\n\n        function dismiss() {\n            $mdDialog.cancel();\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.content')\n        .controller('ContentController', ContentController);\n\n    ContentController.$inject = [\n        '$timeout',\n        '$sce',\n        'id'\n    ];\n\n    /* @ngInject */\n    function ContentController($timeout, $sce, id) {\n        var vm = this;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n            changePage('https://docs.google.com/document/d/' + id + '/?embedded=true')\n        }\n\n        function changePage(url) {\n            url = $sce.trustAsResourceUrl(url);\n            var iframe = angular.element(document.querySelector('#content'));\n            iframe.attr('src', '');\n\n            $timeout(changeUrl, 100);\n\n            ////////////////////////////////////////////\n\n            function changeUrl() {\n                iframe.attr('src', url);\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .controller('CourseController', CourseController);\n\n    CourseController.$inject = [];\n\n    /* @ngInject */\n    function CourseController() {\n        var vm = this;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .controller('CourseDetailController', CourseDetailController);\n\n    CourseDetailController.$inject = [\n        '$state',\n        'AppConstants',\n        'model'\n    ];\n\n    /* @ngInject */\n    function CourseDetailController($state, AppConstants, model) {\n        var vm = this;\n\n        vm.model = model;\n\n        vm.goToItem = goToItem;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n        }\n\n        function goToItem(item) {\n            if (item.mimeType === AppConstants.DOCUMENT_MIME_TYPE) {\n                $state.go('content', {id: item.id}, {reload: true});\n            } else {\n                $state.go('question.list', {sheetId: item.id}, {reload: true});\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.course')\n        .controller('CourseListController', CourseListController);\n\n    CourseListController.$inject = [\n        '$state',\n        'AppConstants',\n        'GoogleAPI'\n    ];\n\n    /* @ngInject */\n    function CourseListController($state, AppConstants, GoogleAPI) {\n        var vm = this;\n\n        vm.items = [];\n\n        vm.goToItem = goToItem;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n            listCourses();\n        }\n\n        function goToItem(id) {\n            $state.go('course.detail', {id: id}, {reload: true});\n        }\n\n        function listCourses() {\n            GoogleAPI.items(AppConstants.ROOT_FOLDER_ID, [AppConstants.FOLDER_MIME_TYPE]).then(onThen);\n\n\n            /////////////////////////////////////////////////////\n\n            function onThen(t) {\n                console.log('data in the final block');\n                console.log(t.files);\n                vm.items = t.files;\n            }\n        }\n\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.home')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = [];\n    /* @ngInject */\n    function HomeController() {\n        var vm = this;\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.layout')\n        .controller('SidebarController', SidebarController);\n\n    SidebarController.$inject = [\n        '$state',\n        'routerHelper',\n        'MenuGroups'\n    ];\n    /* @ngInject */\n    function SidebarController($state, routerHelper, MenuGroups) {\n        var vm = this;\n\n        var states = routerHelper.getStates();\n        vm.isCurrent = isCurrent;\n\n        activate();\n\n        /////////////////////\n\n        function activate() {\n            refreshNavRoutes();\n        }\n\n        function refreshNavRoutes() {\n            var routes = states.filter(filter).sort(sort);\n\n            vm.routes = [];\n\n            var groups = {};\n            routes.forEach(onIterate);\n\n            var i = 1;\n            for (var index in groups) {\n                if (groups.hasOwnProperty(index)) {\n                    var order = (index === 'root') ? 0 : i++;\n                    var text = 'layout.sidebar.groups.' + index;\n                    if (index.indexOf('plugin.') > -1) {\n                        text = index.replace('plugin.', '') + '.title';\n                    }\n                    vm.routes[order] = angular.extend(\n                        {},\n                        {\n                            name: index,\n                            text: text\n                        },\n                        groups[index]\n                    );\n                }\n            }\n\n            ////////////////////////////////////////////////\n\n            function filter(r) {\n                return !r.abstract &&\n                    (\n                        !r.settings || r.settings.showOnMenu !== false\n                    );\n            }\n\n            function sort(r1, r2) {\n                if (!r1.settings || !r2.settings) {\n                    return 0;\n                }\n                return r1.settings.order - r2.settings.order;\n            }\n\n            function onIterate(item) {\n                if (!item.settings) {\n                    return true;\n                }\n                var group = item.settings.group = item.settings.group || angular.extend({}, MenuGroups.ROOT);\n\n                if (!angular.isObject(group)) {\n                    group = {\n                        name: group\n                    };\n                }\n\n                if (angular.isUndefined(groups[group.name])) {\n                    groups[group.name] = {\n                        items: [],\n                        icon: group.icon\n                    };\n                }\n\n                groups[group.name].items.push(\n                    angular.extend(\n                        {},\n                        item.settings,\n                        {\n                            name: item.name\n                        }\n                    )\n                );\n            }\n        }\n\n        function isCurrent(route) {\n            if (!route.title || !$state.current || !$state.current.title) {\n                return '';\n            }\n            var menuName = route.title;\n            return $state.current.title.substr(0, menuName.length) === menuName ? 'current' : '';\n        }\n    }\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .controller('QuestionListController', QuestionListController);\n\n    QuestionListController.$inject = [\n        '$state',\n        'GoogleAPI',\n        'sheetId'\n    ];\n\n    /* @ngInject */\n    function QuestionListController($state, GoogleAPI, sheetId) {\n        var vm = this;\n\n        vm.items = [];\n\n        vm.submitAnswer = submitAnswer;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n            listQuestions();\n        }\n\n        function submitAnswer() {\n            // $state.go('question.detail', {id: id}, {reload: true});\n            console.log(vm.items);\n        }\n\n        function listQuestions() {\n            GoogleAPI.questions(sheetId).then(onThen);\n\n            /////////////////////////////////////////////////////\n\n            function onThen(response) {\n                console.log('data in the final block', response);\n                vm.items = response;\n            }\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('app.question')\n        .controller('QuestionController', QuestionController);\n\n    QuestionController.$inject = [];\n\n    /* @ngInject */\n    function QuestionController() {\n        var vm = this;\n\n        activate();\n\n        ////////////////////////////////////////\n\n        function activate() {\n        }\n    }\n\n})(angular);\n;\n/**\n * Developed by Navid Ghahremani (ghahramani.navid@gmail.com)\n */\n\n(function (angular) {\n    'use strict';\n\n    angular\n        .module('smartApp')\n        .constant('AppConstants', {\n            FOLDER_MIME_TYPE: 'application/vnd.google-apps.folder',\n            SPREADSHEET_MIME_TYPE: 'application/vnd.google-apps.spreadsheet',\n            DOCUMENT_MIME_TYPE: 'application/vnd.google-apps.document',\n            QUESTION_SHEET_ID: '1FqmeBTcnVTOTNeXegnXTuczrLTbqtGXh0kO5bXRej2M',\n            ROOT_FOLDER_ID: '0B7TUAIgyr7KDaUw1X0c3dDlVeEU',\n            API_KEY: 'AIzaSyAPv2lxveRF_vRWo8vLY4juoq40CvNDsTM'\n        });\n\n})(angular);\n;(function(){angular.module('smartApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/contents/ContentView.html','<iframe id=\"content\" scrolling=\"yes\" flex></iframe>');\n$templateCache.put('app/courses/CourseView.html','<div flex layout=\"column\"><div ui-view=\"body\" flex></div></div>');\n$templateCache.put('app/home/HomeView.html','<span data-translate>home.message</span>');\n$templateCache.put('app/questions/QuestionView.html','<div flex layout=\"column\"><div ui-view=\"body\" flex></div></div>');\n$templateCache.put('app/courses/detail/CourseDetailView.html','<md-list class=\"md-dense\" flex><md-subheader class=\"md-no-sticky\"><span data-translate>course.title</span></md-subheader><md-list-item class=\"md-2-line\" ng-repeat=\"item in vm.model.files\" ng-click=\"vm.goToItem(item)\"><ng-letter-avatar dynamic=\"true\" classes=\"md-avatar\" shape=\"round\" data=\"{{item.name}}\"></ng-letter-avatar><div class=\"md-list-item-text\" layout=\"column\"><h4>{{item.name}}</h4><p>{{item.type}}</p></div></md-list-item></md-list>');\n$templateCache.put('app/courses/list/CourseListView.html','<md-list class=\"md-dense\" flex><md-subheader class=\"md-no-sticky\"><span data-translate>course.title</span></md-subheader><md-list-item class=\"md-2-line\" ng-repeat=\"item in vm.items\" ng-click=\"vm.goToItem(item.id)\"><ng-letter-avatar dynamic=\"true\" classes=\"md-avatar\" shape=\"round\" data=\"{{item.name}}\"></ng-letter-avatar><div class=\"md-list-item-text\" layout=\"column\"><h4>{{item.name}}</h4><p>{{item.type}}</p></div></md-list-item></md-list>');\n$templateCache.put('app/layouts/error/AccessDeniedView.html','<div layout=\"row\" flex ng-cloak><span class=\"hipster\"></span><div layout=\"column\" flex><h1 data-translate>error.title</h1><p flex data-translate>error.403</p></div></div>');\n$templateCache.put('app/layouts/error/ErrorView.html','<div layout=\"row\" flex ng-cloak><span class=\"hipster\"></span><div layout=\"column\" flex><h1 data-translate>error.title</h1><p flex class=\"text-red\" ng-if=\"errorMessage\">{{errorMessage | translate}}</p></div></div>');\n$templateCache.put('app/layouts/navigation-bar/DialogView.html','<md-dialog flex=\"50\"><form ng-cloak><md-content><div class=\"md-dialog-container\" flex layout-fill id=\"tocDialog\"><md-dialog flex><md-toolbar md-scroll-shrink><div class=\"md-toolbar-tools\">Course contents</div></md-toolbar><md-content layout=\"column\" style=\"height: 600px\" md-theme=\"altTheme\"><section><md-subheader class=\"md-warn\">Contents (6)</md-subheader><md-list layout=\"column\" layout-padding><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>What is a pronoun?</h3></div></md-list-item><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>Past participles in English</h3></div></md-list-item><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>Nouns vs verbs</h3></div></md-list-item><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>Nouns vs verbs</h3></div></md-list-item><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>Nouns vs verbs</h3></div></md-list-item><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>Nouns vs verbs</h3></div></md-list-item></md-list></section><section><md-subheader class=\"md-warn\">Exams (1)</md-subheader><md-list layout=\"column\" layout-padding><md-list-item class=\"md-3-line\"><div class=\"md-list-item-text\"><h3>Final Exam of the course</h3></div></md-list-item></md-list></section></md-content></md-dialog></div></md-content></form></md-dialog>');\n$templateCache.put('app/layouts/navigation-bar/SidenavMenuView.html','<md-toolbar class=\"md-theme-light\"><h1 class=\"md-toolbar-tools\" data-translate>global.menu.title</h1></md-toolbar><md-content layout=\"column\" class=\"sidenav-menu\"><div layout=\"row\" layout-align=\"start center\" flex><md-icon>business</md-icon><md-button href=\"/merchant-portal\" target=\"_self\"><label data-translate>global.menu.merchant_portal.button</label><md-tooltip><span data-translate>global.menu.merchant_portal.tooltip</span></md-tooltip></md-button><span flex></span></div><div layout=\"row\" layout-align=\"start center\" flex ng-if=\"!vm.isAuthenticated()\"><md-icon>person_outline</md-icon><md-button ng-click=\"vm.login()\"><label data-translate>global.menu.account.login</label></md-button><span flex></span></div><div layout=\"row\" layout-align=\"start center\" flex has-authority=\"ROLE_CTA\"><md-icon>store_mall_directory</md-icon><md-menu><div layout=\"row\" layout-align=\"start center\" flex><md-button md-menu-origin ng-click=\"$mdOpenMenu($event)\"><span ng-if=\"vm.selectedMerchant\">{{vm.selectedMerchant.login | capitalize}}</span> <span ng-if=\"!vm.selectedMerchant\" data-translate>global.menu.merchant.select</span></md-button><md-button class=\"md-icon-button\" ng-if=\"vm.selectedMerchant\" ng-click=\"vm.clearMerchant()\"><md-icon>clear</md-icon></md-button><span flex></span></div><md-menu-content width=\"4\"><form name=\"searchMerchantForm\" layout=\"column\"><md-input-container class=\"md-margin\" md-no-float><input type=\"text\" placeholder=\"{{\\'global.menu.merchant.search\\' | translate}}\" ng-model=\"vm.merchantQuery\" ng-change=\"vm.searchMerchant(vm.merchantQuery)\"></md-input-container><md-list flex ng-model=\"vm.selectedMerchant\"><md-list-item class=\"md-3-line\" ng-repeat=\"merchant in vm.merchants\" ng-model-options=\"{trackBy: $value.id}\" ng-click=\"vm.selectMerchant(merchant)\" md-padding><div class=\"md-avatar\"><ng-letter-avatar width=\"40\" height=\"40\" shape=\"round\" data=\"{{merchant.login}}\"></ng-letter-avatar></div><div class=\"md-list-item-text\" layout=\"column\"><h3>{{merchant.login}}</h3><h4><strong>{{merchant.firstName}} {{merchant.lastName}}</strong></h4><p>{{merchant.email}}</p></div><md-divider></md-divider></md-list-item></md-list></form></md-menu-content></md-menu><span flex></span></div><div layout=\"row\" layout-align=\"start center\" flex><md-icon>language</md-icon><md-menu ng-controller=\"LanguageController as vm\"><div layout=\"row\" layout-align=\"start center\" flex><md-button md-menu-origin ng-click=\"$mdOpenMenu($event)\"><label data-translate>global.menu.language</label></md-button></div><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"language in vm.languages\"><md-button ng-click=\"vm.changeLanguage(language)\"><label>{{language | findLanguageFromKey}}</label></md-button></md-menu-item></md-menu-content></md-menu><span flex></span></div><div ng-if=\"vm.isAuthenticated()\" layout=\"row\" layout-align=\"start center\" flex><md-icon>person</md-icon><md-menu><div layout=\"row\" layout-align=\"start center\" flex><md-button md-menu-origin ng-click=\"$mdOpenMenu($event)\"><span>{{vm.account.login | capitalize}}</span></md-button><span flex></span></div><md-menu-content width=\"4\"><md-menu-item><div layout=\"row\"><md-button ng-click=\"vm.logout()\"><md-icon>power</md-icon><label data-translate>global.menu.account.logout</label></md-button></div></md-menu-item></md-menu-content></md-menu><span flex></span></div><div layout=\"row\" layout-align=\"start center\" flex><md-icon>open_in_new</md-icon><md-button href=\"https://wiki.hepsiburada.net/display/MSD\" target=\"_blank\"><label data-translate>global.menu.sdw.button</label></md-button><span flex></span></div></md-content>');\n$templateCache.put('app/layouts/sidebar/SidebarView.html','');\n$templateCache.put('app/questions/list/QuestionListView.html','<div layout=\"column\" flex><md-list class=\"md-dense\" flex><md-list-item class=\"md-2-line\" ng-repeat=\"item in vm.items\"><ng-form name=\"answerForm\" layout=\"column\" flex><span class=\"md-body-2\" data-translate>{{item.name}}</span><div ng-switch=\"item.type\" class=\"md-padding\"><div ng-switch-when=\"checkbox\" layout=\"column\"><md-checkbox flex ng-repeat=\"answer in item.answers\" ng-model=\"item.selectedAnswer[answer.name]\"><span>{{answer.name}}</span></md-checkbox></div><div ng-switch-when=\"radio\" layout=\"column\"><md-radio-group ng-model=\"item.selectedAnswer\"><md-radio-button ng-repeat=\"answer in item.answers\" value=\"{{answer.name}}\" class=\"md-primary\">{{answer.name}}</md-radio-button></md-radio-group></div><div ng-switch-when=\"text\" layout=\"column\"><md-input-container flex><label data-translate>question.answer</label><input name=\"answer\" ng-required=\"true\" ng-model=\"item.selectedAnswer\"><div ng-messages=\"answerForm.answer.$error\" ng-minlength=\"1\"><div ng-message-exp=\"[\\'required\\', \\'minlength\\']\"><span translate translate-values=\"{length: 1}\">global.messages.error.min</span></div></div></md-input-container></div></div></ng-form></md-list-item></md-list><div layout=\"row\" flex><span flex></span><md-button ng-click=\"vm.submitAnswer()\" class=\"md-raised md-accent\"><md-icon>save</md-icon><span data-translate>global.buttons.save</span></md-button></div></div>');\n$templateCache.put('app/blocks/util/directives/AlertComponentView.html','<md-toolbar md-theme=\"alert\" class=\"md-alert-theme md-{{item.type}} md-hue-2\" ng-cloak ng-repeat=\"item in vm.alerts\"><div class=\"md-toolbar-tools\"><span flex class=\"md-flex md-body-1\" ng-if=\"vm.interpolation\" data-translate translate-values=\"{{item.params}}\" translate-interpolation=\"{{vm.interpolation}}\">{{item.msg}}</span> <span flex class=\"md-flex md-body-1\" ng-if=\"!vm.interpolation\" data-translate translate-values=\"{{item.params}}\">{{item.msg}}</span><md-button class=\"md-action md-icon-button\" ng-if=\"!item.timeout\" ng-click=\"item.close(vm.alerts)\"><md-icon>close</md-icon></md-button></div></md-toolbar>');\n$templateCache.put('app/blocks/util/directives/AlertProviderDialogTemplate.html','<md-toast md-theme=\"alert\"><div class=\"md-toast-content\" md-colors=\"::{background: \\'alert-{{vm.type}}-900\\'}\"><span class=\"md-toast-text\" ng-if=\"vm.interpolation\" translate-interpolation=\"{{vm.interpolation}}\" flex data-translate translate-values=\"{{vm.params}}\">{{vm.content}}</span> <span class=\"md-toast-text\" ng-if=\"!vm.interpolation\" flex data-translate translate-values=\"{{vm.params}}\">{{vm.content}}</span><md-button class=\"md-action\" ng-click=\"vm.close()\"><md-icon>close</md-icon></md-button></div></md-toast>');\n$templateCache.put('app/blocks/util/directives/CustomTableView.html','<div layout=\"column\" flex><div><div layout-padding ng-if=\"vm.searchBox\"><form flex name=\"customDataTable.search.form\" ng-submit=\"vm.onSearch(vm.searchForm.searchText)\"><div layout-gt-xs=\"row\" layout-align=\"center center\"><md-input-container class=\"md-block\" flex-gt-xs><label data-translate>global.customDataTable.input.search</label><input ng-model=\"vm.searchForm.searchText\" type=\"text\"></md-input-container><md-button ng-click=\"vm.searchForm.searchText = \\'\\'; vm.onSearch(vm.searchForm.searchText)\"><md-icon>clear</md-icon><span data-translate>global.customDataTable.button.clear</span></md-button><md-button ng-click=\"vm.onSearch(vm.searchForm.searchText)\" class=\"md-raised md-primary\"><md-icon>search</md-icon><span data-translate>global.customDataTable.button.search</span></md-button></div></form></div></div><ng-transclude></ng-transclude><div flex class=\"menus\" layout-wrap layout=\"row\" layout-align=\"end center\" ng-if=\"vm.showHideColumns\"><div layout-align=\"center center\" layout=\"column\" ng-transclude=\"leftShowHideMenu\"></div><span flex></span><md-menu ng-if=\"vm.showHideColumns\"><md-button ng-click=\"$mdOpenMenu()\"><md-icon>visibility</md-icon><span data-translate>global.customDataTable.button.showHide</span></md-button><md-menu-content width=\"10\" layout-padding><md-menu-item ng-repeat=\"header in vm.tHeaders\" ng-if=\"header.showHide\" style=\"padding: 2px 0\"><md-checkbox ng-model=\"header.visible\"><span data-translate>{{header.text}}</span></md-checkbox></md-menu-item></md-menu-content></md-menu></div><md-divider></md-divider><div layout=\"row\"><md-button ng-click=\"vm.onToggleSelectAll()\" ng-if=\"vm.enableSelectAll\" class=\"no-margin-left\"><md-icon>select_all</md-icon><label ng-if=\"!vm.selectedAll\" data-translate>global.buttons.select_all</label><label ng-if=\"vm.selectedAll\" translate-interpolation=\"messageformat\" data-translate translate-values=\"{count:vm.getSelectedCount()}\">global.buttons.clear_all_item</label></md-button><div layout-align=\"center center\" layout=\"column\" ng-transclude=\"leftPaginationMenu\"></div><md-table-pagination md-label=\"{{vm.pagination.label}}\" ng-show=\"!vm.hidePager\" flex md-boundary-links=\"true\" md-on-paginate=\"vm.paginate\" md-total=\"{{vm.total}}\" md-page=\"vm.pagination.page\" md-limit=\"vm.pagination.size\" md-limit-options=\"vm.pagination.options\" md-page-select></md-table-pagination></div><md-table-container infinite-scroll=\"vm.increaseTotalDisplayed()\" infinite-scroll-distance=\"3\" infinite-scroll-listen-for-event=\"page-data:updated\"><table md-table ng-class=\"{\\'controllable-table\\': vm.selectable && vm.keyControlled && !vm.controllKeyPressed}\" ng-attr-md-row-select=\"vm.selectable\" ng-attr-multiple=\"{{vm.selectable && vm.selectable == \\'multiple\\' || undefined}}\" ng-model=\"vm.selected\"><thead md-head md-order=\"vm.order\" md-on-reorder=\"vm.reorder\" fix-head><tr md-row><th ng-repeat=\"header in vm.tHeaders\" md-column md-numeric=\"header.numeric\" ng-attr-flex=\"{{header.flex ? header.flex : \\'\\'}}\" ng-attr-md-order-by=\"{{header.orderBy ? header.orderBy : \\'\\'}}\" ng-attr-md-desc=\"{{header.desc ? \\'true\\' : \\'false\\'}}\" ng-hide=\"vm.showHideColumns && !header.visible\"><md-tooltip class=\"tt-multiline\" md-direction=\"bottom\" ng-if=\"header.tooltip\"><span data-translate>{{header.tooltip}}</span></md-tooltip><span data-translate flex>{{header.text}}</span><md-button ng-if=\"header.edit && header.edit.enabled !== false\" ng-click=\"vm.onEdit(header)\" class=\"md-icon-button\"><md-icon class=\"table-header-icon\">edit</md-icon></md-button><md-button ng-if=\"header.search && header.search.enabled !== false\" ng-click=\"vm.onSearchFilter(header)\" class=\"md-icon-button\"><md-icon class=\"table-header-icon\">search</md-icon></md-button></th></tr></thead><tbody md-body><tr ng-if=\"vm.isEmptyData\"><td colspan=\"{{vm.selectable ? (vm.keyControlled ? vm.tHeaders.length : vm.tHeaders.length + 1) : vm.tHeaders.length}}\"><div layout=\"column\" flex layout-align=\"center center\"><span data-translate>global.messages.info.no_data_added</span></div></td></tr><tr ng-if=\"!vm.isEmptyData\" md-row md-auto-select=\"vm.rowSelectable\" md-on-deselect=\"vm.onRowDeselect\" ng-class=\"{\\'md-selected\\': model.selected}\" md-on-select=\"vm.onRowSelect\" ng-dblclick=\"vm.onDblRowSelect(model)\" md-select=\"model\" ng-repeat=\"model in vm.displayedData\" md-select-id=\"id\"><td md-cell ng-repeat=\"header in vm.tHeaders\" data-header-text=\"{{header.text | translate}}\" ng-click=\"vm.onCellClick($event, model, header)\" ng-dblclick=\"vm.onCellDblClick($event, model, header)\" ng-keypress=\"vm.onCellEnterPress($event, model, header)\" ng-hide=\"vm.showHideColumns && !header.visible\" ng-class=\"[{\\'no-padding\\': header.cellTemplateUrl}, vm.getCellClass(header, model)]\" show-custom-validation=\"vm.getValue(model, header.validations)\"><div ng-if=\"header.cellTemplateUrl\" dynamic-controller=\"header.controller\" controller-as=\"vm\" controller-data=\"vm.getSuitableData(model, header)\" template-url=\"header.cellTemplateUrl\"></div><!-- default for other types --><div class=\"{{header.classes}}\" ng-if=\"!header.cellTemplateUrl\"><md-button ng-if=\"header.onClick\" ng-click=\"vm.callFunction(header.onClick, model, header)\"><label data-translate translate-values=\"{{vm.getSuitableDataParams(model, header)}}\">{{vm.getCorrectValue(model, header)}}</label></md-button><span ng-if=\"!header.onClick\" ng-switch on=\"header.type\"><span ng-switch-when=\"text\" translate translate-values=\"{{vm.getSuitableDataParams(model, header)}}\">{{vm.getLimitedAndEscapedData(model, header)}} </span><span ng-switch-default translate translate-values=\"{{vm.getSuitableDataParams(model, header)}}\">{{vm.getSuitableData(model, header)}}</span></span></div></td></tr></tbody></table></md-table-container><md-divider></md-divider><md-table-pagination md-label=\"{{vm.pagination.label}}\" ng-show=\"!vm.hidePager\" md-boundary-links=\"true\" md-on-paginate=\"vm.paginate\" md-total=\"{{vm.total}}\" md-page=\"vm.pagination.page\" md-limit=\"vm.pagination.size\" md-limit-options=\"vm.pagination.options\" md-page-select></md-table-pagination></div>');\n$templateCache.put('app/blocks/util/directives/DatetimePickerView.html','<div layout=\"row\" layout-align=\"center center\" flex=\"100\"><label data-translate data-ng-if=\"vm.label\">{{vm.label}}</label><md-input-container flex=\"75\" layout=\"row\"><md-datepicker aria-label=\"date\" ng-if=\"vm.showDate\" ng-model=\"vm.dateValue\" md-min-date=\"vm.minDate\" md-max-date=\"vm.maxDate\" md-open-on-focus></md-datepicker></md-input-container><md-input-container flex=\"20\" layout=\"row\" data-ng-if=\"vm.showTime\"><input aria-label=\"date\" size=\"5\" ui-timepicker=\"timePickerOptions\" ng-model=\"vm.timeValue\"></md-input-container></div>');\n$templateCache.put('app/blocks/util/directives/TextAngularView.html','<text-angular aria-label=\"true\" name=\"{{vm.name}}\" ng-model=\"vm.value\" ta-toolbar=\"{{vm.toolbar}}\" rows=\"{{vm.rows}}\" focus=\"{{vm.focus}}\" flex layout=\"column\" text-angular-max-length=\"{{vm.maxLength}}\" layout-fill></text-angular>');\n$templateCache.put('app/blocks/util/services/CustomEditDialogView.html','<md-edit-dialog><div layout=\"column\" class=\"md-content\"><div ng-if=\"size === \\'large\\'\" class=\"md-title\">{{title || \\'Edit\\'}}</div><form name=\"editDialog\" layout=\"column\" ng-submit=\"submit(model)\"><md-input-container md-no-float><input name=\"input\" ng-model=\"vm.model\" md-autofocus placeholder=\"{{vm.placeholder}}\" ng-attr-type=\"{{vm.getType() || \\'text\\'}}\"><div ng-messages=\"editDialog.input.$error\"><div ng-repeat=\"(key, message) in messages\" ng-message=\"key\">{{message}}</div></div></md-input-container></form></div><div ng-if=\"size === \\'large\\'\" layout=\"row\" layout-align=\"end\" class=\"md-actions\"><md-button class=\"md-primary\" ng-click=\"vm.dismiss()\">{{vm.cancel}}</md-button><md-button class=\"md-primary\" ng-click=\"submit()\">{{vm.ok}}</md-button></div></md-edit-dialog>');\n$templateCache.put('app/blocks/util/services/RichTextEditDialogView.html','<md-dialog flex=\"50\"><md-dialog-content><div layout=\"column\"><custom-text-angular name=\"description\" focus=\"true\" value=\"vm.model\"></custom-text-angular></div></md-dialog-content><md-dialog-actions><md-button ng-click=\"vm.save()\"><md-icon>save</md-icon></md-button></md-dialog-actions></md-dialog>');\n$templateCache.put('app/bower_components/angular-lazy-img/demo/container-demo.html','<!DOCTYPE html><html ng-app=\"demo-app\" id=\"ng-app\" class=\"js\"><head lang=\"en\"><meta charset=\"UTF-8\"><title>angular-lazy-img</title><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"></head><body ng-controller=\"appCtrl as $ctrl\"><div lazy-img-container style=\"height: 600px; border: 1px solid black; overflow: scroll\"><!-- example how to use image set using srcset and ratio --><div ng-repeat=\"image in $ctrl.images track by image.id\"><img src=\"./loader.gif\" lazy-img=\"{{image.url}}\" lazy-img-error=\"http://placehold.it/200x200?text=lazy-img-error\" width=\"200\" height=\"200\" style=\"margin-bottom: 300px\"></div></div><script src=\"../node_modules/angular/angular.js\"></script><script src=\"../release/angular-lazy-img.js\"></script><script src=\"./index.js\"></script></body></html>');\n$templateCache.put('app/bower_components/angular-lazy-img/demo/index.html','<!DOCTYPE html><html ng-app=\"demo-app\" id=\"ng-app\" class=\"js\"><head lang=\"en\"><meta charset=\"UTF-8\"><title>angular-lazy-img</title><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"></head><body ng-controller=\"appCtrl as $ctrl\"><div><!-- example how to use image set using srcset and ratio --><div ng-repeat=\"image in $ctrl.images track by image.id\"><img src=\"./loader.gif\" lazy-img=\"{{image.url}}\" lazy-img-error=\"http://placehold.it/200x200?text=lazy-img-error\" width=\"200\" height=\"200\" style=\"margin-bottom: 300px\"></div>></div><script src=\"../node_modules/angular/angular.js\"></script><script src=\"../release/angular-lazy-img.js\"></script><script src=\"./index.js\"></script></body></html>');\n$templateCache.put('app/bower_components/angular-lazy-img/demo/search.html','<!DOCTYPE html><html ng-app=\"demo-app\" id=\"ng-app\" class=\"js\"><head lang=\"en\"><meta charset=\"UTF-8\"><title>angular-lazy-img</title><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"></head><body ng-controller=\"appCtrl as $ctrl\"><div><!-- example how to use image set using srcset and ratio --> <input type=\"text\" ng-model=\"$ctrl.search.randomColorName\" ng-change=\"$ctrl.refresh()\"><div ng-repeat=\"image in $ctrl.images | filter:$ctrl.search track by image.id\"><img src=\"./loader.gif\" lazy-img=\"{{image.url}}\" lazy-img-error=\"http://placehold.it/200x200?text=lazy-img-error\" width=\"200\" height=\"200\" style=\"margin-bottom: 300px\"></div></div><script src=\"../node_modules/angular/angular.js\"></script><script src=\"../release/angular-lazy-img.js\"></script><script src=\"./index.js\"></script></body></html>');\n$templateCache.put('app/bower_components/messageformat/doc/MessageFormat.formatters.html','<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>JSDoc: Namespace: formatters</title><script src=\"scripts/prettify/prettify.js\"></script><script src=\"scripts/prettify/lang-css.js\"></script><!--[if lt IE 9]>\\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\\n    <![endif]--><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/prettify-tomorrow.css\"><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/jsdoc-default.css\"></head><body><div id=\"main\"><h1 class=\"page-title\">Namespace: formatters</h1><section><header><h2><span class=\"ancestors\"><a href=\"MessageFormat.html\">MessageFormat</a>.</span>formatters</h2></header><article><div class=\"container-overview\"><div class=\"description\"><p>Default number formatting functions in the style of ICU\\'s <a href=\"http://icu-project.org/apiref/icu4j/com/ibm/icu/text/MessageFormat.html\">simpleArg syntax</a> implemented using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a> object defined by ECMA-402.</p><p><strong>Note</strong>: Intl is not defined in default Node until 0.11.15 / 0.12.0, so earlier versions require a <a href=\"https://www.npmjs.com/package/intl\">polyfill</a>. Therefore MessageFormat.withIntlSupport needs to be true for these functions to be available for inclusion in the output.</p></div><h5 class=\"subsection-title\">Properties:</h5><table class=\"props\"><thead><tr><th>Name</th><th>Type</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>number</code></td><td class=\"type\"><span class=\"param-type\">function</span></td><td class=\"description last\"><p>Represent a number as an integer, percent or currency value</p></td></tr><tr><td class=\"name\"><code>date</code></td><td class=\"type\"><span class=\"param-type\">function</span></td><td class=\"description last\"><p>Represent a date as a full/long/default/short string</p></td></tr><tr><td class=\"name\"><code>time</code></td><td class=\"type\"><span class=\"param-type\">function</span></td><td class=\"description last\"><p>Represent a time as a full/long/default/short string</p></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line126\">line 126</a></li></ul></dd><dt class=\"tag-see\">See:</dt><dd class=\"tag-see\"><ul><li><a href=\"MessageFormat.html#setIntlSupport\">MessageFormat#setIntlSupport</a></li></ul></dd></dl><h3>Examples</h3><pre class=\"prettyprint\"><code>var mf = new MessageFormat(\\'en\\').setIntlSupport(true);\\nmf.currency = \\'EUR\\';\\nvar cf = mf.compile(\\'The total is {V,number,currency}.\\');\\n\\ncf({ V: 5.5 })\\n// \\'The total is \\u20AC5.50.\\'</code></pre><pre class=\"prettyprint\"><code>var mf = new MessageFormat(\\'en\\', null, {number: MessageFormat.number});\\nmf.currency = \\'EUR\\';\\nvar cf = mf.compile(\\'The total is {V,number,currency}.\\');\\n\\ncf({ V: 5.5 })\\n// \\'The total is \\u20AC5.50.\\'</code></pre></div></article></section></div><nav><h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"MessageFormat.html\">MessageFormat</a></li><li><a href=\"Runtime.html\">Runtime</a></li></ul><h3>Namespaces</h3><ul><li><a href=\"MessageFormat.formatters.html\">formatters</a></li></ul></nav><br class=\"clear\"><footer>Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.4.0</a> on Sat Feb 20 2016 18:21:44 GMT+0200 (EET)</footer><script>prettyPrint();</script><script src=\"scripts/linenumber.js\"></script></body></html>');\n$templateCache.put('app/bower_components/messageformat/doc/MessageFormat.html','<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>JSDoc: Class: MessageFormat</title><script src=\"scripts/prettify/prettify.js\"></script><script src=\"scripts/prettify/lang-css.js\"></script><!--[if lt IE 9]>\\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\\n    <![endif]--><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/prettify-tomorrow.css\"><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/jsdoc-default.css\"></head><body><div id=\"main\"><h1 class=\"page-title\">Class: MessageFormat</h1><section><header><h2>MessageFormat</h2></header><article><div class=\"container-overview\"><h4 class=\"name\" id=\"MessageFormat\"><span class=\"type-signature\"></span>new MessageFormat<span class=\"signature\">(locale<span class=\"signature-attributes\">opt</span>, pluralFunc<span class=\"signature-attributes\">opt</span>, formatters<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4><div class=\"description\"><p>Create a new message formatter</p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th>Default</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>locale</code></td><td class=\"type\"><span class=\"param-type\">string</span> | <span class=\"param-type\">Array.&lt;string></span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\">\"en\"</td><td class=\"description last\"><p>The locale to use, with fallbacks</p></td></tr><tr><td class=\"name\"><code>pluralFunc</code></td><td class=\"type\"><span class=\"param-type\">function</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\"></td><td class=\"description last\"><p>Optional custom pluralization function</p></td></tr><tr><td class=\"name\"><code>formatters</code></td><td class=\"type\"><span class=\"param-type\">Array.&lt;function()></span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\"></td><td class=\"description last\"><p>Optional custom formatting functions</p></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line51\">line 51</a></li></ul></dd></dl></div><h3 class=\"subsection-title\">Namespaces</h3><dl><dt><a href=\"MessageFormat.formatters.html\">formatters</a></dt><dd></dd></dl><h3 class=\"subsection-title\">Members</h3><h4 class=\"name\" id=\".plurals\"><span class=\"type-signature\">(static) </span>plurals<span class=\"type-signature\"> :Object.&lt;string, function()></span></h4><div class=\"description\"><p>Pluralization functions from <a href=\"http://github.com/eemeli/make-plural.js\">make-plural</a></p></div><h5>Type:</h5><ul><li><span class=\"param-type\">Object.&lt;string, function()></span></li></ul><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line89\">line 89</a></li></ul></dd></dl><h3 class=\"subsection-title\">Methods</h3><h4 class=\"name\" id=\"compile\"><span class=\"type-signature\"></span>compile<span class=\"signature\">(messages, opt<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {function}</span></h4><div class=\"description\"><p>Compile messages into an executable function with clean string representation.</p><p>If <code>messages</code> is a single string including ICU MessageFormat declarations, <code>opt</code> is ignored and the returned function takes a single Object parameter <code>d</code> representing each of the input\\'s defined variables. The returned function will be defined in a local scope that includes all the required runtime variables.</p><p>If <code>messages</code> is a map of keys to strings, or a map of namespace keys to such key/string maps, the returned function will fill the specified global with javascript functions matching the structure of the input. In such use, the result of <code>compile()</code> may be serialized using its <code>toString()</code> method, including all required runtime function definitions. If <code>opt.global</code> is null, calling the output function will return the object itself.</p><p>Together, the input parameters should match the following patterns:</p><pre class=\"prettyprint source lang-js\"><code> messages = &quot;string&quot; || { key0: &quot;string0&quot;, key1: &quot;string1&quot;, ... } || {\\n   ns0: { key0: &quot;string0&quot;, key1: &quot;string1&quot;, ...  },\\n   ns1: { key0: &quot;string0&quot;, key1: &quot;string1&quot;, ...  },\\n   ...\\n }\\n\\n opt = null || {\\n   locale: null || {\\n     ns0: &quot;lc0&quot; || [ &quot;lc0&quot;, ... ],\\n     ns1: &quot;lc1&quot; || [ &quot;lc1&quot;, ... ],\\n     ...\\n   },\\n   global: null || &quot;module.exports&quot; || &quot;exports&quot; || &quot;i18n&quot; || ...\\n }</code></pre></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th>Default</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>messages</code></td><td class=\"type\"><span class=\"param-type\">string</span> | <span class=\"param-type\">Object</span></td><td class=\"attributes\"></td><td class=\"default\"></td><td class=\"description last\"><p>The input message(s) to be compiled, in ICU MessageFormat</p></td></tr><tr><td class=\"name\"><code>opt</code></td><td class=\"type\"><span class=\"param-type\">Object</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\">{}</td><td class=\"description last\"><p>Options controlling output for non-simple intput</p><h6>Properties</h6><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th>Default</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>locale</code></td><td class=\"type\"><span class=\"param-type\">Object</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\"></td><td class=\"description last\"><p>The locales to use for the messages, with a structure matching that of <code>messages</code></p></td></tr><tr><td class=\"name\"><code>global</code></td><td class=\"type\"><span class=\"param-type\">string</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\">\"\"</td><td class=\"description last\"><p>The global variable that the output function should use, or a null string for none. &quot;exports&quot; and &quot;module.exports&quot; are recognised as special cases.</p></td></tr></tbody></table></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line499\">line 499</a></li></ul></dd></dl><h5>Returns:</h5><div class=\"param-desc\"><p>The first match found for the given locale(s)</p></div><dl><dt>Type</dt><dd><span class=\"param-type\">function</span></dd></dl><h5>Examples</h5><pre class=\"prettyprint\"><code>var mf = new MessageFormat(\\'en\\');\\nvar cf = mf.compile(\\'A {TYPE} example.\\');\\n\\ncf({ TYPE: \\'simple\\' })\\n// \\'A simple example.\\'\\n\\ncf.toString()\\n// \\'function (d) { return \"A \" + d.TYPE + \" example.\"; }\\'</code></pre><pre class=\"prettyprint\"><code>var fs = require(\\'fs\\');\\nvar mf = new MessageFormat(\\'en\\');\\nvar msgSet = {\\n  a: \\'A {TYPE} example.\\',\\n  b: \\'This has {COUNT, plural, one{one member} other{# members}}.\\'\\n};\\nvar cfSet = mf.compile(msgSet, { global: \\'module.exports\\' });\\nvar str = cfSet.toString().replace(/^[^{]*{/, \\'\\').replace(/}\\\\s*$/, \\'\\').trim();\\nfs.writeFileSync(\\'messages.js\\', str);\\n...\\nvar messages = require(\\'./messages\\');\\n\\nmessages.a({ TYPE: \\'more complex\\' })\\n// \\'A more complex example.\\'\\n\\nmessages.b({ COUNT: 2 })\\n// \\'This has 2 members.\\'</code></pre><pre class=\"prettyprint\"><code>var mf = new MessageFormat(\\'en\\');\\nmf.runtime.pluralFuncs.fi = MessageFormat.plurals.fi;\\nmf.compile({\\n  en: { a: \\'A {TYPE} example.\\',\\n        b: \\'This is the {COUNT, selectordinal, one{#st} two{#nd} few{#rd} other{#th}} example.\\' },\\n  fi: { a: \\'{TYPE} esimerkki.\\',\\n        b: \\'T\\xE4m\\xE4 on {COUNT, selectordinal, other{#.}} esimerkki.\\' }\\n}, {\\n  locale: { en: \\'en\\', fi: \\'fi\\' },\\n  global: \\'i18n\\'\\n})(this);\\n\\ni18n.en.b({ COUNT: 3 })\\n// \\'This is the 3rd example.\\'\\n\\ni18n.fi.b({ COUNT: 3 })\\n// \\'T\\xE4m\\xE4 on 3. esimerkki.\\'</code></pre><h4 class=\"name\" id=\"setBiDiSupport\"><span class=\"type-signature\"></span>setBiDiSupport<span class=\"signature\">(enable<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {<a href=\"MessageFormat.html\">MessageFormat</a>}</span></h4><div class=\"description\"><p>Enable or disable the addition of Unicode control characters to all input to preserve the integrity of the output when mixing LTR and RTL text.</p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th>Default</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>enable</code></td><td class=\"type\"><span class=\"param-type\">boolean</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\">true</td><td class=\"description last\"></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line174\">line 174</a></li></ul></dd><dt class=\"tag-see\">See:</dt><dd class=\"tag-see\"><ul><li><a href=\"http://cldr.unicode.org/development/development-process/design-proposals/bidi-handling-of-structured-text\">http://cldr.unicode.org/development/development-process/design-proposals/bidi-handling-of-structured-text</a></li></ul></dd></dl><h5>Returns:</h5><div class=\"param-desc\"><p>The MessageFormat instance, to allow for chaining</p></div><dl><dt>Type</dt><dd><span class=\"param-type\"><a href=\"MessageFormat.html\">MessageFormat</a></span></dd></dl><h5>Example</h5><pre class=\"prettyprint\"><code>// upper case stands for RTL characters, output is shown as rendered\\nvar mf = new MessageFormat(\\'en\\');\\n\\nmf.compile(\\'{0} >> {1} >> {2}\\')([\\'first\\', \\'SECOND\\', \\'THIRD\\']);\\n// \\'first >> THIRD &lt;&lt; SECOND\\'\\n\\nmf.setBiDiSupport(true);\\nmf.compile(\\'{0} >> {1} >> {2}\\')([\\'first\\', \\'SECOND\\', \\'THIRD\\']);\\n// \\'first >> SECOND >> THIRD\\'</code></pre><h4 class=\"name\" id=\"setIntlSupport\"><span class=\"type-signature\"></span>setIntlSupport<span class=\"signature\">(enable<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {<a href=\"MessageFormat.html\">MessageFormat</a>}</span></h4><div class=\"description\"><p>Enable or disable support for the default formatters, which require the <code>Intl</code> object. Note that this can\\'t be autodetected, as the environment in which the formatted text is compiled into Javascript functions is not necessarily the same environment in which they will get executed.</p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th>Default</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>enable</code></td><td class=\"type\"><span class=\"param-type\">boolean</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\">true</td><td class=\"description last\"></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line199\">line 199</a></li></ul></dd><dt class=\"tag-see\">See:</dt><dd class=\"tag-see\"><ul><li><a href=\"MessageFormat.formatters.html\">MessageFormat.formatters</a></li></ul></dd></dl><h5>Returns:</h5><div class=\"param-desc\"><p>The MessageFormat instance, to allow for chaining</p></div><dl><dt>Type</dt><dd><span class=\"param-type\"><a href=\"MessageFormat.html\">MessageFormat</a></span></dd></dl><h5>Example</h5><pre class=\"prettyprint\"><code>// Intl is not defined in default Node until 0.11.15 / 0.12.0\\nvar Intl = require(\\'intl\\');\\nvar mf = new MessageFormat(\\'en\\').setIntlSupport(true);\\nmf.currency = \\'EUR\\';\\n\\nmf.compile(\\'The total is {V,number,currency}.\\')({ V: 5.5 });\\n// \\'The total is \\u20AC5.50.\\'</code></pre></article></section></div><nav><h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"MessageFormat.html\">MessageFormat</a></li><li><a href=\"Runtime.html\">Runtime</a></li></ul><h3>Namespaces</h3><ul><li><a href=\"MessageFormat.formatters.html\">formatters</a></li></ul></nav><br class=\"clear\"><footer>Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.4.0</a> on Sat Feb 20 2016 18:21:44 GMT+0200 (EET)</footer><script>prettyPrint();</script><script src=\"scripts/linenumber.js\"></script></body></html>');\n$templateCache.put('app/bower_components/messageformat/doc/Runtime.html','<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>JSDoc: Class: Runtime</title><script src=\"scripts/prettify/prettify.js\"></script><script src=\"scripts/prettify/lang-css.js\"></script><!--[if lt IE 9]>\\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\\n    <![endif]--><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/prettify-tomorrow.css\"><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/jsdoc-default.css\"></head><body><div id=\"main\"><h1 class=\"page-title\">Class: Runtime</h1><section><header><h2>Runtime</h2></header><article><div class=\"container-overview\"><h4 class=\"name\" id=\"Runtime\"><span class=\"type-signature\"></span>new Runtime<span class=\"signature\">(locale<span class=\"signature-attributes\">opt</span>, pluralFunc<span class=\"signature-attributes\">opt</span>, formatters<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4><div class=\"description\"><p>A set of utility functions that are called by the compiled Javascript functions, these are included locally in the output of <a href=\"MessageFormat.html#compile\">compile()</a>.</p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>locale</code></td><td class=\"type\"><span class=\"param-type\">string</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"description last\"><p>The parsed locale</p></td></tr><tr><td class=\"name\"><code>pluralFunc</code></td><td class=\"type\"><span class=\"param-type\">function</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"description last\"><p>Pluralization function for the locale</p></td></tr><tr><td class=\"name\"><code>formatters</code></td><td class=\"type\"><span class=\"param-type\">Array.&lt;function()></span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"description last\"><p>Optional custom formatting functions</p></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line213\">line 213</a></li></ul></dd></dl></div><h3 class=\"subsection-title\">Members</h3><h4 class=\"name\" id=\"fmt\"><span class=\"type-signature\"></span>fmt<span class=\"type-signature\"> :Object.&lt;string, function()></span></h4><div class=\"description\"><p>Custom formatting functions called by <code>{var, fn[, args]*}</code> syntax</p><p>For examples, see <a href=\"MessageFormat.formatters.html\">MessageFormat.formatters</a></p></div><h5>Type:</h5><ul><li><span class=\"param-type\">Object.&lt;string, function()></span></li></ul><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line229\">line 229</a></li></ul></dd><dt class=\"tag-see\">See:</dt><dd class=\"tag-see\"><ul><li><a href=\"MessageFormat.formatters.html\">MessageFormat.formatters</a></li></ul></dd></dl><h4 class=\"name\" id=\"pluralFuncs\"><span class=\"type-signature\"></span>pluralFuncs<span class=\"type-signature\"> :Object.&lt;string, function()></span></h4><div class=\"description\"><p>Pluralization functions included in compiled output</p></div><h5>Type:</h5><ul><li><span class=\"param-type\">Object.&lt;string, function()></span></li></ul><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line219\">line 219</a></li></ul></dd></dl><h3 class=\"subsection-title\">Methods</h3><h4 class=\"name\" id=\"number\"><span class=\"type-signature\"></span>number<span class=\"signature\">(value, offset<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4><div class=\"description\"><p>Utility function for <code>#</code> in plural rules</p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th>Default</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>value</code></td><td class=\"type\"><span class=\"param-type\">number</span></td><td class=\"attributes\"></td><td class=\"default\"></td><td class=\"description last\"><p>The value to operate on</p></td></tr><tr><td class=\"name\"><code>offset</code></td><td class=\"type\"><span class=\"param-type\">number</span></td><td class=\"attributes\">&lt;optional><br></td><td class=\"default\">0</td><td class=\"description last\"><p>An optional offset, set by the surrounding context</p></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line241\">line 241</a></li></ul></dd></dl><h4 class=\"name\" id=\"plural\"><span class=\"type-signature\"></span>plural<span class=\"signature\">(value, offset, lcfunc, data, isOrdinal<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"> &rarr; {string}</span></h4><div class=\"description\"><p>Utility function for <code>{N, plural|selectordinal, ...}</code></p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th>Attributes</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>value</code></td><td class=\"type\"><span class=\"param-type\">number</span></td><td class=\"attributes\"></td><td class=\"description last\"><p>The key to use to find a pluralization rule</p></td></tr><tr><td class=\"name\"><code>offset</code></td><td class=\"type\"><span class=\"param-type\">number</span></td><td class=\"attributes\"></td><td class=\"description last\"><p>An offset to apply to <code>value</code></p></td></tr><tr><td class=\"name\"><code>lcfunc</code></td><td class=\"type\"><span class=\"param-type\">function</span></td><td class=\"attributes\"></td><td class=\"description last\"><p>A locale function from <code>pluralFuncs</code></p></td></tr><tr><td class=\"name\"><code>data</code></td><td class=\"type\"><span class=\"param-type\">Object.&lt;string, string></span></td><td class=\"attributes\"></td><td class=\"description last\"><p>The object from which results are looked up</p></td></tr><tr><td class=\"name\"><code>isOrdinal</code></td><td class=\"type\"><span class=\"param-type\">boolean</span></td><td class=\"attributes\">&lt;nullable><br></td><td class=\"description last\"><p>If true, use ordinal rather than cardinal rules</p></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line254\">line 254</a></li></ul></dd></dl><h5>Returns:</h5><div class=\"param-desc\"><p>The result of the pluralization</p></div><dl><dt>Type</dt><dd><span class=\"param-type\">string</span></dd></dl><h4 class=\"name\" id=\"select\"><span class=\"type-signature\"></span>select<span class=\"signature\">(value, data)</span><span class=\"type-signature\"> &rarr; {string}</span></h4><div class=\"description\"><p>Utility function for <code>{N, select, ...}</code></p></div><h5>Parameters:</h5><table class=\"params\"><thead><tr><th>Name</th><th>Type</th><th class=\"last\">Description</th></tr></thead><tbody><tr><td class=\"name\"><code>value</code></td><td class=\"type\"><span class=\"param-type\">number</span></td><td class=\"description last\"><p>The key to use to find a selection</p></td></tr><tr><td class=\"name\"><code>data</code></td><td class=\"type\"><span class=\"param-type\">Object.&lt;string, string></span></td><td class=\"description last\"><p>The object from which results are looked up</p></td></tr></tbody></table><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line267\">line 267</a></li></ul></dd></dl><h5>Returns:</h5><div class=\"param-desc\"><p>The result of the select statement</p></div><dl><dt>Type</dt><dd><span class=\"param-type\">string</span></dd></dl><h4 class=\"name\" id=\"toString\"><span class=\"type-signature\"></span>toString<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4><div class=\"description\"><p>Custom stringifier</p></div><dl class=\"details\"><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line304\">line 304</a></li></ul></dd></dl><h5>Example</h5><pre class=\"prettyprint\"><code>var mf = new MessageFormat(\\'en\\');\\nconsole.log(mf.runtime.toString())\\n> var pluralFuncs = {\\n>   en: function (n, ord) {\\n>     var s = String(n).split(\\'.\\'), v0 = !s[1], t0 = Number(s[0]) == n,\\n>         n10 = t0 &amp;&amp; s[0].slice(-1), n100 = t0 &amp;&amp; s[0].slice(-2);\\n>     if (ord) return (n10 == 1 &amp;&amp; n100 != 11) ? \\'one\\'\\n>         : (n10 == 2 &amp;&amp; n100 != 12) ? \\'two\\'\\n>         : (n10 == 3 &amp;&amp; n100 != 13) ? \\'few\\'\\n>         : \\'other\\';\\n>     return (n == 1 &amp;&amp; v0) ? \\'one\\' : \\'other\\';\\n>   }\\n> };\\n> var fmt = {};\\n> var number = function (value, offset) {\\n>   if (isNaN(value)) throw new Error(\"\\'\" + value + \"\\' isn\\'t a number.\");\\n>   return value - (offset || 0);\\n> };\\n> var plural = function (value, offset, lcfunc, data, isOrdinal) {\\n>   if ({}.hasOwnProperty.call(data, value)) return data[value]();\\n>   if (offset) value -= offset;\\n>   var key = lcfunc(value, isOrdinal);\\n>   if (key in data) return data[key]();\\n>   return data.other();\\n> };\\n> var select = function (value, data) {\\n>   if ({}.hasOwnProperty.call(data, value)) return data[value]();\\n>   return data.other()\\n> };</code></pre></article></section></div><nav><h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"MessageFormat.html\">MessageFormat</a></li><li><a href=\"Runtime.html\">Runtime</a></li></ul><h3>Namespaces</h3><ul><li><a href=\"MessageFormat.formatters.html\">formatters</a></li></ul></nav><br class=\"clear\"><footer>Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.4.0</a> on Sat Feb 20 2016 18:21:44 GMT+0200 (EET)</footer><script>prettyPrint();</script><script src=\"scripts/linenumber.js\"></script></body></html>');\n$templateCache.put('app/bower_components/messageformat/doc/index.html','<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>JSDoc: Home</title><script src=\"scripts/prettify/prettify.js\"></script><script src=\"scripts/prettify/lang-css.js\"></script><!--[if lt IE 9]>\\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\\n    <![endif]--><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/prettify-tomorrow.css\"><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/jsdoc-default.css\"></head><body><div id=\"main\"><h1 class=\"page-title\">Home</h1><h3></h3><section><header><h2>messageformat.js</h2></header><article><div class=\"container-overview\"><div class=\"description\"><p>messageformat.js - ICU PluralFormat + SelectFormat for JavaScript</p></div><dl class=\"details\"><dt class=\"tag-version\">Version:</dt><dd class=\"tag-version\"><ul class=\"dummy\"><li>0.3.1</li></ul></dd><dt class=\"tag-author\">Author:</dt><dd class=\"tag-author\"><ul><li>Alex Sexton - @SlexAxton, Eemeli Aro</li></ul></dd><dt class=\"tag-copyright\">Copyright:</dt><dd class=\"tag-copyright\"><ul class=\"dummy\"><li>2012-2016 Alex Sexton, Eemeli Aro, and Contributors</li></ul></dd><dt class=\"tag-license\">License:</dt><dd class=\"tag-license\"><ul class=\"dummy\"><li>To use or fork, MIT. To contribute back, Dojo CLA</li></ul></dd><dt class=\"tag-source\">Source:</dt><dd class=\"tag-source\"><ul class=\"dummy\"><li><a href=\"messageformat.js.html\">messageformat.js</a>, <a href=\"messageformat.js.html#line1\">line 1</a></li></ul></dd></dl></div></article></section></div><nav><h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"MessageFormat.html\">MessageFormat</a></li><li><a href=\"Runtime.html\">Runtime</a></li></ul><h3>Namespaces</h3><ul><li><a href=\"MessageFormat.formatters.html\">formatters</a></li></ul></nav><br class=\"clear\"><footer>Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.4.0</a> on Sat Feb 20 2016 18:21:43 GMT+0200 (EET)</footer><script>prettyPrint();</script><script src=\"scripts/linenumber.js\"></script></body></html>');\n$templateCache.put('app/bower_components/messageformat/doc/messageformat.js.html','<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>JSDoc: Source: messageformat.js</title><script src=\"scripts/prettify/prettify.js\"></script><script src=\"scripts/prettify/lang-css.js\"></script><!--[if lt IE 9]>\\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\\n    <![endif]--><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/prettify-tomorrow.css\"><link type=\"text/css\" rel=\"stylesheet\" href=\"styles/jsdoc-default.css\"></head><body><div id=\"main\"><h1 class=\"page-title\">Source: messageformat.js</h1><section><article><pre class=\"prettyprint source linenums\"><code>/** @file messageformat.js - ICU PluralFormat + SelectFormat for JavaScript\\n *\\n * @author Alex Sexton - @SlexAxton, Eemeli Aro\\n * @version 0.3.1\\n * @copyright 2012-2016 Alex Sexton, Eemeli Aro, and Contributors\\n * @license To use or fork, MIT. To contribute back, Dojo CLA  */\\n\\n\\n/** Utility function for quoting an Object\\'s key value iff required\\n *\\n * @private  */\\nfunction propname(key, obj) {\\n  /* Quote the key if it contains invalid characters or is an\\n   * ECMAScript 3rd Edition reserved word.\\n   */\\n  if (/^[A-Z_$][0-9A-Z_$]*$/i.test(key) &amp;&amp;\\n     [\\'break\\', \\'continue\\', \\'delete\\', \\'else\\', \\'for\\', \\'function\\', \\'if\\', \\'in\\', \\'new\\',\\n      \\'return\\', \\'this\\', \\'typeof\\', \\'var\\', \\'void\\', \\'while\\', \\'with\\', \\'case\\', \\'catch\\',\\n      \\'default\\', \\'do\\', \\'finally\\', \\'instanceof\\', \\'switch\\', \\'throw\\', \\'try\\'].indexOf(key) &lt; 0) {\\n    return obj ? obj + \\'.\\' + key : key;\\n  } else {\\n    var jkey = JSON.stringify(key);\\n    return obj ? obj + \\'[\\' + jkey + \\']\\' : jkey;\\n  }\\n}\\n\\n/** Utility formatter function for enforcing Bidi Structured Text by using UCC\\n *\\n * @private  */\\nfunction bidiMarkText(text, locale) {\\n  function isLocaleRTL(locale) {\\n    /* list inlined from data extracted from CLDR v27 &amp; v28\\n     * to verify/recreate, use the following:\\n     *   git clone https://github.com/unicode-cldr/cldr-misc-full.git\\n     *   cd cldr-misc-full/main/\\n     *   grep characterOrder -r . | tr \\'\"/\\' \\'\\\\t\\' | cut -f2,6 | grep -C4 right-to-left\\n     */\\n    var rtlLanguages = [\\'ar\\', \\'ckb\\', \\'fa\\', \\'he\\', \\'ks($|[^bfh])\\', \\'lrc\\', \\'mzn\\', \\'pa-Arab\\', \\'ps\\', \\'ug\\', \\'ur\\', \\'uz-Arab\\', \\'yi\\'];\\n    return new RegExp(\\'^\\' + rtlLanguages.join(\\'|^\\')).test(locale);\\n  }\\n  var mark = JSON.stringify(isLocaleRTL(locale) ? \\'\\\\u200F\\' : \\'\\\\u200E\\');\\n  return mark + \\' + \\' + text + \\' + \\' + mark;\\n}\\n\\n/** Create a new message formatter\\n *\\n * @class\\n * @param {string|string[]} [locale=\"en\"] - The locale to use, with fallbacks\\n * @param {function} [pluralFunc] - Optional custom pluralization function\\n * @param {function[]} [formatters] - Optional custom formatting functions  */\\nfunction MessageFormat(locale, pluralFunc, formatters) {\\n  if (!locale) {\\n    this.lc = [\\'en\\'];\\n  } else if (typeof locale == \\'string\\') {\\n    this.lc = [];\\n    for (var l = locale; l; l = l.replace(/[-_]?[^-_]*$/, \\'\\')) this.lc.push(l);\\n  } else {\\n    this.lc = locale;\\n  }\\n  if (!pluralFunc) {\\n    if (this.lc.every(function(l){\\n      pluralFunc = MessageFormat.plurals[l];\\n      return !pluralFunc;\\n    })) {\\n      throw new Error(\\'Plural function for locale `\\' + this.lc.join(\\',\\') + \\'` not found\\');\\n    }\\n  }\\n  this.runtime = new Runtime(this.lc[0], pluralFunc, formatters);\\n}\\n\\nmodule.exports = MessageFormat;\\n\\n\\n/** Parse an input string to its AST\\n *\\n *  Precompiled from `lib/messageformat-parser.pegjs` by\\n *  {@link http://pegjs.org/ PEG.js}. Included in MessageFormat object\\n *  to enable testing.\\n *\\n * @private  */\\nMessageFormat._parse = require(\\'./messageformat-parser\\').parse;\\n\\n\\n/** Pluralization functions from\\n *  {@link http://github.com/eemeli/make-plural.js make-plural}\\n *\\n * @memberof MessageFormat\\n * @type Object.&lt;string,function>  */\\nMessageFormat.plurals = require(\\'make-plural/plurals\\');\\n\\n\\n/** Default number formatting functions in the style of ICU\\'s\\n *  {@link http://icu-project.org/apiref/icu4j/com/ibm/icu/text/MessageFormat.html simpleArg syntax}\\n *  implemented using the\\n *  {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl Intl}\\n *  object defined by ECMA-402.\\n *\\n *  **Note**: Intl is not defined in default Node until 0.11.15 / 0.12.0, so\\n *  earlier versions require a {@link https://www.npmjs.com/package/intl polyfill}.\\n *  Therefore {@link MessageFormat.withIntlSupport} needs to be true for these\\n *  functions to be available for inclusion in the output.\\n *\\n * @see MessageFormat#setIntlSupport\\n *\\n * @namespace\\n * @memberof MessageFormat\\n * @property {function} number - Represent a number as an integer, percent or currency value\\n * @property {function} date - Represent a date as a full/long/default/short string\\n * @property {function} time - Represent a time as a full/long/default/short string\\n *\\n * @example\\n * var mf = new MessageFormat(\\'en\\').setIntlSupport(true);\\n * mf.currency = \\'EUR\\';\\n * var cf = mf.compile(\\'The total is {V,number,currency}.\\');\\n *\\n * cf({ V: 5.5 })\\n * // \\'The total is \\u20AC5.50.\\'\\n *\\n * @example\\n * var mf = new MessageFormat(\\'en\\', null, {number: MessageFormat.number});\\n * mf.currency = \\'EUR\\';\\n * var cf = mf.compile(\\'The total is {V,number,currency}.\\');\\n *\\n * cf({ V: 5.5 })\\n * // \\'The total is \\u20AC5.50.\\'  */\\nMessageFormat.formatters = {\\n  number: function(self) {\\n    return new Function(\"v,lc,p\",\\n      \"return Intl.NumberFormat(lc,\\\\n\" +\\n      \"    p==\\'integer\\' ? {maximumFractionDigits:0}\\\\n\" +\\n      \"  : p==\\'percent\\' ? {style:\\'percent\\'}\\\\n\" +\\n      \"  : p==\\'currency\\' ? {style:\\'currency\\', currency:\\'\" + (self.currency || \\'USD\\') + \"\\', minimumFractionDigits:2, maximumFractionDigits:2}\\\\n\" +\\n      \"  : {}).format(v)\"\\n    );\\n  },\\n  date: function(v,lc,p) {\\n    var o = {day:\\'numeric\\', month:\\'short\\', year:\\'numeric\\'};\\n    switch (p) {\\n      case \\'full\\': o.weekday = \\'long\\';\\n      case \\'long\\': o.month = \\'long\\'; break;\\n      case \\'short\\': o.month = \\'numeric\\';\\n    }\\n    return (new Date(v)).toLocaleDateString(lc, o)\\n  },\\n  time: function(v,lc,p) {\\n    var o = {second:\\'numeric\\', minute:\\'numeric\\', hour:\\'numeric\\'};\\n    switch (p) {\\n      case \\'full\\': case \\'long\\': o.timeZoneName = \\'short\\'; break;\\n      case \\'short\\': delete o.minute;\\n    }\\n    return (new Date(v)).toLocaleTimeString(lc, o)\\n  }\\n};\\n\\n/** Enable or disable the addition of Unicode control characters to all input\\n *  to preserve the integrity of the output when mixing LTR and RTL text.\\n *\\n * @see http://cldr.unicode.org/development/development-process/design-proposals/bidi-handling-of-structured-text\\n *\\n * @memberof MessageFormat\\n * @param {boolean} [enable=true]\\n * @returns {MessageFormat} The MessageFormat instance, to allow for chaining\\n *\\n * @example\\n * // upper case stands for RTL characters, output is shown as rendered\\n * var mf = new MessageFormat(\\'en\\');\\n *\\n * mf.compile(\\'{0} >> {1} >> {2}\\')([\\'first\\', \\'SECOND\\', \\'THIRD\\']);\\n * // \\'first >> THIRD &lt;&lt; SECOND\\'\\n *\\n * mf.setBiDiSupport(true);\\n * mf.compile(\\'{0} >> {1} >> {2}\\')([\\'first\\', \\'SECOND\\', \\'THIRD\\']);\\n * // \\'first >> SECOND >> THIRD\\'  */\\nMessageFormat.prototype.setBiDiSupport = function(enable) {\\n    this.bidiSupport = !!enable || (typeof enable == \\'undefined\\');\\n    return this;\\n};\\n\\n\\n/** Enable or disable support for the default formatters, which require the\\n *  `Intl` object. Note that this can\\'t be autodetected, as the environment\\n *  in which the formatted text is compiled into Javascript functions is not\\n *  necessarily the same environment in which they will get executed.\\n *\\n * @see MessageFormat.formatters\\n *\\n * @memberof MessageFormat\\n * @param {boolean} [enable=true]\\n * @returns {MessageFormat} The MessageFormat instance, to allow for chaining\\n *\\n * @example\\n * // Intl is not defined in default Node until 0.11.15 / 0.12.0\\n * var Intl = require(\\'intl\\');\\n * var mf = new MessageFormat(\\'en\\').setIntlSupport(true);\\n * mf.currency = \\'EUR\\';\\n *\\n * mf.compile(\\'The total is {V,number,currency}.\\')({ V: 5.5 });\\n * // \\'The total is \\u20AC5.50.\\'  */\\nMessageFormat.prototype.setIntlSupport = function(enable) {\\n    this.withIntlSupport = !!enable || (typeof enable == \\'undefined\\');\\n    return this;\\n};\\n\\n\\n/** A set of utility functions that are called by the compiled Javascript\\n *  functions, these are included locally in the output of {@link\\n *  MessageFormat#compile compile()}.\\n *\\n * @class\\n * @param {string} [locale] - The parsed locale\\n * @param {function} [pluralFunc] - Pluralization function for the locale\\n * @param {function[]} [formatters] - Optional custom formatting functions  */\\nfunction Runtime(locale, pluralFunc, formatters) {\\n\\n  /** Pluralization functions included in compiled output\\n   *\\n   * @instance\\n   * @type Object.&lt;string,function>  */\\n  this.pluralFuncs = {};\\n  this.pluralFuncs[locale] = pluralFunc;\\n\\n  /** Custom formatting functions called by `{var, fn[, args]*}` syntax\\n   *\\n   *  For examples, see {@link MessageFormat.formatters}\\n   *\\n   * @instance\\n   * @see MessageFormat.formatters\\n   * @type Object.&lt;string,function>  */\\n  this.fmt = {};\\n  if (formatters) for (var f in formatters) {\\n    this.fmt[f] = formatters[f];\\n  }\\n}\\n\\nRuntime.prototype = {\\n\\n  /** Utility function for `#` in plural rules\\n   *\\n   * @param {number} value - The value to operate on\\n   * @param {number} [offset=0] - An optional offset, set by the surrounding context  */\\n  number: function(value, offset) {\\n    if (isNaN(value)) throw new Error(\"\\'\" + value + \"\\' isn\\'t a number.\");\\n    return value - (offset || 0);\\n  },\\n\\n  /** Utility function for `{N, plural|selectordinal, ...}`\\n   *\\n   * @param {number} value - The key to use to find a pluralization rule\\n   * @param {number} offset - An offset to apply to `value`\\n   * @param {function} lcfunc - A locale function from `pluralFuncs`\\n   * @param {Object.&lt;string,string>} data - The object from which results are looked up\\n   * @param {?boolean} isOrdinal - If true, use ordinal rather than cardinal rules\\n   * @returns {string} The result of the pluralization  */\\n  plural: function(value, offset, lcfunc, data, isOrdinal) {\\n    if ({}.hasOwnProperty.call(data, value)) return data[value]();\\n    if (offset) value -= offset;\\n    var key = lcfunc(value, isOrdinal);\\n    if (key in data) return data[key]();\\n    return data.other();\\n  },\\n\\n  /** Utility function for `{N, select, ...}`\\n   *\\n   * @param {number} value - The key to use to find a selection\\n   * @param {Object.&lt;string,string>} data - The object from which results are looked up\\n   * @returns {string} The result of the select statement  */\\n  select: function(value, data) {\\n    if ({}.hasOwnProperty.call(data, value)) return data[value]();\\n    return data.other()\\n  },\\n\\n  /** Custom stringifier\\n   *\\n   * @example\\n   * var mf = new MessageFormat(\\'en\\');\\n   * console.log(mf.runtime.toString())\\n   * > var pluralFuncs = {\\n   * >   en: function (n, ord) {\\n   * >     var s = String(n).split(\\'.\\'), v0 = !s[1], t0 = Number(s[0]) == n,\\n   * >         n10 = t0 &amp;&amp; s[0].slice(-1), n100 = t0 &amp;&amp; s[0].slice(-2);\\n   * >     if (ord) return (n10 == 1 &amp;&amp; n100 != 11) ? \\'one\\'\\n   * >         : (n10 == 2 &amp;&amp; n100 != 12) ? \\'two\\'\\n   * >         : (n10 == 3 &amp;&amp; n100 != 13) ? \\'few\\'\\n   * >         : \\'other\\';\\n   * >     return (n == 1 &amp;&amp; v0) ? \\'one\\' : \\'other\\';\\n   * >   }\\n   * > };\\n   * > var fmt = {};\\n   * > var number = function (value, offset) {\\n   * >   if (isNaN(value)) throw new Error(\"\\'\" + value + \"\\' isn\\'t a number.\");\\n   * >   return value - (offset || 0);\\n   * > };\\n   * > var plural = function (value, offset, lcfunc, data, isOrdinal) {\\n   * >   if ({}.hasOwnProperty.call(data, value)) return data[value]();\\n   * >   if (offset) value -= offset;\\n   * >   var key = lcfunc(value, isOrdinal);\\n   * >   if (key in data) return data[key]();\\n   * >   return data.other();\\n   * > };\\n   * > var select = function (value, data) {\\n   * >   if ({}.hasOwnProperty.call(data, value)) return data[value]();\\n   * >   return data.other()\\n   * > };  */\\n  toString: function () {\\n    var _stringify = function(o, level) {\\n      if (typeof o != \\'object\\') {\\n        var funcStr = o.toString().replace(/^(function )\\\\w*/, \\'$1\\');\\n        var indent = /([ \\\\t]*)\\\\S.*$/.exec(funcStr);\\n        return indent ? funcStr.replace(new RegExp(\\'^\\' + indent[1], \\'mg\\'), \\'\\') : funcStr;\\n      }\\n      var s = [];\\n      for (var i in o) if (i != \\'toString\\') {\\n        if (level == 0) s.push(\\'var \\' + i + \\' = \\' + _stringify(o[i], level + 1) + \\';\\\\n\\');\\n        else s.push(propname(i) + \\': \\' + _stringify(o[i], level + 1));\\n      }\\n      if (level == 0) return s.join(\\'\\');\\n      if (s.length == 0) return \\'{}\\';\\n      var indent = \\'  \\'; while (--level) indent += \\'  \\';\\n      return \\'{\\\\n\\' + s.join(\\',\\\\n\\').replace(/^/gm, indent) + \\'\\\\n}\\';\\n    };\\n    return _stringify(this, 0);\\n  }\\n};\\n\\n\\n/** Recursively map an AST to its resulting string\\n *\\n * @memberof MessageFormat\\n * @param ast - the Ast node for which the JS code should be generated\\n * @private  */\\nMessageFormat.prototype._precompile = function(ast, data) {\\n  data = data || { keys: {}, offset: {} };\\n  var r = [], i, tmp, args = [];\\n\\n  switch ( ast.type ) {\\n    case \\'messageFormatPattern\\':\\n      for ( i = 0; i &lt; ast.statements.length; ++i ) {\\n        r.push(this._precompile( ast.statements[i], data ));\\n      }\\n      tmp = r.join(\\' + \\') || \\'\"\"\\';\\n      return data.pf_count ? tmp : \\'function(d) { return \\' + tmp + \\'; }\\';\\n\\n    case \\'messageFormatElement\\':\\n      data.pf_count = data.pf_count || 0;\\n      if ( ast.output ) {\\n        var ret = propname(ast.argumentIndex, \\'d\\');\\n        return this.bidiSupport ? bidiMarkText(ret, this.lc) : ret;\\n      }\\n      else {\\n        data.keys[data.pf_count] = ast.argumentIndex;\\n        return this._precompile( ast.elementFormat, data );\\n      }\\n      return \\'\\';\\n\\n    case \\'elementFormat\\':\\n      args = [ propname(data.keys[data.pf_count], \\'d\\') ];\\n      switch (ast.key) {\\n        case \\'select\\':\\n          args.push(this._precompile(ast.val, data));\\n          return \\'select(\\' + args.join(\\', \\') + \\')\\';\\n        case \\'selectordinal\\':\\n          args = args.concat([ 0, propname(this.lc[0], \\'pluralFuncs\\'), this._precompile(ast.val, data), 1 ]);\\n          return \\'plural(\\' + args.join(\\', \\') + \\')\\';\\n        case \\'plural\\':\\n          data.offset[data.pf_count || 0] = ast.val.offset || 0;\\n          args = args.concat([ data.offset[data.pf_count] || 0, propname(this.lc[0], \\'pluralFuncs\\'), this._precompile(ast.val, data) ]);\\n          return \\'plural(\\' + args.join(\\', \\') + \\')\\';\\n        default:\\n          if (this.withIntlSupport &amp;&amp; !(ast.key in this.runtime.fmt) &amp;&amp; (ast.key in MessageFormat.formatters)) {\\n            tmp = MessageFormat.formatters[ast.key];\\n            this.runtime.fmt[ast.key] = (typeof tmp(this) == \\'function\\') ? tmp(this) : tmp;\\n          }\\n          args.push(JSON.stringify(this.lc));\\n          if (ast.val &amp;&amp; ast.val.length) args.push(JSON.stringify(ast.val.length == 1 ? ast.val[0] : ast.val));\\n          return \\'fmt.\\' + ast.key + \\'(\\' + args.join(\\', \\') + \\')\\';\\n      }\\n\\n    case \\'pluralFormatPattern\\':\\n    case \\'selectFormatPattern\\':\\n      data.pf_count = data.pf_count || 0;\\n      if (ast.type == \\'selectFormatPattern\\') data.offset[data.pf_count] = 0;\\n      var needOther = true;\\n      for (i = 0; i &lt; ast.pluralForms.length; ++i) {\\n        var key = ast.pluralForms[i].key;\\n        if (key === \\'other\\') needOther = false;\\n        var data_copy = JSON.parse(JSON.stringify(data));\\n        data_copy.pf_count++;\\n        r.push(propname(key) + \\': function() { return \\' + this._precompile(ast.pluralForms[i].val, data_copy) + \\';}\\');\\n      }\\n      if (needOther) throw new Error(\"No \\'other\\' form found in \" + ast.type + \" \" + data.pf_count);\\n      return \\'{ \\' + r.join(\\', \\') + \\' }\\';\\n\\n    case \\'string\\':\\n      return JSON.stringify(ast.val || \"\");\\n\\n    case \\'octothorpe\\':\\n      if (!data.pf_count) return \\'\"#\"\\';\\n      args = [ propname(data.keys[data.pf_count-1], \\'d\\') ];\\n      if (data.offset[data.pf_count-1]) args.push(data.offset[data.pf_count-1]);\\n      return \\'number(\\' + args.join(\\', \\') + \\')\\';\\n\\n    default:\\n      throw new Error( \\'Bad AST type: \\' + ast.type );\\n  }\\n};\\n\\n/** Compile messages into an executable function with clean string\\n *  representation.\\n *\\n *  If `messages` is a single string including ICU MessageFormat declarations,\\n *  `opt` is ignored and the returned function takes a single Object parameter\\n *  `d` representing each of the input\\'s defined variables. The returned\\n *  function will be defined in a local scope that includes all the required\\n *  runtime variables.\\n *\\n *  If `messages` is a map of keys to strings, or a map of namespace keys to\\n *  such key/string maps, the returned function will fill the specified global\\n *  with javascript functions matching the structure of the input. In such use,\\n *  the result of `compile()` may be serialized using its `toString()` method,\\n *  including all required runtime function definitions. If `opt.global` is\\n *  null, calling the output function will return the object itself.\\n *\\n *  Together, the input parameters should match the following patterns:\\n *  ```js\\n *  messages = \"string\" || { key0: \"string0\", key1: \"string1\", ... } || {\\n *    ns0: { key0: \"string0\", key1: \"string1\", ...  },\\n *    ns1: { key0: \"string0\", key1: \"string1\", ...  },\\n *    ...\\n *  }\\n *\\n *  opt = null || {\\n *    locale: null || {\\n *      ns0: \"lc0\" || [ \"lc0\", ... ],\\n *      ns1: \"lc1\" || [ \"lc1\", ... ],\\n *      ...\\n *    },\\n *    global: null || \"module.exports\" || \"exports\" || \"i18n\" || ...\\n *  }\\n *  ```\\n *\\n * @memberof MessageFormat\\n * @param {string|Object}\\n *     messages - The input message(s) to be compiled, in ICU MessageFormat\\n * @param {Object} [opt={}] - Options controlling output for non-simple intput\\n * @param {Object} [opt.locale] - The locales to use for the messages, with a\\n *     structure matching that of `messages`\\n * @param {string} [opt.global=\"\"] - The global variable that the output\\n *     function should use, or a null string for none. \"exports\" and\\n *     \"module.exports\" are recognised as special cases.\\n * @returns {function} The first match found for the given locale(s)\\n *\\n * @example\\n * var mf = new MessageFormat(\\'en\\');\\n * var cf = mf.compile(\\'A {TYPE} example.\\');\\n *\\n * cf({ TYPE: \\'simple\\' })\\n * // \\'A simple example.\\'\\n *\\n * cf.toString()\\n * // \\'function (d) { return \"A \" + d.TYPE + \" example.\"; }\\'\\n *\\n * @example\\n * var fs = require(\\'fs\\');\\n * var mf = new MessageFormat(\\'en\\');\\n * var msgSet = {\\n *   a: \\'A {TYPE} example.\\',\\n *   b: \\'This has {COUNT, plural, one{one member} other{# members}}.\\'\\n * };\\n * var cfSet = mf.compile(msgSet, { global: \\'module.exports\\' });\\n * var str = cfSet.toString().replace(/^[^{]*{/, \\'\\').replace(/}\\\\s*$/, \\'\\').trim();\\n * fs.writeFileSync(\\'messages.js\\', str);\\n * ...\\n * var messages = require(\\'./messages\\');\\n *\\n * messages.a({ TYPE: \\'more complex\\' })\\n * // \\'A more complex example.\\'\\n *\\n * messages.b({ COUNT: 2 })\\n * // \\'This has 2 members.\\'\\n *\\n * @example\\n * var mf = new MessageFormat(\\'en\\');\\n * mf.runtime.pluralFuncs.fi = MessageFormat.plurals.fi;\\n * mf.compile({\\n *   en: { a: \\'A {TYPE} example.\\',\\n *         b: \\'This is the {COUNT, selectordinal, one{#st} two{#nd} few{#rd} other{#th}} example.\\' },\\n *   fi: { a: \\'{TYPE} esimerkki.\\',\\n *         b: \\'T\\xE4m\\xE4 on {COUNT, selectordinal, other{#.}} esimerkki.\\' }\\n * }, {\\n *   locale: { en: \\'en\\', fi: \\'fi\\' },\\n *   global: \\'i18n\\'\\n * })(this);\\n *\\n * i18n.en.b({ COUNT: 3 })\\n * // \\'This is the 3rd example.\\'\\n *\\n * i18n.fi.b({ COUNT: 3 })\\n * // \\'T\\xE4m\\xE4 on 3. esimerkki.\\'  */\\nMessageFormat.prototype.compile = function ( messages, opt ) {\\n  var r = {}, lc0 = this.lc,\\n      compileMsg = function(self, msg) {\\n        try {\\n          var ast = MessageFormat._parse(msg);\\n          return self._precompile(ast);\\n        } catch (e) {\\n          throw new Error((ast ? \\'Precompiler\\' : \\'Parser\\') + \\' error: \\' + e.toString());\\n        }\\n      },\\n      stringify = function(r, level) {\\n        if (!level) level = 0;\\n        if (typeof r != \\'object\\') return r;\\n        var o = [], indent = \\'\\';\\n        for (var i = 0; i &lt; level; ++i) indent += \\'  \\';\\n        for (var k in r) o.push(\\'\\\\n\\' + indent + \\'  \\' + propname(k) + \\': \\' + stringify(r[k], level + 1));\\n        return \\'{\\' + o.join(\\',\\') + \\'\\\\n\\' + indent + \\'}\\';\\n      };\\n\\n  if (typeof messages == \\'string\\') {\\n    var f = new Function(\\n        \\'number, plural, select, pluralFuncs, fmt\\',\\n        \\'return \\' + compileMsg(this, messages));\\n    return f(this.runtime.number, this.runtime.plural, this.runtime.select,\\n        this.runtime.pluralFuncs, this.runtime.fmt);\\n  }\\n\\n  opt = opt || {};\\n\\n  for (var ns in messages) {\\n    if (opt.locale) this.lc = opt.locale[ns] &amp;&amp; [].concat(opt.locale[ns]) || lc0;\\n    if (typeof messages[ns] == \\'string\\') {\\n      try { r[ns] = compileMsg(this, messages[ns]); }\\n      catch (e) { e.message = e.message.replace(\\':\\', \\' with `\\' + ns + \\'`:\\'); throw e; }\\n    } else {\\n      r[ns] = {};\\n      for (var key in messages[ns]) {\\n        try { r[ns][key] = compileMsg(this, messages[ns][key]); }\\n        catch (e) { e.message = e.message.replace(\\':\\', \\' with `\\' + key + \\'` in `\\' + ns + \\'`:\\'); throw e; }\\n      }\\n    }\\n  }\\n\\n  this.lc = lc0;\\n  var s = this.runtime.toString() + \\'\\\\n\\';\\n  switch (opt.global || \\'\\') {\\n    case \\'exports\\':\\n      var o = [];\\n      for (var k in r) o.push(propname(k, \\'exports\\') + \\' = \\' + stringify(r[k]));\\n      return new Function(s + o.join(\\';\\\\n\\'));\\n    case \\'module.exports\\':\\n      return new Function(s + \\'module.exports = \\' + stringify(r));\\n    case \\'\\':\\n      return new Function(s + \\'return \\' + stringify(r));\\n    default:\\n      return new Function(\\'G\\', s + propname(opt.global, \\'G\\') + \\' = \\' + stringify(r));\\n  }\\n};\\n</code></pre></article></section></div><nav><h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"MessageFormat.html\">MessageFormat</a></li><li><a href=\"Runtime.html\">Runtime</a></li></ul><h3>Namespaces</h3><ul><li><a href=\"MessageFormat.formatters.html\">formatters</a></li></ul></nav><br class=\"clear\"><footer>Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.4.0</a> on Sat Feb 20 2016 18:21:43 GMT+0200 (EET)</footer><script>prettyPrint();</script><script src=\"scripts/linenumber.js\"></script></body></html>');\n$templateCache.put('app/bower_components/messageformat/example/index.html','<!DOCTYPE html><html><head><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"></script><script>document.write(\\'<script src=\"\\' + (localStorage.getItem(\\'lang\\') ||\\xA0\\'en\\') + \\'/i18n.js\"><\\\\/script>\\')</script></head><body><div id=\"content\"></div><input type=\"button\" value=\"en\" name=\"en\"> <input type=\"button\" value=\"fr\" name=\"fr\"><script>$(\\'<div>\\').text(window.i18n[\\'colors\\'].red()).appendTo(\\'#content\\');\\n      $(\\'<div>\\').text(window.i18n[\\'colors\\'].blue()).appendTo(\\'#content\\');\\n      $(\\'<div>\\').text(window.i18n[\\'colors\\'].green()).appendTo(\\'#content\\');\\n      $(\\'<div>\\').text(window.i18n[\\'sub/folder/plural\\'].test({NUM: 1})).appendTo(\\'#content\\');\\n      $(\\'<div>\\').text(window.i18n[\\'sub/folder/plural\\'].test({NUM: 2})).appendTo(\\'#content\\');\\n\\n      $(\\'input\\').click(function(e){\\n        e.preventDefault();\\n        var lang = $(e.target).attr(\\'name\\');\\n        localStorage.setItem(\\'lang\\', lang);\\n        location.reload();\\n      });</script></body></html>');\n$templateCache.put('app/bower_components/swagger-ui/dist/index.html','<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Swagger UI</title><link rel=\"icon\" type=\"image/png\" href=\"images/favicon-32x32.png\" sizes=\"32x32\"><link rel=\"icon\" type=\"image/png\" href=\"images/favicon-16x16.png\" sizes=\"16x16\"><link href=\"css/typography.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/reset.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/screen.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/reset.css\" media=\"print\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/print.css\" media=\"print\" rel=\"stylesheet\" type=\"text/css\"><script src=\"lib/object-assign-pollyfill.js\" type=\"text/javascript\"></script><script src=\"lib/jquery-1.8.0.min.js\" type=\"text/javascript\"></script><script src=\"lib/jquery.slideto.min.js\" type=\"text/javascript\"></script><script src=\"lib/jquery.wiggle.min.js\" type=\"text/javascript\"></script><script src=\"lib/jquery.ba-bbq.min.js\" type=\"text/javascript\"></script><script src=\"lib/handlebars-2.0.0.js\" type=\"text/javascript\"></script><script src=\"lib/lodash.min.js\" type=\"text/javascript\"></script><script src=\"lib/backbone-min.js\" type=\"text/javascript\"></script><script src=\"swagger-ui.js\" type=\"text/javascript\"></script><script src=\"lib/highlight.9.1.0.pack.js\" type=\"text/javascript\"></script><script src=\"lib/highlight.9.1.0.pack_extended.js\" type=\"text/javascript\"></script><script src=\"lib/jsoneditor.min.js\" type=\"text/javascript\"></script><script src=\"lib/marked.js\" type=\"text/javascript\"></script><script src=\"lib/swagger-oauth.js\" type=\"text/javascript\"></script><!-- Some basic translations --><!-- <script src=\\'lang/translator.js\\' type=\\'text/javascript\\'></script> --><!-- <script src=\\'lang/ru.js\\' type=\\'text/javascript\\'></script> --><!-- <script src=\\'lang/en.js\\' type=\\'text/javascript\\'></script> --><script type=\"text/javascript\">$(function () {\\n      var url = window.location.search.match(/url=([^&]+)/);\\n      if (url && url.length > 1) {\\n        url = decodeURIComponent(url[1]);\\n      } else {\\n        url = \"http://petstore.swagger.io/v2/swagger.json\";\\n      }\\n\\n      hljs.configure({\\n        highlightSizeThreshold: 5000\\n      });\\n\\n      // Pre load translate...\\n      if(window.SwaggerTranslator) {\\n        window.SwaggerTranslator.translate();\\n      }\\n      window.swaggerUi = new SwaggerUi({\\n        url: url,\\n        dom_id: \"swagger-ui-container\",\\n        supportedSubmitMethods: [\\'get\\', \\'post\\', \\'put\\', \\'delete\\', \\'patch\\'],\\n        onComplete: function(swaggerApi, swaggerUi){\\n          if(typeof initOAuth == \"function\") {\\n            initOAuth({\\n              clientId: \"your-client-id\",\\n              clientSecret: \"your-client-secret-if-required\",\\n              realm: \"your-realms\",\\n              appName: \"your-app-name\",\\n              scopeSeparator: \",\",\\n              additionalQueryStringParams: {}\\n            });\\n          }\\n\\n          if(window.SwaggerTranslator) {\\n            window.SwaggerTranslator.translate();\\n          }\\n        },\\n        onFailure: function(data) {\\n          log(\"Unable to Load SwaggerUI\");\\n        },\\n        docExpansion: \"none\",\\n        jsonEditor: false,\\n        defaultModelRendering: \\'schema\\',\\n        showRequestHeaders: false\\n      });\\n\\n      window.swaggerUi.load();\\n\\n      function log() {\\n        if (\\'console\\' in window) {\\n          console.log.apply(console, arguments);\\n        }\\n      }\\n  });</script></head><body class=\"swagger-section\"><div id=\"header\"><div class=\"swagger-ui-wrap\"><a id=\"logo\" href=\"http://swagger.io\"><img class=\"logo__img\" alt=\"swagger\" height=\"30\" width=\"30\" src=\"images/logo_small.png\"><span class=\"logo__title\">swagger</span></a><form id=\"api_selector\"><div class=\"input\"><input placeholder=\"http://example.com/api\" id=\"input_baseUrl\" name=\"baseUrl\" type=\"text\"></div><div id=\"auth_container\"></div><div class=\"input\"><a id=\"explore\" class=\"header__btn\" href=\"#\" data-sw-translate>Explore</a></div></form></div></div><div id=\"message-bar\" class=\"swagger-ui-wrap\" data-sw-translate>&nbsp;</div><div id=\"swagger-ui-container\" class=\"swagger-ui-wrap\"></div></body></html>');\n$templateCache.put('app/bower_components/swagger-ui/dist/o2c.html','<script>var qp = null;\\nif(window.location.hash) {\\n  qp = location.hash.substring(1);\\n}\\nelse {\\n  qp = location.search.substring(1);\\n}\\nqp = qp ? JSON.parse(\\'{\"\\' + qp.replace(/&/g, \\'\",\"\\').replace(/=/g,\\'\":\"\\') + \\'\"}\\',\\n  function(key, value) {\\n    return key===\"\"?value:decodeURIComponent(value) }\\n  ):{}\\n\\nif (window.opener.swaggerUi.tokenUrl)\\n    window.opener.processOAuthCode(qp);\\nelse\\n    window.opener.onOAuthComplete(qp);\\n\\nwindow.close();</script>');\n$templateCache.put('app/blocks/util/directives/table-input/BooleanInputView.html','<md-dialog flex=\"30\"><form name=\"form\" ng-cloak><md-toolbar><div class=\"md-toolbar-tools\"><h2><span data-translate>global.customDataTable.edit_popup.title</span></h2><span flex></span><md-button ng-click=\"vm.dismiss()\" class=\"md-icon-button\"><md-icon>close</md-icon></md-button></div></md-toolbar><md-dialog-content class=\"md-padding\"><div layout=\"column\" flex class=\"fancy-radio-container\"><h4 class=\"md-caption\" data-translate>global.customDataTable.select_yes_no_description</h4><md-divider></md-divider><md-radio-group ng-model=\"vm.model.content\"><div class=\"row\"><div flex layout=\"row\" layout-align=\"start center\"><md-radio-button md-autofocus value=\"true\" class=\"md-primary no-margin flex md-padding\"><span flex data-translate>global.form.yes</span></md-radio-button></div></div><div class=\"row\"><div flex layout=\"row\" layout-align=\"start center\"><md-radio-button class=\"no-margin flex md-padding\" value=\"false\"><span flex data-translate>global.form.no</span></md-radio-button></div></div></md-radio-group><md-divider></md-divider></div></md-dialog-content><md-dialog-actions layout=\"row\"><span flex></span><md-button ng-click=\"vm.apply()\" ng-disabled=\"form.$invalid\"><label data-translate>global.buttons.apply</label><md-icon>done</md-icon></md-button></md-dialog-actions></form></md-dialog>');\n$templateCache.put('app/blocks/util/directives/table-input/EnumInputView.html','<md-dialog flex=\"40\"><form name=\"form\" ng-cloak><md-toolbar><div class=\"md-toolbar-tools\"><h2><span data-translate>global.customDataTable.edit_popup.title</span></h2><span flex></span><md-button ng-click=\"vm.dismiss()\" class=\"md-icon-button\"><md-icon>close</md-icon></md-button></div></md-toolbar><md-dialog-content class=\"md-padding\"><div layout=\"column\"><alert></alert><span class=\"md-caption\" data-translate ng-if=\"vm.config.hint\">{{vm.config.hint}}</span><div><br><md-autocomplete md-clear-button=\"true\" md-no-cache=\"true\" md-delay=\"500\" md-auto-focus=\"true\" md-selected-item=\"vm.model\" md-select-on-match=\"true\" md-match-case-insensitive=\"true\" md-search-text=\"query\" md-items=\"item in vm.onSearch(query, true)\" md-item-text=\"vm.displayField(item)\" md-min-length=\"vm.config.minLength\" autocomplete-infinite-scroll=\"vm.onSearch(query)\" placeholder=\"{{\\'global.customDataTable.query\\' | translate}}\"><md-item-template><div ng-click=\"vm.onItemClick($event, item)\" ng-disabled=\"item.disabled\" layout=\"row\" flex title=\"{{(item.disabled ? vm.config.disabledTooltipText : \\'\\' | translate)}}\"><md-truncate flex md-highlight-text=\"query\" md-highlight-flags=\"gi\">{{vm.displayField(item)}}</md-truncate><md-tooltip ng-if=\"vm.displayField(item).length > 40\">{{vm.displayField(item)}}</md-tooltip></div></md-item-template><md-not-found><span data-translate>global.customDataTable.no_result</span></md-not-found></md-autocomplete></div></div></md-dialog-content><md-dialog-actions layout=\"row\"><span flex></span><md-button ng-click=\"vm.apply()\" ng-disabled=\"!vm.model || form.$invalid\"><label data-translate>global.buttons.apply</label><md-icon>done</md-icon></md-button></md-dialog-actions></form></md-dialog>');\n$templateCache.put('app/blocks/util/directives/table-input/NumericInputView.html','<md-dialog flex=\"30\"><form name=\"form\" ng-cloak><md-toolbar><div class=\"md-toolbar-tools\"><h2><span data-translate>global.customDataTable.edit_popup.title</span></h2><span flex></span><md-button ng-click=\"vm.dismiss()\" class=\"md-icon-button\"><md-icon>close</md-icon></md-button></div></md-toolbar><md-dialog-content class=\"md-padding\"><div layout=\"row\" flex><md-input-container flex><label data-translate>global.customDataTable.edit_popup.input_title</label><input type=\"text\" name=\"content\" md-auto-focus ng-pattern=\"vm.patternOnlyOneDecimal\" ng-model=\"vm.model.content\" ng-required=\"{{vm.validations.required === null ? true : vm.validations.required}}\" ng-attr-ng-max=\"{{vm.validations.max}}\" ng-attr-ng-min=\"{{vm.validations.min}}\"><div ng-messages=\"form.content.$error\"><div ng-message-exp=\"[\\'required\\',\\'min\\']\" ng-if=\"vm.validations.min != null\"><span data-translate translate-value-length=\"{{vm.validations.min}}\">global.messages.error.min</span></div><div ng-message=\"required\" ng-if=\"vm.validations.min == null\"><span data-translate>global.messages.error.required</span></div><div ng-message=\"max\"><span data-translate translate-value-length=\"{{vm.validations.max}}\">global.messages.error.max</span></div><div ng-message=\"pattern\"><span data-translate>global.messages.error.number-only</span></div></div></md-input-container></div></md-dialog-content><md-dialog-actions layout=\"row\"><span flex></span><md-button ng-click=\"vm.apply()\" ng-disabled=\"form.$invalid\"><label data-translate>global.buttons.apply</label><md-icon>done</md-icon></md-button></md-dialog-actions></form></md-dialog>');\n$templateCache.put('app/blocks/util/directives/table-input/TextInputView.html','<md-dialog flex=\"40\"><form name=\"form\" ng-cloak flex><md-toolbar><div class=\"md-toolbar-tools\"><h2><span data-translate>global.customDataTable.edit_popup.title</span></h2><span flex></span><md-button ng-click=\"vm.dismiss()\" class=\"md-icon-button\"><md-icon>close</md-icon></md-button></div></md-toolbar><md-dialog-content class=\"md-padding\"><div layout=\"row\" flex><md-input-container flex><label data-translate>global.customDataTable.edit_popup.input_title</label><input type=\"text\" name=\"content\" md-auto-focus ng-model=\"vm.model.content\" ng-required=\"{{vm.validations.minLength > 0}}\" ng-attr-md-maxlength=\"{{vm.validations.maxLength}}\" ng-attr-ng-minlength=\"{{vm.validations.minLength}}\"><div ng-messages=\"form.content.$error\"><div ng-message-exp=\"[\\'required\\',\\'minlength\\']\" ng-if=\"vm.validations.minLength != null\"><span data-translate translate-value-length=\"{{vm.validations.minLength}}\">global.messages.error.min</span></div><div ng-message=\"required\" ng-if=\"vm.validations.minLength == null\"><span data-translate>global.messages.error.required</span></div><div ng-message=\"md-maxlength\"><span data-translate translate-value-length=\"{{vm.validations.maxLength}}\">global.messages.error.max</span></div></div></md-input-container></div></md-dialog-content><md-dialog-actions layout=\"row\"><span flex></span><md-button ng-click=\"vm.apply()\" ng-disabled=\"form.$invalid\"><label data-translate>global.buttons.apply</label><md-icon>done</md-icon></md-button></md-dialog-actions></form></md-dialog>');\n$templateCache.put('app/bower_components/swagger-ui/src/main/html/index.html','<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Swagger UI</title><link rel=\"icon\" type=\"image/png\" href=\"images/favicon-32x32.png\" sizes=\"32x32\"><link rel=\"icon\" type=\"image/png\" href=\"images/favicon-16x16.png\" sizes=\"16x16\"><link href=\"css/typography.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/reset.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/screen.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/reset.css\" media=\"print\" rel=\"stylesheet\" type=\"text/css\"><link href=\"css/print.css\" media=\"print\" rel=\"stylesheet\" type=\"text/css\"><script src=\"lib/object-assign-pollyfill.js\" type=\"text/javascript\"></script><script src=\"lib/jquery-1.8.0.min.js\" type=\"text/javascript\"></script><script src=\"lib/jquery.slideto.min.js\" type=\"text/javascript\"></script><script src=\"lib/jquery.wiggle.min.js\" type=\"text/javascript\"></script><script src=\"lib/jquery.ba-bbq.min.js\" type=\"text/javascript\"></script><script src=\"lib/handlebars-2.0.0.js\" type=\"text/javascript\"></script><script src=\"lib/lodash.min.js\" type=\"text/javascript\"></script><script src=\"lib/backbone-min.js\" type=\"text/javascript\"></script><script src=\"swagger-ui.js\" type=\"text/javascript\"></script><script src=\"lib/highlight.9.1.0.pack.js\" type=\"text/javascript\"></script><script src=\"lib/highlight.9.1.0.pack_extended.js\" type=\"text/javascript\"></script><script src=\"lib/jsoneditor.min.js\" type=\"text/javascript\"></script><script src=\"lib/marked.js\" type=\"text/javascript\"></script><script src=\"lib/swagger-oauth.js\" type=\"text/javascript\"></script><!-- Some basic translations --><!-- <script src=\\'lang/translator.js\\' type=\\'text/javascript\\'></script> --><!-- <script src=\\'lang/ru.js\\' type=\\'text/javascript\\'></script> --><!-- <script src=\\'lang/en.js\\' type=\\'text/javascript\\'></script> --><script type=\"text/javascript\">$(function () {\\n      var url = window.location.search.match(/url=([^&]+)/);\\n      if (url && url.length > 1) {\\n        url = decodeURIComponent(url[1]);\\n      } else {\\n        url = \"http://petstore.swagger.io/v2/swagger.json\";\\n      }\\n\\n      hljs.configure({\\n        highlightSizeThreshold: 5000\\n      });\\n\\n      // Pre load translate...\\n      if(window.SwaggerTranslator) {\\n        window.SwaggerTranslator.translate();\\n      }\\n      window.swaggerUi = new SwaggerUi({\\n        url: url,\\n        dom_id: \"swagger-ui-container\",\\n        supportedSubmitMethods: [\\'get\\', \\'post\\', \\'put\\', \\'delete\\', \\'patch\\'],\\n        onComplete: function(swaggerApi, swaggerUi){\\n          if(typeof initOAuth == \"function\") {\\n            initOAuth({\\n              clientId: \"your-client-id\",\\n              clientSecret: \"your-client-secret-if-required\",\\n              realm: \"your-realms\",\\n              appName: \"your-app-name\",\\n              scopeSeparator: \",\",\\n              additionalQueryStringParams: {}\\n            });\\n          }\\n\\n          if(window.SwaggerTranslator) {\\n            window.SwaggerTranslator.translate();\\n          }\\n        },\\n        onFailure: function(data) {\\n          log(\"Unable to Load SwaggerUI\");\\n        },\\n        docExpansion: \"none\",\\n        jsonEditor: false,\\n        defaultModelRendering: \\'schema\\',\\n        showRequestHeaders: false\\n      });\\n\\n      window.swaggerUi.load();\\n\\n      function log() {\\n        if (\\'console\\' in window) {\\n          console.log.apply(console, arguments);\\n        }\\n      }\\n  });</script></head><body class=\"swagger-section\"><div id=\"header\"><div class=\"swagger-ui-wrap\"><a id=\"logo\" href=\"http://swagger.io\"><img class=\"logo__img\" alt=\"swagger\" height=\"30\" width=\"30\" src=\"images/logo_small.png\"><span class=\"logo__title\">swagger</span></a><form id=\"api_selector\"><div class=\"input\"><input placeholder=\"http://example.com/api\" id=\"input_baseUrl\" name=\"baseUrl\" type=\"text\"></div><div id=\"auth_container\"></div><div class=\"input\"><a id=\"explore\" class=\"header__btn\" href=\"#\" data-sw-translate>Explore</a></div></form></div></div><div id=\"message-bar\" class=\"swagger-ui-wrap\" data-sw-translate>&nbsp;</div><div id=\"swagger-ui-container\" class=\"swagger-ui-wrap\"></div></body></html>');\n$templateCache.put('app/bower_components/swagger-ui/src/main/html/o2c.html','<script>var qp = null;\\nif(window.location.hash) {\\n  qp = location.hash.substring(1);\\n}\\nelse {\\n  qp = location.search.substring(1);\\n}\\nqp = qp ? JSON.parse(\\'{\"\\' + qp.replace(/&/g, \\'\",\"\\').replace(/=/g,\\'\":\"\\') + \\'\"}\\',\\n  function(key, value) {\\n    return key===\"\"?value:decodeURIComponent(value) }\\n  ):{}\\n\\nif (window.opener.swaggerUi.tokenUrl)\\n    window.opener.processOAuthCode(qp);\\nelse\\n    window.opener.onOAuthComplete(qp);\\n\\nwindow.close();</script>');}]);})();"],"sourceRoot":"/source/"}